
SmartHome_MasterCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022a  00800060  00006222  000062b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080028a  0080028a  000064e0  2**0
                  ALLOC
  3 .stab         00004c20  00000000  00000000  000064e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fff  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000c0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000c25f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000c3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000e433  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000f534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000104b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00010638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000108fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 69 2d 	jmp	0x5ad2	; 0x5ad2 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <main>
      8a:	0c 94 0f 31 	jmp	0x621e	; 0x621e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d8 30 	jmp	0x61b0	; 0x61b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f4 30 	jmp	0x61e8	; 0x61e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 00 31 	jmp	0x6200	; 0x6200 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 00 31 	jmp	0x6200	; 0x6200 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d8 30 	jmp	0x61b0	; 0x61b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f4 30 	jmp	0x61e8	; 0x61e8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 30 	jmp	0x61c0	; 0x61c0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fc 30 	jmp	0x61f8	; 0x61f8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 00 31 	jmp	0x6200	; 0x6200 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 00 31 	jmp	0x6200	; 0x6200 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 00 31 	jmp	0x6200	; 0x6200 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e8 30 	jmp	0x61d0	; 0x61d0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 04 31 	jmp	0x6208	; 0x6208 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Dio_SetPinDirection>:
#include "Dio_Int.h"
#include "Dio_Reg.h"
#include "Utilites.h"

void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	27 97       	sbiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD) && (PinNo<=PIN7))
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	84 30       	cpi	r24, 0x04	; 4
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <Dio_SetPinDirection+0x22>
     cbe:	ee c0       	rjmp	.+476    	; 0xe9c <Dio_SetPinDirection+0x1fe>
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	88 30       	cpi	r24, 0x08	; 8
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <Dio_SetPinDirection+0x2a>
     cc6:	ea c0       	rjmp	.+468    	; 0xe9c <Dio_SetPinDirection+0x1fe>
	{
		if(Direction==OUTPUT)
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <Dio_SetPinDirection+0x32>
     cce:	6f c0       	rjmp	.+222    	; 0xdae <Dio_SetPinDirection+0x110>
		{
			switch(GroupNo)
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	3f 83       	std	Y+7, r19	; 0x07
     cd8:	2e 83       	std	Y+6, r18	; 0x06
     cda:	8e 81       	ldd	r24, Y+6	; 0x06
     cdc:	9f 81       	ldd	r25, Y+7	; 0x07
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	91 05       	cpc	r25, r1
     ce2:	49 f1       	breq	.+82     	; 0xd36 <Dio_SetPinDirection+0x98>
     ce4:	2e 81       	ldd	r18, Y+6	; 0x06
     ce6:	3f 81       	ldd	r19, Y+7	; 0x07
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	2c f4       	brge	.+10     	; 0xcf8 <Dio_SetPinDirection+0x5a>
     cee:	8e 81       	ldd	r24, Y+6	; 0x06
     cf0:	9f 81       	ldd	r25, Y+7	; 0x07
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	61 f0       	breq	.+24     	; 0xd0e <Dio_SetPinDirection+0x70>
     cf6:	d2 c0       	rjmp	.+420    	; 0xe9c <Dio_SetPinDirection+0x1fe>
     cf8:	2e 81       	ldd	r18, Y+6	; 0x06
     cfa:	3f 81       	ldd	r19, Y+7	; 0x07
     cfc:	22 30       	cpi	r18, 0x02	; 2
     cfe:	31 05       	cpc	r19, r1
     d00:	71 f1       	breq	.+92     	; 0xd5e <Dio_SetPinDirection+0xc0>
     d02:	8e 81       	ldd	r24, Y+6	; 0x06
     d04:	9f 81       	ldd	r25, Y+7	; 0x07
     d06:	83 30       	cpi	r24, 0x03	; 3
     d08:	91 05       	cpc	r25, r1
     d0a:	e9 f1       	breq	.+122    	; 0xd86 <Dio_SetPinDirection+0xe8>
     d0c:	c7 c0       	rjmp	.+398    	; 0xe9c <Dio_SetPinDirection+0x1fe>
			{
			case GroupA: SET_BIT(DDRA, PinNo); break;
     d0e:	aa e3       	ldi	r26, 0x3A	; 58
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ea e3       	ldi	r30, 0x3A	; 58
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <Dio_SetPinDirection+0x8e>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <Dio_SetPinDirection+0x8a>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	b3 c0       	rjmp	.+358    	; 0xe9c <Dio_SetPinDirection+0x1fe>
			case GroupB: SET_BIT(DDRB, PinNo); break;
     d36:	a7 e3       	ldi	r26, 0x37	; 55
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e3       	ldi	r30, 0x37	; 55
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <Dio_SetPinDirection+0xb6>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <Dio_SetPinDirection+0xb2>
     d58:	84 2b       	or	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	9f c0       	rjmp	.+318    	; 0xe9c <Dio_SetPinDirection+0x1fe>
			case GroupC: SET_BIT(DDRC, PinNo); break;
     d5e:	a4 e3       	ldi	r26, 0x34	; 52
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e4 e3       	ldi	r30, 0x34	; 52
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <Dio_SetPinDirection+0xde>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <Dio_SetPinDirection+0xda>
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	8b c0       	rjmp	.+278    	; 0xe9c <Dio_SetPinDirection+0x1fe>
			case GroupD: SET_BIT(DDRD, PinNo); break;
     d86:	a1 e3       	ldi	r26, 0x31	; 49
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e1 e3       	ldi	r30, 0x31	; 49
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <Dio_SetPinDirection+0x106>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <Dio_SetPinDirection+0x102>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	77 c0       	rjmp	.+238    	; 0xe9c <Dio_SetPinDirection+0x1fe>
			}
		}
		else if(Direction==INPUT)
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	88 23       	and	r24, r24
     db2:	09 f0       	breq	.+2      	; 0xdb6 <Dio_SetPinDirection+0x118>
     db4:	73 c0       	rjmp	.+230    	; 0xe9c <Dio_SetPinDirection+0x1fe>
		{
			switch(GroupNo)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	3d 83       	std	Y+5, r19	; 0x05
     dbe:	2c 83       	std	Y+4, r18	; 0x04
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	9d 81       	ldd	r25, Y+5	; 0x05
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	59 f1       	breq	.+86     	; 0xe20 <Dio_SetPinDirection+0x182>
     dca:	2c 81       	ldd	r18, Y+4	; 0x04
     dcc:	3d 81       	ldd	r19, Y+5	; 0x05
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	2c f4       	brge	.+10     	; 0xdde <Dio_SetPinDirection+0x140>
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	9d 81       	ldd	r25, Y+5	; 0x05
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	69 f0       	breq	.+26     	; 0xdf6 <Dio_SetPinDirection+0x158>
     ddc:	5f c0       	rjmp	.+190    	; 0xe9c <Dio_SetPinDirection+0x1fe>
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	3d 81       	ldd	r19, Y+5	; 0x05
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	89 f1       	breq	.+98     	; 0xe4a <Dio_SetPinDirection+0x1ac>
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	91 05       	cpc	r25, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <Dio_SetPinDirection+0x156>
     df2:	40 c0       	rjmp	.+128    	; 0xe74 <Dio_SetPinDirection+0x1d6>
     df4:	53 c0       	rjmp	.+166    	; 0xe9c <Dio_SetPinDirection+0x1fe>
			{
			case GroupA: CLR_BIT(DDRA, PinNo); break;
     df6:	aa e3       	ldi	r26, 0x3A	; 58
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ea e3       	ldi	r30, 0x3A	; 58
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <Dio_SetPinDirection+0x176>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <Dio_SetPinDirection+0x172>
     e18:	80 95       	com	r24
     e1a:	84 23       	and	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	3e c0       	rjmp	.+124    	; 0xe9c <Dio_SetPinDirection+0x1fe>
			case GroupB: CLR_BIT(DDRB, PinNo); break;
     e20:	a7 e3       	ldi	r26, 0x37	; 55
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e7 e3       	ldi	r30, 0x37	; 55
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <Dio_SetPinDirection+0x1a0>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <Dio_SetPinDirection+0x19c>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	29 c0       	rjmp	.+82     	; 0xe9c <Dio_SetPinDirection+0x1fe>
			case GroupC: CLR_BIT(DDRC, PinNo); break;
     e4a:	a4 e3       	ldi	r26, 0x34	; 52
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e4 e3       	ldi	r30, 0x34	; 52
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <Dio_SetPinDirection+0x1ca>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <Dio_SetPinDirection+0x1c6>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <Dio_SetPinDirection+0x1fe>
			case GroupD: CLR_BIT(DDRD, PinNo); break;
     e74:	a1 e3       	ldi	r26, 0x31	; 49
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e1 e3       	ldi	r30, 0x31	; 49
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <Dio_SetPinDirection+0x1f4>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <Dio_SetPinDirection+0x1f0>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
		else
		{
			//wrong Direction do noting
		}
	}
}
     e9c:	27 96       	adiw	r28, 0x07	; 7
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <Dio_SetPinValue>:
void Dio_SetPinValue(u8 GroupNo, u8 PinNo, u8 Value)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	27 97       	sbiw	r28, 0x07	; 7
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6a 83       	std	Y+2, r22	; 0x02
     ec6:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD) && (PinNo<=PIN7))
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	84 30       	cpi	r24, 0x04	; 4
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <Dio_SetPinValue+0x22>
     ece:	ee c0       	rjmp	.+476    	; 0x10ac <Dio_SetPinValue+0x1fe>
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	88 30       	cpi	r24, 0x08	; 8
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <Dio_SetPinValue+0x2a>
     ed6:	ea c0       	rjmp	.+468    	; 0x10ac <Dio_SetPinValue+0x1fe>
		{
			if(Value==LOW)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	88 23       	and	r24, r24
     edc:	09 f0       	breq	.+2      	; 0xee0 <Dio_SetPinValue+0x32>
     ede:	74 c0       	rjmp	.+232    	; 0xfc8 <Dio_SetPinValue+0x11a>
			{
				switch(GroupNo)
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3f 83       	std	Y+7, r19	; 0x07
     ee8:	2e 83       	std	Y+6, r18	; 0x06
     eea:	8e 81       	ldd	r24, Y+6	; 0x06
     eec:	9f 81       	ldd	r25, Y+7	; 0x07
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	91 05       	cpc	r25, r1
     ef2:	59 f1       	breq	.+86     	; 0xf4a <Dio_SetPinValue+0x9c>
     ef4:	2e 81       	ldd	r18, Y+6	; 0x06
     ef6:	3f 81       	ldd	r19, Y+7	; 0x07
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	2c f4       	brge	.+10     	; 0xf08 <Dio_SetPinValue+0x5a>
     efe:	8e 81       	ldd	r24, Y+6	; 0x06
     f00:	9f 81       	ldd	r25, Y+7	; 0x07
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f0       	breq	.+26     	; 0xf20 <Dio_SetPinValue+0x72>
     f06:	d2 c0       	rjmp	.+420    	; 0x10ac <Dio_SetPinValue+0x1fe>
     f08:	2e 81       	ldd	r18, Y+6	; 0x06
     f0a:	3f 81       	ldd	r19, Y+7	; 0x07
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	89 f1       	breq	.+98     	; 0xf74 <Dio_SetPinValue+0xc6>
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <Dio_SetPinValue+0x70>
     f1c:	40 c0       	rjmp	.+128    	; 0xf9e <Dio_SetPinValue+0xf0>
     f1e:	c6 c0       	rjmp	.+396    	; 0x10ac <Dio_SetPinValue+0x1fe>
				{
				case GroupA: CLR_BIT(PORTA, PinNo); break;
     f20:	ab e3       	ldi	r26, 0x3B	; 59
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	eb e3       	ldi	r30, 0x3B	; 59
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <Dio_SetPinValue+0x90>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <Dio_SetPinValue+0x8c>
     f42:	80 95       	com	r24
     f44:	84 23       	and	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	b1 c0       	rjmp	.+354    	; 0x10ac <Dio_SetPinValue+0x1fe>
				case GroupB: CLR_BIT(PORTB, PinNo); break;
     f4a:	a8 e3       	ldi	r26, 0x38	; 56
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e8 e3       	ldi	r30, 0x38	; 56
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <Dio_SetPinValue+0xba>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <Dio_SetPinValue+0xb6>
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	9c c0       	rjmp	.+312    	; 0x10ac <Dio_SetPinValue+0x1fe>
				case GroupC: CLR_BIT(PORTC, PinNo); break;
     f74:	a5 e3       	ldi	r26, 0x35	; 53
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e3       	ldi	r30, 0x35	; 53
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <Dio_SetPinValue+0xe4>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <Dio_SetPinValue+0xe0>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	87 c0       	rjmp	.+270    	; 0x10ac <Dio_SetPinValue+0x1fe>
				case GroupD: CLR_BIT(PORTD, PinNo); break;
     f9e:	a2 e3       	ldi	r26, 0x32	; 50
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e2 e3       	ldi	r30, 0x32	; 50
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <Dio_SetPinValue+0x10e>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <Dio_SetPinValue+0x10a>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	72 c0       	rjmp	.+228    	; 0x10ac <Dio_SetPinValue+0x1fe>
				}
			}
			else if(Value==HIGH)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <Dio_SetPinValue+0x122>
     fce:	6e c0       	rjmp	.+220    	; 0x10ac <Dio_SetPinValue+0x1fe>
			{
				switch(GroupNo)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	3d 83       	std	Y+5, r19	; 0x05
     fd8:	2c 83       	std	Y+4, r18	; 0x04
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	9d 81       	ldd	r25, Y+5	; 0x05
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	91 05       	cpc	r25, r1
     fe2:	49 f1       	breq	.+82     	; 0x1036 <Dio_SetPinValue+0x188>
     fe4:	2c 81       	ldd	r18, Y+4	; 0x04
     fe6:	3d 81       	ldd	r19, Y+5	; 0x05
     fe8:	22 30       	cpi	r18, 0x02	; 2
     fea:	31 05       	cpc	r19, r1
     fec:	2c f4       	brge	.+10     	; 0xff8 <Dio_SetPinValue+0x14a>
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	9d 81       	ldd	r25, Y+5	; 0x05
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	61 f0       	breq	.+24     	; 0x100e <Dio_SetPinValue+0x160>
     ff6:	5a c0       	rjmp	.+180    	; 0x10ac <Dio_SetPinValue+0x1fe>
     ff8:	2c 81       	ldd	r18, Y+4	; 0x04
     ffa:	3d 81       	ldd	r19, Y+5	; 0x05
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	71 f1       	breq	.+92     	; 0x105e <Dio_SetPinValue+0x1b0>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	91 05       	cpc	r25, r1
    100a:	e9 f1       	breq	.+122    	; 0x1086 <Dio_SetPinValue+0x1d8>
    100c:	4f c0       	rjmp	.+158    	; 0x10ac <Dio_SetPinValue+0x1fe>
				{
				case GroupA: SET_BIT(PORTA, PinNo); break;
    100e:	ab e3       	ldi	r26, 0x3B	; 59
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	eb e3       	ldi	r30, 0x3B	; 59
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <Dio_SetPinValue+0x17e>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <Dio_SetPinValue+0x17a>
    1030:	84 2b       	or	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	3b c0       	rjmp	.+118    	; 0x10ac <Dio_SetPinValue+0x1fe>
				case GroupB: SET_BIT(PORTB, PinNo); break;
    1036:	a8 e3       	ldi	r26, 0x38	; 56
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e8 e3       	ldi	r30, 0x38	; 56
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <Dio_SetPinValue+0x1a6>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <Dio_SetPinValue+0x1a2>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	27 c0       	rjmp	.+78     	; 0x10ac <Dio_SetPinValue+0x1fe>
				case GroupC: SET_BIT(PORTC, PinNo); break;
    105e:	a5 e3       	ldi	r26, 0x35	; 53
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e5 e3       	ldi	r30, 0x35	; 53
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <Dio_SetPinValue+0x1ce>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <Dio_SetPinValue+0x1ca>
    1080:	84 2b       	or	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	13 c0       	rjmp	.+38     	; 0x10ac <Dio_SetPinValue+0x1fe>
				case GroupD: SET_BIT(PORTD, PinNo); break;
    1086:	a2 e3       	ldi	r26, 0x32	; 50
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e2 e3       	ldi	r30, 0x32	; 50
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <Dio_SetPinValue+0x1f6>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <Dio_SetPinValue+0x1f2>
    10a8:	84 2b       	or	r24, r20
    10aa:	8c 93       	st	X, r24
			else
			{
				//wrong Direction do noting
			}
		}
}
    10ac:	27 96       	adiw	r28, 0x07	; 7
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <Dio_GetPinValue>:
u8 Dio_GetPinValue(u8 GroupNo, u8 PinNo)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <Dio_GetPinValue+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <Dio_GetPinValue+0x8>
    10c6:	0f 92       	push	r0
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	6b 83       	std	Y+3, r22	; 0x03
	u8 Ret_PinValue=0;
    10d0:	19 82       	std	Y+1, r1	; 0x01

	if((GroupNo<=GroupD) && (PinNo<=PIN7))
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	08 f0       	brcs	.+2      	; 0x10da <Dio_GetPinValue+0x1c>
    10d8:	6c c0       	rjmp	.+216    	; 0x11b2 <Dio_GetPinValue+0xf4>
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 30       	cpi	r24, 0x08	; 8
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <Dio_GetPinValue+0x24>
    10e0:	68 c0       	rjmp	.+208    	; 0x11b2 <Dio_GetPinValue+0xf4>
	{
		switch(GroupNo)
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	3d 83       	std	Y+5, r19	; 0x05
    10ea:	2c 83       	std	Y+4, r18	; 0x04
    10ec:	4c 81       	ldd	r20, Y+4	; 0x04
    10ee:	5d 81       	ldd	r21, Y+5	; 0x05
    10f0:	41 30       	cpi	r20, 0x01	; 1
    10f2:	51 05       	cpc	r21, r1
    10f4:	41 f1       	breq	.+80     	; 0x1146 <Dio_GetPinValue+0x88>
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	9d 81       	ldd	r25, Y+5	; 0x05
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	91 05       	cpc	r25, r1
    10fe:	34 f4       	brge	.+12     	; 0x110c <Dio_GetPinValue+0x4e>
    1100:	2c 81       	ldd	r18, Y+4	; 0x04
    1102:	3d 81       	ldd	r19, Y+5	; 0x05
    1104:	21 15       	cp	r18, r1
    1106:	31 05       	cpc	r19, r1
    1108:	61 f0       	breq	.+24     	; 0x1122 <Dio_GetPinValue+0x64>
    110a:	55 c0       	rjmp	.+170    	; 0x11b6 <Dio_GetPinValue+0xf8>
    110c:	4c 81       	ldd	r20, Y+4	; 0x04
    110e:	5d 81       	ldd	r21, Y+5	; 0x05
    1110:	42 30       	cpi	r20, 0x02	; 2
    1112:	51 05       	cpc	r21, r1
    1114:	51 f1       	breq	.+84     	; 0x116a <Dio_GetPinValue+0xac>
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	b9 f1       	breq	.+110    	; 0x118e <Dio_GetPinValue+0xd0>
    1120:	4a c0       	rjmp	.+148    	; 0x11b6 <Dio_GetPinValue+0xf8>
		{
		case GroupA: Ret_PinValue=GET_BIT(PINA, PinNo); break;
    1122:	e9 e3       	ldi	r30, 0x39	; 57
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a9 01       	movw	r20, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <Dio_GetPinValue+0x7c>
    1136:	55 95       	asr	r21
    1138:	47 95       	ror	r20
    113a:	8a 95       	dec	r24
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <Dio_GetPinValue+0x78>
    113e:	ca 01       	movw	r24, r20
    1140:	81 70       	andi	r24, 0x01	; 1
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	38 c0       	rjmp	.+112    	; 0x11b6 <Dio_GetPinValue+0xf8>
		case GroupB: Ret_PinValue=GET_BIT(PINB, PinNo); break;
    1146:	e6 e3       	ldi	r30, 0x36	; 54
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a9 01       	movw	r20, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <Dio_GetPinValue+0xa0>
    115a:	55 95       	asr	r21
    115c:	47 95       	ror	r20
    115e:	8a 95       	dec	r24
    1160:	e2 f7       	brpl	.-8      	; 0x115a <Dio_GetPinValue+0x9c>
    1162:	ca 01       	movw	r24, r20
    1164:	81 70       	andi	r24, 0x01	; 1
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	26 c0       	rjmp	.+76     	; 0x11b6 <Dio_GetPinValue+0xf8>
		case GroupC: Ret_PinValue=GET_BIT(PINC, PinNo); break;
    116a:	e3 e3       	ldi	r30, 0x33	; 51
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a9 01       	movw	r20, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <Dio_GetPinValue+0xc4>
    117e:	55 95       	asr	r21
    1180:	47 95       	ror	r20
    1182:	8a 95       	dec	r24
    1184:	e2 f7       	brpl	.-8      	; 0x117e <Dio_GetPinValue+0xc0>
    1186:	ca 01       	movw	r24, r20
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <Dio_GetPinValue+0xf8>
		case GroupD: Ret_PinValue=GET_BIT(PIND, PinNo); break;
    118e:	e0 e3       	ldi	r30, 0x30	; 48
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a9 01       	movw	r20, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <Dio_GetPinValue+0xe8>
    11a2:	55 95       	asr	r21
    11a4:	47 95       	ror	r20
    11a6:	8a 95       	dec	r24
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <Dio_GetPinValue+0xe4>
    11aa:	ca 01       	movw	r24, r20
    11ac:	81 70       	andi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <Dio_GetPinValue+0xf8>
		}
	}
	else
		Ret_PinValue=0xFF;
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	89 83       	std	Y+1, r24	; 0x01

return Ret_PinValue;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <Dio_TogglePinValue>:
void Dio_TogglePinValue (u8 GroupNo, u8 PinNo)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <Dio_TogglePinValue+0x6>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <Dio_TogglePinValue+0x8>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	6a 83       	std	Y+2, r22	; 0x02
	if((GroupNo<=GroupD) && (PinNo<=PIN7))
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	84 30       	cpi	r24, 0x04	; 4
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <Dio_TogglePinValue+0x18>
    11de:	72 c0       	rjmp	.+228    	; 0x12c4 <Dio_TogglePinValue+0xfc>
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	88 30       	cpi	r24, 0x08	; 8
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <Dio_TogglePinValue+0x20>
    11e6:	6e c0       	rjmp	.+220    	; 0x12c4 <Dio_TogglePinValue+0xfc>
			{
		switch(GroupNo)
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3c 83       	std	Y+4, r19	; 0x04
    11f0:	2b 83       	std	Y+3, r18	; 0x03
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	49 f1       	breq	.+82     	; 0x124e <Dio_TogglePinValue+0x86>
    11fc:	2b 81       	ldd	r18, Y+3	; 0x03
    11fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	2c f4       	brge	.+10     	; 0x1210 <Dio_TogglePinValue+0x48>
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	61 f0       	breq	.+24     	; 0x1226 <Dio_TogglePinValue+0x5e>
    120e:	5a c0       	rjmp	.+180    	; 0x12c4 <Dio_TogglePinValue+0xfc>
    1210:	2b 81       	ldd	r18, Y+3	; 0x03
    1212:	3c 81       	ldd	r19, Y+4	; 0x04
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	71 f1       	breq	.+92     	; 0x1276 <Dio_TogglePinValue+0xae>
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	91 05       	cpc	r25, r1
    1222:	e9 f1       	breq	.+122    	; 0x129e <Dio_TogglePinValue+0xd6>
    1224:	4f c0       	rjmp	.+158    	; 0x12c4 <Dio_TogglePinValue+0xfc>
					{

					case GroupA: TOG_BIT(PORTA, PinNo); break;
    1226:	ab e3       	ldi	r26, 0x3B	; 59
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	eb e3       	ldi	r30, 0x3B	; 59
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <Dio_TogglePinValue+0x7c>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <Dio_TogglePinValue+0x78>
    1248:	84 27       	eor	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	3b c0       	rjmp	.+118    	; 0x12c4 <Dio_TogglePinValue+0xfc>
					case GroupB: TOG_BIT(PORTB, PinNo); break;
    124e:	a8 e3       	ldi	r26, 0x38	; 56
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e8 e3       	ldi	r30, 0x38	; 56
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <Dio_TogglePinValue+0xa4>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <Dio_TogglePinValue+0xa0>
    1270:	84 27       	eor	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	27 c0       	rjmp	.+78     	; 0x12c4 <Dio_TogglePinValue+0xfc>
					case GroupC: TOG_BIT(PORTC, PinNo); break;
    1276:	a5 e3       	ldi	r26, 0x35	; 53
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e3       	ldi	r30, 0x35	; 53
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <Dio_TogglePinValue+0xcc>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <Dio_TogglePinValue+0xc8>
    1298:	84 27       	eor	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	13 c0       	rjmp	.+38     	; 0x12c4 <Dio_TogglePinValue+0xfc>
					case GroupD: TOG_BIT(PORTD, PinNo); break;
    129e:	a2 e3       	ldi	r26, 0x32	; 50
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e2 e3       	ldi	r30, 0x32	; 50
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <Dio_TogglePinValue+0xf4>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <Dio_TogglePinValue+0xf0>
    12c0:	84 27       	eor	r24, r20
    12c2:	8c 93       	st	X, r24
			}

		}
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <EEPROM_ReadByteFromAddress>:
#include "EEPROM_Int.h"
#include <avr/io.h>


u8 EEPROM_ReadByteFromAddress(const u16 u16Address)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <EEPROM_ReadByteFromAddress+0x6>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    12e0:	ec e3       	ldi	r30, 0x3C	; 60
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	82 70       	andi	r24, 0x02	; 2
    12ec:	90 70       	andi	r25, 0x00	; 0
    12ee:	95 95       	asr	r25
    12f0:	87 95       	ror	r24
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	91 05       	cpc	r25, r1
    12f6:	a1 f3       	breq	.-24     	; 0x12e0 <EEPROM_ReadByteFromAddress+0xe>
	;
	/* Set up address register */
	EEAR = u16Address;
    12f8:	ee e3       	ldi	r30, 0x3E	; 62
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
    1304:	ac e3       	ldi	r26, 0x3C	; 60
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ec e3       	ldi	r30, 0x3C	; 60
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	81 60       	ori	r24, 0x01	; 1
    1310:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEDR;
    1312:	ed e3       	ldi	r30, 0x3D	; 61
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <EEPROM_ReadBlockFromAddress>:

void EEPROM_ReadBlockFromAddress(const u16 uiAddress, u8* dist,const u16 size)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	28 97       	sbiw	r28, 0x08	; 8
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	7e 83       	std	Y+6, r23	; 0x06
    133c:	6d 83       	std	Y+5, r22	; 0x05
    133e:	58 87       	std	Y+8, r21	; 0x08
    1340:	4f 83       	std	Y+7, r20	; 0x07
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1);
    1342:	ec e3       	ldi	r30, 0x3C	; 60
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	82 70       	andi	r24, 0x02	; 2
    134e:	90 70       	andi	r25, 0x00	; 0
    1350:	95 95       	asr	r25
    1352:	87 95       	ror	r24
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	a1 f3       	breq	.-24     	; 0x1342 <EEPROM_ReadBlockFromAddress+0x20>

	u16 counter = 0;//the counter of bytes that are read
    135a:	1a 82       	std	Y+2, r1	; 0x02
    135c:	19 82       	std	Y+1, r1	; 0x01
    135e:	21 c0       	rjmp	.+66     	; 0x13a2 <EEPROM_ReadBlockFromAddress+0x80>

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
    1360:	ee e3       	ldi	r30, 0x3E	; 62
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	2b 81       	ldd	r18, Y+3	; 0x03
    1366:	3c 81       	ldd	r19, Y+4	; 0x04
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	82 0f       	add	r24, r18
    136e:	93 1f       	adc	r25, r19
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
    1374:	ac e3       	ldi	r26, 0x3C	; 60
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ec e3       	ldi	r30, 0x3C	; 60
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	81 60       	ori	r24, 0x01	; 1
    1380:	8c 93       	st	X, r24
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
    1382:	2d 81       	ldd	r18, Y+5	; 0x05
    1384:	3e 81       	ldd	r19, Y+6	; 0x06
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	d9 01       	movw	r26, r18
    138c:	a8 0f       	add	r26, r24
    138e:	b9 1f       	adc	r27, r25
    1390:	ed e3       	ldi	r30, 0x3D	; 61
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8c 93       	st	X, r24

		counter++;//increase the bytes counter
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1);

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
    13a2:	29 81       	ldd	r18, Y+1	; 0x01
    13a4:	3a 81       	ldd	r19, Y+2	; 0x02
    13a6:	8f 81       	ldd	r24, Y+7	; 0x07
    13a8:	98 85       	ldd	r25, Y+8	; 0x08
    13aa:	28 17       	cp	r18, r24
    13ac:	39 07       	cpc	r19, r25
    13ae:	c0 f2       	brcs	.-80     	; 0x1360 <EEPROM_ReadBlockFromAddress+0x3e>
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
    13b0:	28 96       	adiw	r28, 0x08	; 8
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <EEPROM_WriteByteToAddress>:

void EEPROM_WriteByteToAddress(const u16 uiAddress, const u8 uiData)
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <EEPROM_WriteByteToAddress+0x6>
    13c8:	0f 92       	push	r0
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    13d4:	ec e3       	ldi	r30, 0x3C	; 60
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	88 2f       	mov	r24, r24
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	82 70       	andi	r24, 0x02	; 2
    13e0:	90 70       	andi	r25, 0x00	; 0
    13e2:	95 95       	asr	r25
    13e4:	87 95       	ror	r24
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	91 05       	cpc	r25, r1
    13ea:	a1 f3       	breq	.-24     	; 0x13d4 <EEPROM_WriteByteToAddress+0x12>
	;
	/* Set up address register */
	EEAR = uiAddress;
    13ec:	ee e3       	ldi	r30, 0x3E	; 62
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	9a 81       	ldd	r25, Y+2	; 0x02
    13f4:	91 83       	std	Z+1, r25	; 0x01
    13f6:	80 83       	st	Z, r24

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
    13f8:	ac e3       	ldi	r26, 0x3C	; 60
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ec e3       	ldi	r30, 0x3C	; 60
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	81 60       	ori	r24, 0x01	; 1
    1404:	8c 93       	st	X, r24
	if (EEDR != uiData)//compare the value read to the value to be written
    1406:	ed e3       	ldi	r30, 0x3D	; 61
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	90 81       	ld	r25, Z
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	98 17       	cp	r25, r24
    1410:	91 f0       	breq	.+36     	; 0x1436 <EEPROM_WriteByteToAddress+0x74>
	{//if they are not equal then write the data
		EEDR = uiData;//move the data to EEDR
    1412:	ed e3       	ldi	r30, 0x3D	; 61
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	80 83       	st	Z, r24

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
    141a:	ac e3       	ldi	r26, 0x3C	; 60
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ec e3       	ldi	r30, 0x3C	; 60
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	84 60       	ori	r24, 0x04	; 4
    1426:	8c 93       	st	X, r24
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
    1428:	ac e3       	ldi	r26, 0x3C	; 60
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ec e3       	ldi	r30, 0x3C	; 60
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	82 60       	ori	r24, 0x02	; 2
    1434:	8c 93       	st	X, r24
	else
	{

	}

}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <EEPROM_WriteBlockToAddress>:

void EEPROM_WriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	28 97       	sbiw	r28, 0x08	; 8
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	8b 83       	std	Y+3, r24	; 0x03
    145a:	7e 83       	std	Y+6, r23	; 0x06
    145c:	6d 83       	std	Y+5, r22	; 0x05
    145e:	58 87       	std	Y+8, r21	; 0x08
    1460:	4f 83       	std	Y+7, r20	; 0x07
	u16 counter = 0;//Bytes write counter
    1462:	1a 82       	std	Y+2, r1	; 0x02
    1464:	19 82       	std	Y+1, r1	; 0x01
    1466:	48 c0       	rjmp	.+144    	; 0x14f8 <EEPROM_WriteBlockToAddress+0xb6>
	while (counter < size)
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1);
    1468:	ec e3       	ldi	r30, 0x3C	; 60
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	82 70       	andi	r24, 0x02	; 2
    1474:	90 70       	andi	r25, 0x00	; 0
    1476:	95 95       	asr	r25
    1478:	87 95       	ror	r24
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	a1 f3       	breq	.-24     	; 0x1468 <EEPROM_WriteBlockToAddress+0x26>


		/* Set up address register */
		EEAR = uiAddress + counter;
    1480:	ee e3       	ldi	r30, 0x3E	; 62
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	3c 81       	ldd	r19, Y+4	; 0x04
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	82 0f       	add	r24, r18
    148e:	93 1f       	adc	r25, r19
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
    1494:	ac e3       	ldi	r26, 0x3C	; 60
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ec e3       	ldi	r30, 0x3C	; 60
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	81 60       	ori	r24, 0x01	; 1
    14a0:	8c 93       	st	X, r24
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
    14a2:	ed e3       	ldi	r30, 0x3D	; 61
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	40 81       	ld	r20, Z
    14a8:	2d 81       	ldd	r18, Y+5	; 0x05
    14aa:	3e 81       	ldd	r19, Y+6	; 0x06
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	f9 01       	movw	r30, r18
    14b2:	e8 0f       	add	r30, r24
    14b4:	f9 1f       	adc	r31, r25
    14b6:	80 81       	ld	r24, Z
    14b8:	48 17       	cp	r20, r24
    14ba:	c9 f0       	breq	.+50     	; 0x14ee <EEPROM_WriteBlockToAddress+0xac>
		{//if they are not equal then write the data
			EEDR = *(uiData + counter);//move the data to EEDR
    14bc:	ad e3       	ldi	r26, 0x3D	; 61
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	2d 81       	ldd	r18, Y+5	; 0x05
    14c2:	3e 81       	ldd	r19, Y+6	; 0x06
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	f9 01       	movw	r30, r18
    14ca:	e8 0f       	add	r30, r24
    14cc:	f9 1f       	adc	r31, r25
    14ce:	80 81       	ld	r24, Z
    14d0:	8c 93       	st	X, r24

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
    14d2:	ac e3       	ldi	r26, 0x3C	; 60
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ec e3       	ldi	r30, 0x3C	; 60
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	84 60       	ori	r24, 0x04	; 4
    14de:	8c 93       	st	X, r24
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
    14e0:	ac e3       	ldi	r26, 0x3C	; 60
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ec e3       	ldi	r30, 0x3C	; 60
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	82 60       	ori	r24, 0x02	; 2
    14ec:	8c 93       	st	X, r24
		}
		else
		{

		}
		counter++;//increase bytes counter
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01
}

void EEPROM_WriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
	u16 counter = 0;//Bytes write counter
	while (counter < size)
    14f8:	29 81       	ldd	r18, Y+1	; 0x01
    14fa:	3a 81       	ldd	r19, Y+2	; 0x02
    14fc:	8f 81       	ldd	r24, Y+7	; 0x07
    14fe:	98 85       	ldd	r25, Y+8	; 0x08
    1500:	28 17       	cp	r18, r24
    1502:	39 07       	cpc	r19, r25
    1504:	08 f4       	brcc	.+2      	; 0x1508 <EEPROM_WriteBlockToAddress+0xc6>
    1506:	b0 cf       	rjmp	.-160    	; 0x1468 <EEPROM_WriteBlockToAddress+0x26>
		{

		}
		counter++;//increase bytes counter
	}
}
    1508:	28 96       	adiw	r28, 0x08	; 8
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <LCD_Init>:
#include "Dio_Reg.h"
#include "util/delay.h"
#include  "Dio_config_Master.h"
#include "LCD_Int.h"

void LCD_Init(void) {
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	2e 97       	sbiw	r28, 0x0e	; 14
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61

	//data lines
	Dio_SetPinDirection(LCD_PORT, PIN0, OUTPUT);
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_PORT, PIN1, OUTPUT);
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	61 e0       	ldi	r22, 0x01	; 1
    153c:	41 e0       	ldi	r20, 0x01	; 1
    153e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_PORT, PIN2, OUTPUT);
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	62 e0       	ldi	r22, 0x02	; 2
    1546:	41 e0       	ldi	r20, 0x01	; 1
    1548:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_PORT, PIN3, OUTPUT);
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	63 e0       	ldi	r22, 0x03	; 3
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_PORT, PIN4, OUTPUT);
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	64 e0       	ldi	r22, 0x04	; 4
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_PORT, PIN5, OUTPUT);
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	65 e0       	ldi	r22, 0x05	; 5
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_PORT, PIN6, OUTPUT);
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	66 e0       	ldi	r22, 0x06	; 6
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_PORT, PIN7, OUTPUT);
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	67 e0       	ldi	r22, 0x07	; 7
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>

	//RS c0
	Dio_SetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, OUTPUT);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	//RW
	Dio_SetPinDirection(LCD_CONTROL_PORT, LCD_RW_PIN, OUTPUT);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	62 e0       	ldi	r22, 0x02	; 2
    158c:	41 e0       	ldi	r20, 0x01	; 1
    158e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	//E
	Dio_SetPinDirection(LCD_CONTROL_PORT, LCD_EN_PIN, OUTPUT);
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>


	Dio_SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, 0);
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	62 e0       	ldi	r22, 0x02	; 2
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
	LCD_WriteCommand(EIGHT_BIT_MODE); //function set
    15a6:	88 e3       	ldi	r24, 0x38	; 56
    15a8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_WriteCommand>
	LCD_WriteCommand(DISPLAY_ON_CURSOR_ON); //display on/off setting
    15ac:	8e e0       	ldi	r24, 0x0E	; 14
    15ae:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_WriteCommand>
	LCD_WriteCommand(CLR_SCREEN); //display clear
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_WriteCommand>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a0 e2       	ldi	r26, 0x20	; 32
    15be:	b1 e4       	ldi	r27, 0x41	; 65
    15c0:	8b 87       	std	Y+11, r24	; 0x0b
    15c2:	9c 87       	std	Y+12, r25	; 0x0c
    15c4:	ad 87       	std	Y+13, r26	; 0x0d
    15c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    15cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	4a e7       	ldi	r20, 0x7A	; 122
    15d6:	55 e4       	ldi	r21, 0x45	; 69
    15d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	8f 83       	std	Y+7, r24	; 0x07
    15e2:	98 87       	std	Y+8, r25	; 0x08
    15e4:	a9 87       	std	Y+9, r26	; 0x09
    15e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ea:	78 85       	ldd	r23, Y+8	; 0x08
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	2c f4       	brge	.+10     	; 0x160a <LCD_Init+0xf0>
		__ticks = 1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
    1608:	3f c0       	rjmp	.+126    	; 0x1688 <LCD_Init+0x16e>
	else if (__tmp > 65535)
    160a:	6f 81       	ldd	r22, Y+7	; 0x07
    160c:	78 85       	ldd	r23, Y+8	; 0x08
    160e:	89 85       	ldd	r24, Y+9	; 0x09
    1610:	9a 85       	ldd	r25, Y+10	; 0x0a
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	3f ef       	ldi	r19, 0xFF	; 255
    1616:	4f e7       	ldi	r20, 0x7F	; 127
    1618:	57 e4       	ldi	r21, 0x47	; 71
    161a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    161e:	18 16       	cp	r1, r24
    1620:	4c f5       	brge	.+82     	; 0x1674 <LCD_Init+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1622:	6b 85       	ldd	r22, Y+11	; 0x0b
    1624:	7c 85       	ldd	r23, Y+12	; 0x0c
    1626:	8d 85       	ldd	r24, Y+13	; 0x0d
    1628:	9e 85       	ldd	r25, Y+14	; 0x0e
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e2       	ldi	r20, 0x20	; 32
    1630:	51 e4       	ldi	r21, 0x41	; 65
    1632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	0f c0       	rjmp	.+30     	; 0x166a <LCD_Init+0x150>
    164c:	80 e9       	ldi	r24, 0x90	; 144
    164e:	91 e0       	ldi	r25, 0x01	; 1
    1650:	9c 83       	std	Y+4, r25	; 0x04
    1652:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <LCD_Init+0x13e>
    165c:	9c 83       	std	Y+4, r25	; 0x04
    165e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1660:	8d 81       	ldd	r24, Y+5	; 0x05
    1662:	9e 81       	ldd	r25, Y+6	; 0x06
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	9e 83       	std	Y+6, r25	; 0x06
    1668:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	69 f7       	brne	.-38     	; 0x164c <LCD_Init+0x132>
    1672:	14 c0       	rjmp	.+40     	; 0x169c <LCD_Init+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1674:	6f 81       	ldd	r22, Y+7	; 0x07
    1676:	78 85       	ldd	r23, Y+8	; 0x08
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9e 83       	std	Y+6, r25	; 0x06
    1686:	8d 83       	std	Y+5, r24	; 0x05
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	9a 83       	std	Y+2, r25	; 0x02
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <LCD_Init+0x17a>
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    169c:	2e 96       	adiw	r28, 0x0e	; 14
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Command) {
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	6d 97       	sbiw	r28, 0x1d	; 29
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	8d 8f       	std	Y+29, r24	; 0x1d

	PORTA = Command;
    16c4:	eb e3       	ldi	r30, 0x3B	; 59
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ca:	80 83       	st	Z, r24
	Dio_SetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,LOW);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
	Dio_SetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN, HIGH);
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a0 e0       	ldi	r26, 0x00	; 0
    16e6:	b0 e4       	ldi	r27, 0x40	; 64
    16e8:	89 8f       	std	Y+25, r24	; 0x19
    16ea:	9a 8f       	std	Y+26, r25	; 0x1a
    16ec:	ab 8f       	std	Y+27, r26	; 0x1b
    16ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f0:	69 8d       	ldd	r22, Y+25	; 0x19
    16f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a e7       	ldi	r20, 0x7A	; 122
    16fe:	55 e4       	ldi	r21, 0x45	; 69
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	8d 8b       	std	Y+21, r24	; 0x15
    170a:	9e 8b       	std	Y+22, r25	; 0x16
    170c:	af 8b       	std	Y+23, r26	; 0x17
    170e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1710:	6d 89       	ldd	r22, Y+21	; 0x15
    1712:	7e 89       	ldd	r23, Y+22	; 0x16
    1714:	8f 89       	ldd	r24, Y+23	; 0x17
    1716:	98 8d       	ldd	r25, Y+24	; 0x18
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e8       	ldi	r20, 0x80	; 128
    171e:	5f e3       	ldi	r21, 0x3F	; 63
    1720:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1724:	88 23       	and	r24, r24
    1726:	2c f4       	brge	.+10     	; 0x1732 <LCD_WriteCommand+0x84>
		__ticks = 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9c 8b       	std	Y+20, r25	; 0x14
    172e:	8b 8b       	std	Y+19, r24	; 0x13
    1730:	3f c0       	rjmp	.+126    	; 0x17b0 <LCD_WriteCommand+0x102>
	else if (__tmp > 65535)
    1732:	6d 89       	ldd	r22, Y+21	; 0x15
    1734:	7e 89       	ldd	r23, Y+22	; 0x16
    1736:	8f 89       	ldd	r24, Y+23	; 0x17
    1738:	98 8d       	ldd	r25, Y+24	; 0x18
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	3f ef       	ldi	r19, 0xFF	; 255
    173e:	4f e7       	ldi	r20, 0x7F	; 127
    1740:	57 e4       	ldi	r21, 0x47	; 71
    1742:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1746:	18 16       	cp	r1, r24
    1748:	4c f5       	brge	.+82     	; 0x179c <LCD_WriteCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174a:	69 8d       	ldd	r22, Y+25	; 0x19
    174c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    174e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1750:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e2       	ldi	r20, 0x20	; 32
    1758:	51 e4       	ldi	r21, 0x41	; 65
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9c 8b       	std	Y+20, r25	; 0x14
    1770:	8b 8b       	std	Y+19, r24	; 0x13
    1772:	0f c0       	rjmp	.+30     	; 0x1792 <LCD_WriteCommand+0xe4>
    1774:	80 e9       	ldi	r24, 0x90	; 144
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	9a 8b       	std	Y+18, r25	; 0x12
    177a:	89 8b       	std	Y+17, r24	; 0x11
    177c:	89 89       	ldd	r24, Y+17	; 0x11
    177e:	9a 89       	ldd	r25, Y+18	; 0x12
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <LCD_WriteCommand+0xd2>
    1784:	9a 8b       	std	Y+18, r25	; 0x12
    1786:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1788:	8b 89       	ldd	r24, Y+19	; 0x13
    178a:	9c 89       	ldd	r25, Y+20	; 0x14
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	9c 8b       	std	Y+20, r25	; 0x14
    1790:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1792:	8b 89       	ldd	r24, Y+19	; 0x13
    1794:	9c 89       	ldd	r25, Y+20	; 0x14
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	69 f7       	brne	.-38     	; 0x1774 <LCD_WriteCommand+0xc6>
    179a:	14 c0       	rjmp	.+40     	; 0x17c4 <LCD_WriteCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179c:	6d 89       	ldd	r22, Y+21	; 0x15
    179e:	7e 89       	ldd	r23, Y+22	; 0x16
    17a0:	8f 89       	ldd	r24, Y+23	; 0x17
    17a2:	98 8d       	ldd	r25, Y+24	; 0x18
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9c 8b       	std	Y+20, r25	; 0x14
    17ae:	8b 8b       	std	Y+19, r24	; 0x13
    17b0:	8b 89       	ldd	r24, Y+19	; 0x13
    17b2:	9c 89       	ldd	r25, Y+20	; 0x14
    17b4:	98 8b       	std	Y+16, r25	; 0x10
    17b6:	8f 87       	std	Y+15, r24	; 0x0f
    17b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ba:	98 89       	ldd	r25, Y+16	; 0x10
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <LCD_WriteCommand+0x10e>
    17c0:	98 8b       	std	Y+16, r25	; 0x10
    17c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_SetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN, LOW);
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	b0 e4       	ldi	r27, 0x40	; 64
    17d6:	8b 87       	std	Y+11, r24	; 0x0b
    17d8:	9c 87       	std	Y+12, r25	; 0x0c
    17da:	ad 87       	std	Y+13, r26	; 0x0d
    17dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17de:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a e7       	ldi	r20, 0x7A	; 122
    17ec:	55 e4       	ldi	r21, 0x45	; 69
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8f 83       	std	Y+7, r24	; 0x07
    17f8:	98 87       	std	Y+8, r25	; 0x08
    17fa:	a9 87       	std	Y+9, r26	; 0x09
    17fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1812:	88 23       	and	r24, r24
    1814:	2c f4       	brge	.+10     	; 0x1820 <LCD_WriteCommand+0x172>
		__ticks = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	3f c0       	rjmp	.+126    	; 0x189e <LCD_WriteCommand+0x1f0>
	else if (__tmp > 65535)
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    182c:	4f e7       	ldi	r20, 0x7F	; 127
    182e:	57 e4       	ldi	r21, 0x47	; 71
    1830:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1834:	18 16       	cp	r1, r24
    1836:	4c f5       	brge	.+82     	; 0x188a <LCD_WriteCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	6b 85       	ldd	r22, Y+11	; 0x0b
    183a:	7c 85       	ldd	r23, Y+12	; 0x0c
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <LCD_WriteCommand+0x1d2>
    1862:	80 e9       	ldi	r24, 0x90	; 144
    1864:	91 e0       	ldi	r25, 0x01	; 1
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	8b 83       	std	Y+3, r24	; 0x03
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_WriteCommand+0x1c0>
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	69 f7       	brne	.-38     	; 0x1862 <LCD_WriteCommand+0x1b4>
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <LCD_WriteCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	6f 81       	ldd	r22, Y+7	; 0x07
    188c:	78 85       	ldd	r23, Y+8	; 0x08
    188e:	89 85       	ldd	r24, Y+9	; 0x09
    1890:	9a 85       	ldd	r25, Y+10	; 0x0a
    1892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_WriteCommand+0x1fc>
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
	//set enable pin low
	Dio_SetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
	_delay_ms(20);
*/

}
    18b2:	6d 96       	adiw	r28, 0x1d	; 29
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <LCD_WriteChar>:
void LCD_WriteChar(u8 Data) {
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	6d 97       	sbiw	r28, 0x1d	; 29
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	8d 8f       	std	Y+29, r24	; 0x1d
	PORTA = Data;
    18da:	eb e3       	ldi	r30, 0x3B	; 59
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e0:	80 83       	st	Z, r24
	Dio_SetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN, HIGH);
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	41 e0       	ldi	r20, 0x01	; 1
    18e8:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
	Dio_SetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN, HIGH);
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e4       	ldi	r27, 0x40	; 64
    18fe:	89 8f       	std	Y+25, r24	; 0x19
    1900:	9a 8f       	std	Y+26, r25	; 0x1a
    1902:	ab 8f       	std	Y+27, r26	; 0x1b
    1904:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	69 8d       	ldd	r22, Y+25	; 0x19
    1908:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4a e7       	ldi	r20, 0x7A	; 122
    1914:	55 e4       	ldi	r21, 0x45	; 69
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8d 8b       	std	Y+21, r24	; 0x15
    1920:	9e 8b       	std	Y+22, r25	; 0x16
    1922:	af 8b       	std	Y+23, r26	; 0x17
    1924:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1926:	6d 89       	ldd	r22, Y+21	; 0x15
    1928:	7e 89       	ldd	r23, Y+22	; 0x16
    192a:	8f 89       	ldd	r24, Y+23	; 0x17
    192c:	98 8d       	ldd	r25, Y+24	; 0x18
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	2c f4       	brge	.+10     	; 0x1948 <LCD_WriteChar+0x84>
		__ticks = 1;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9c 8b       	std	Y+20, r25	; 0x14
    1944:	8b 8b       	std	Y+19, r24	; 0x13
    1946:	3f c0       	rjmp	.+126    	; 0x19c6 <LCD_WriteChar+0x102>
	else if (__tmp > 65535)
    1948:	6d 89       	ldd	r22, Y+21	; 0x15
    194a:	7e 89       	ldd	r23, Y+22	; 0x16
    194c:	8f 89       	ldd	r24, Y+23	; 0x17
    194e:	98 8d       	ldd	r25, Y+24	; 0x18
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	57 e4       	ldi	r21, 0x47	; 71
    1958:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    195c:	18 16       	cp	r1, r24
    195e:	4c f5       	brge	.+82     	; 0x19b2 <LCD_WriteChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	69 8d       	ldd	r22, Y+25	; 0x19
    1962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e2       	ldi	r20, 0x20	; 32
    196e:	51 e4       	ldi	r21, 0x41	; 65
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9c 8b       	std	Y+20, r25	; 0x14
    1986:	8b 8b       	std	Y+19, r24	; 0x13
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <LCD_WriteChar+0xe4>
    198a:	80 e9       	ldi	r24, 0x90	; 144
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	9a 8b       	std	Y+18, r25	; 0x12
    1990:	89 8b       	std	Y+17, r24	; 0x11
    1992:	89 89       	ldd	r24, Y+17	; 0x11
    1994:	9a 89       	ldd	r25, Y+18	; 0x12
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_WriteChar+0xd2>
    199a:	9a 8b       	std	Y+18, r25	; 0x12
    199c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	8b 89       	ldd	r24, Y+19	; 0x13
    19a0:	9c 89       	ldd	r25, Y+20	; 0x14
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	9c 8b       	std	Y+20, r25	; 0x14
    19a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	8b 89       	ldd	r24, Y+19	; 0x13
    19aa:	9c 89       	ldd	r25, Y+20	; 0x14
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f7       	brne	.-38     	; 0x198a <LCD_WriteChar+0xc6>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <LCD_WriteChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	6d 89       	ldd	r22, Y+21	; 0x15
    19b4:	7e 89       	ldd	r23, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9c 8b       	std	Y+20, r25	; 0x14
    19c4:	8b 8b       	std	Y+19, r24	; 0x13
    19c6:	8b 89       	ldd	r24, Y+19	; 0x13
    19c8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ca:	98 8b       	std	Y+16, r25	; 0x10
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
    19ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d0:	98 89       	ldd	r25, Y+16	; 0x10
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_WriteChar+0x10e>
    19d6:	98 8b       	std	Y+16, r25	; 0x10
    19d8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		Dio_SetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN, LOW);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a0 e0       	ldi	r26, 0x00	; 0
    19ea:	b0 e4       	ldi	r27, 0x40	; 64
    19ec:	8b 87       	std	Y+11, r24	; 0x0b
    19ee:	9c 87       	std	Y+12, r25	; 0x0c
    19f0:	ad 87       	std	Y+13, r26	; 0x0d
    19f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	4a e7       	ldi	r20, 0x7A	; 122
    1a02:	55 e4       	ldi	r21, 0x45	; 69
    1a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	8f 83       	std	Y+7, r24	; 0x07
    1a0e:	98 87       	std	Y+8, r25	; 0x08
    1a10:	a9 87       	std	Y+9, r26	; 0x09
    1a12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a14:	6f 81       	ldd	r22, Y+7	; 0x07
    1a16:	78 85       	ldd	r23, Y+8	; 0x08
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <LCD_WriteChar+0x172>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <LCD_WriteChar+0x1f0>
	else if (__tmp > 65535)
    1a36:	6f 81       	ldd	r22, Y+7	; 0x07
    1a38:	78 85       	ldd	r23, Y+8	; 0x08
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	4c f5       	brge	.+82     	; 0x1aa0 <LCD_WriteChar+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9e 83       	std	Y+6, r25	; 0x06
    1a74:	8d 83       	std	Y+5, r24	; 0x05
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <LCD_WriteChar+0x1d2>
    1a78:	80 e9       	ldi	r24, 0x90	; 144
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <LCD_WriteChar+0x1c0>
    1a88:	9c 83       	std	Y+4, r25	; 0x04
    1a8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <LCD_WriteChar+0x1b4>
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <LCD_WriteChar+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa2:	78 85       	ldd	r23, Y+8	; 0x08
    1aa4:	89 85       	ldd	r24, Y+9	; 0x09
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_WriteChar+0x1fc>
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

	}
    1ac8:	6d 96       	adiw	r28, 0x1d	; 29
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <LCD_WriteString>:
void LCD_WriteString(u8 *Word) {
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <LCD_WriteString+0x6>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	9b 83       	std	Y+3, r25	; 0x03
    1ae8:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    1aea:	19 82       	std	Y+1, r1	; 0x01
    1aec:	0e c0       	rjmp	.+28     	; 0x1b0a <LCD_WriteString+0x30>
	while (Word[index] != '\0') {
		LCD_WriteChar(Word[index]);
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	9b 81       	ldd	r25, Y+3	; 0x03
    1af8:	fc 01       	movw	r30, r24
    1afa:	e2 0f       	add	r30, r18
    1afc:	f3 1f       	adc	r31, r19
    1afe:	80 81       	ld	r24, Z
    1b00:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
		index++;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	8f 5f       	subi	r24, 0xFF	; 255
    1b08:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

	}
void LCD_WriteString(u8 *Word) {
	u8 index = 0;
	while (Word[index] != '\0') {
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	9b 81       	ldd	r25, Y+3	; 0x03
    1b14:	fc 01       	movw	r30, r24
    1b16:	e2 0f       	add	r30, r18
    1b18:	f3 1f       	adc	r31, r19
    1b1a:	80 81       	ld	r24, Z
    1b1c:	88 23       	and	r24, r24
    1b1e:	39 f7       	brne	.-50     	; 0x1aee <LCD_WriteString+0x14>
		LCD_WriteChar(Word[index]);
		index++;
	}
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <LCD_CLEAR_SCREEN>:

void LCD_CLEAR_SCREEN(void) {
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62

	LCD_WriteCommand(CLR_SCREEN);
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_WriteCommand>
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <LCD_MOVE_CURSOR>:

void LCD_MOVE_CURSOR(u8 row, u8 col) {
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <LCD_MOVE_CURSOR+0x6>
    1b46:	0f 92       	push	r0
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	8a 83       	std	Y+2, r24	; 0x02
    1b4e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Location;
	if (row == 1)
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	19 f4       	brne	.+6      	; 0x1b5c <LCD_MOVE_CURSOR+0x1c>
	{
		Location = 0x80;
    1b56:	80 e8       	ldi	r24, 0x80	; 128
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	05 c0       	rjmp	.+10     	; 0x1b66 <LCD_MOVE_CURSOR+0x26>
	}
	else if (row == 2)
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	82 30       	cpi	r24, 0x02	; 2
    1b60:	11 f4       	brne	.+4      	; 0x1b66 <LCD_MOVE_CURSOR+0x26>
	{
		Location = 0xc0;
    1b62:	80 ec       	ldi	r24, 0xC0	; 192
    1b64:	89 83       	std	Y+1, r24	; 0x01
	}
	Location += (col-1);
    1b66:	9b 81       	ldd	r25, Y+3	; 0x03
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	89 0f       	add	r24, r25
    1b6c:	81 50       	subi	r24, 0x01	; 1
    1b6e:	89 83       	std	Y+1, r24	; 0x01

	LCD_WriteCommand(Location);
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_WriteCommand>

	}
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <LED_Init>:

#include "LED.h"
#include "Utilites.h"
void LED_Init(u8 portname,u8 pinnumber)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <LED_Init+0x6>
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	6a 83       	std	Y+2, r22	; 0x02
	Dio_SetPinDirection(portname,pinnumber,OUTPUT);//Set the given pin in the given port as an output
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	6a 81       	ldd	r22, Y+2	; 0x02
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>

}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <LED_TurnOn>:
void LED_TurnOn(u8 portname,u8 pinnumber)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <LED_TurnOn+0x6>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	6a 83       	std	Y+2, r22	; 0x02
	Dio_SetPinValue(portname,pinnumber,HIGH);//Set the given pin in the given port to one(on)
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	6a 81       	ldd	r22, Y+2	; 0x02
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <LED_TurnOff>:
void LED_TurnOff(u8 portname,u8 pinnumber)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <LED_TurnOff+0x6>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	6a 83       	std	Y+2, r22	; 0x02
	Dio_SetPinValue(portname,pinnumber,LOW);//Set the given pin in the given port to zero(off)
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	6a 81       	ldd	r22, Y+2	; 0x02
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <LED_Toggle>:
void LED_Toggle(u8 portname,u8 pinnumber)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <LED_Toggle+0x6>
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	6a 83       	std	Y+2, r22	; 0x02
	Dio_TogglePinValue(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	6a 81       	ldd	r22, Y+2	; 0x02
    1bfa:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Dio_TogglePinValue>
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <LED_ReadStatus>:
u8 LED_ReadStatus(u8 portname,u8 pinnumber)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <LED_ReadStatus+0x6>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	6a 83       	std	Y+2, r22	; 0x02
	return Dio_GetPinValue(portname,pinnumber);//return the current status of the given pin
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	6a 81       	ldd	r22, Y+2	; 0x02
    1c1a:	0e 94 5f 08 	call	0x10be	; 0x10be <Dio_GetPinValue>
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <SPI_INIT_MASTER>:
#include "SPI_INIT.h"
#include "Dio_Int.h"
#include "Dio_Reg.h"
#include "Utilites.h"
#include "Std_Types.h"
void SPI_INIT_MASTER(void) {
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62

	// MOSI, CLK, CS as output

	Dio_SetPinDirection(GroupB, PIN4, OUTPUT); //CS
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	64 e0       	ldi	r22, 0x04	; 4
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB, PIN5, OUTPUT); //MOSI
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	65 e0       	ldi	r22, 0x05	; 5
    1c3e:	41 e0       	ldi	r20, 0x01	; 1
    1c40:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB, PIN7, OUTPUT); //CLK
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	67 e0       	ldi	r22, 0x07	; 7
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>

	Dio_SetPinDirection(GroupB, PIN6, INPUT); // MISO input
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	66 e0       	ldi	r22, 0x06	; 6
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>

	SET_BIT(SPCR, 4); // MASTER
    1c58:	ad e2       	ldi	r26, 0x2D	; 45
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ed e2       	ldi	r30, 0x2D	; 45
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 61       	ori	r24, 0x10	; 16
    1c64:	8c 93       	st	X, r24

	SET_BIT(SPCR,0);
    1c66:	ad e2       	ldi	r26, 0x2D	; 45
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ed e2       	ldi	r30, 0x2D	; 45
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	81 60       	ori	r24, 0x01	; 1
    1c72:	8c 93       	st	X, r24

	SET_BIT(SPCR, 6); //enable SPI
    1c74:	ad e2       	ldi	r26, 0x2D	; 45
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ed e2       	ldi	r30, 0x2D	; 45
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 64       	ori	r24, 0x40	; 64
    1c80:	8c 93       	st	X, r24

	CLR_BIT(SPCR, 3); // raising
    1c82:	ad e2       	ldi	r26, 0x2D	; 45
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	ed e2       	ldi	r30, 0x2D	; 45
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	87 7f       	andi	r24, 0xF7	; 247
    1c8e:	8c 93       	st	X, r24

	DDRB |=(1<<5) |(1<<4)|(1<<7);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
		SPCR |= (1<<6)|(1<<4)|(1<<0);//Enable the SPI,master mode ,Set the clock speed to F/16
*/

}
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <SPI_INIT_SLAVE>:
void SPI_INIT_SLAVE(void) {
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62

	Dio_SetPinDirection(GroupB, PIN6, OUTPUT); // MISO input
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	66 e0       	ldi	r22, 0x06	; 6
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>

	// MOSI, CLK, CS as input
	Dio_SetPinDirection(GroupB, PIN4, INPUT); //CS
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	64 e0       	ldi	r22, 0x04	; 4
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB, PIN5, INPUT); //MOSI
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	65 e0       	ldi	r22, 0x05	; 5
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB, PIN7, INPUT); //CLK
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	67 e0       	ldi	r22, 0x07	; 7
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>


	CLR_BIT(SPCR, 4); // SLAVE
    1cc6:	ad e2       	ldi	r26, 0x2D	; 45
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	ed e2       	ldi	r30, 0x2D	; 45
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	8f 7e       	andi	r24, 0xEF	; 239
    1cd2:	8c 93       	st	X, r24

	SET_BIT(SPCR, 6); //enable SPI
    1cd4:	ad e2       	ldi	r26, 0x2D	; 45
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	ed e2       	ldi	r30, 0x2D	; 45
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	80 64       	ori	r24, 0x40	; 64
    1ce0:	8c 93       	st	X, r24

}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <SPI_SEND_RECEIVE_DATA>:


u8 SPI_SEND_RECEIVE_DATA(u8 data) {
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	0f 92       	push	r0
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	89 83       	std	Y+1, r24	; 0x01


	SPDR = data;
    1cf4:	ef e2       	ldi	r30, 0x2F	; 47
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	80 83       	st	Z, r24
	while (((GET_BIT(SPSR, 7))  == 0));
    1cfc:	ee e2       	ldi	r30, 0x2E	; 46
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	88 23       	and	r24, r24
    1d04:	dc f7       	brge	.-10     	; 0x1cfc <SPI_SEND_RECEIVE_DATA+0x14>

	//while (((SPSR&(1<<7))>>7)==0);	//wait till the transmitting is done
									//SPI flag is set to one if the transmission is done
	return SPDR;
    1d06:	ef e2       	ldi	r30, 0x2F	; 47
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
}
    1d0c:	0f 90       	pop	r0
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <Keypad_Init>:

#include "keypad_driver.h"
#include "Dio_config_Master.h"
#include "avr/delay.h"

void Keypad_Init(void){
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62

	Dio_SetPinDirection(KEYPAD_PORT,KEYPAD_FIRST_PIN,  OUTPUT);
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(KEYPAD_PORT,KEYPAD_SECOND_PIN, OUTPUT);
    1d26:	83 e0       	ldi	r24, 0x03	; 3
    1d28:	61 e0       	ldi	r22, 0x01	; 1
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(KEYPAD_PORT,KEYPAD_THIRD_PIN,  OUTPUT);
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	62 e0       	ldi	r22, 0x02	; 2
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(KEYPAD_PORT,KEYPAD_FOURTH_PIN, OUTPUT);
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	63 e0       	ldi	r22, 0x03	; 3
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>

	Dio_SetPinDirection(KEYPAD_PORT,KEYPAD_FIFTH_PIN,   INPUT);
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	64 e0       	ldi	r22, 0x04	; 4
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(KEYPAD_PORT,KEYPAD_SIXTH_PIN,   INPUT);
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	65 e0       	ldi	r22, 0x05	; 5
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(KEYPAD_PORT,KEYPAD_SEVENTH_PIN, INPUT);
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	66 e0       	ldi	r22, 0x06	; 6
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>
	Dio_SetPinDirection(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,  INPUT);
    1d62:	83 e0       	ldi	r24, 0x03	; 3
    1d64:	67 e0       	ldi	r22, 0x07	; 7
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_SetPinDirection>

	// enable pullup res
	Dio_SetPinValue(KEYPAD_PORT, KEYPAD_FIFTH_PIN,   HIGH);
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	64 e0       	ldi	r22, 0x04	; 4
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
	Dio_SetPinValue(KEYPAD_PORT, KEYPAD_SIXTH_PIN,   HIGH);
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	65 e0       	ldi	r22, 0x05	; 5
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
	Dio_SetPinValue(KEYPAD_PORT, KEYPAD_SEVENTH_PIN, HIGH);
    1d80:	83 e0       	ldi	r24, 0x03	; 3
    1d82:	66 e0       	ldi	r22, 0x06	; 6
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
	Dio_SetPinValue(KEYPAD_PORT, KEYPAD_EIGHTH_PIN , HIGH);
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	67 e0       	ldi	r22, 0x07	; 7
    1d8e:	41 e0       	ldi	r20, 0x01	; 1
    1d90:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>

}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <Keypad_GetPressedKey>:

u8 Keypad_GetPressedKey(void){
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	a7 97       	sbiw	r28, 0x27	; 39
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61

	u8 return_value = NOT_PRESSED;
    1dae:	8f ef       	ldi	r24, 0xFF	; 255
    1db0:	8a 8b       	std	Y+18, r24	; 0x12
	u8 arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
    1db2:	ce 01       	movw	r24, r28
    1db4:	43 96       	adiw	r24, 0x13	; 19
    1db6:	9c a3       	std	Y+36, r25	; 0x24
    1db8:	8b a3       	std	Y+35, r24	; 0x23
    1dba:	e9 e7       	ldi	r30, 0x79	; 121
    1dbc:	f2 e0       	ldi	r31, 0x02	; 2
    1dbe:	fe a3       	std	Y+38, r31	; 0x26
    1dc0:	ed a3       	std	Y+37, r30	; 0x25
    1dc2:	f0 e1       	ldi	r31, 0x10	; 16
    1dc4:	ff a3       	std	Y+39, r31	; 0x27
    1dc6:	ed a1       	ldd	r30, Y+37	; 0x25
    1dc8:	fe a1       	ldd	r31, Y+38	; 0x26
    1dca:	00 80       	ld	r0, Z
    1dcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dce:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	9e a3       	std	Y+38, r25	; 0x26
    1dd4:	8d a3       	std	Y+37, r24	; 0x25
    1dd6:	eb a1       	ldd	r30, Y+35	; 0x23
    1dd8:	fc a1       	ldd	r31, Y+36	; 0x24
    1dda:	00 82       	st	Z, r0
    1ddc:	8b a1       	ldd	r24, Y+35	; 0x23
    1dde:	9c a1       	ldd	r25, Y+36	; 0x24
    1de0:	01 96       	adiw	r24, 0x01	; 1
    1de2:	9c a3       	std	Y+36, r25	; 0x24
    1de4:	8b a3       	std	Y+35, r24	; 0x23
    1de6:	9f a1       	ldd	r25, Y+39	; 0x27
    1de8:	91 50       	subi	r25, 0x01	; 1
    1dea:	9f a3       	std	Y+39, r25	; 0x27
    1dec:	ef a1       	ldd	r30, Y+39	; 0x27
    1dee:	ee 23       	and	r30, r30
    1df0:	51 f7       	brne	.-44     	; 0x1dc6 <Keypad_GetPressedKey+0x2c>
	u8 row,col;
	u8 key_pressed;
	for(row = 0; row < 4; row++){
    1df2:	19 8a       	std	Y+17, r1	; 0x11
    1df4:	b6 c0       	rjmp	.+364    	; 0x1f62 <Keypad_GetPressedKey+0x1c8>
		Dio_SetPinValue(KEYPAD_PORT,KEYPAD_FIRST_PIN, HIGH);
    1df6:	83 e0       	ldi	r24, 0x03	; 3
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
		Dio_SetPinValue(KEYPAD_PORT,KEYPAD_SECOND_PIN,HIGH);
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	61 e0       	ldi	r22, 0x01	; 1
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
		Dio_SetPinValue(KEYPAD_PORT,KEYPAD_THIRD_PIN, HIGH);
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
		Dio_SetPinValue(KEYPAD_PORT,KEYPAD_FOURTH_PIN,HIGH);
    1e14:	83 e0       	ldi	r24, 0x03	; 3
    1e16:	63 e0       	ldi	r22, 0x03	; 3
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	a0 ea       	ldi	r26, 0xA0	; 160
    1e24:	b1 e4       	ldi	r27, 0x41	; 65
    1e26:	8b 87       	std	Y+11, r24	; 0x0b
    1e28:	9c 87       	std	Y+12, r25	; 0x0c
    1e2a:	ad 87       	std	Y+13, r26	; 0x0d
    1e2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	4a e7       	ldi	r20, 0x7A	; 122
    1e3c:	55 e4       	ldi	r21, 0x45	; 69
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	8f 83       	std	Y+7, r24	; 0x07
    1e48:	98 87       	std	Y+8, r25	; 0x08
    1e4a:	a9 87       	std	Y+9, r26	; 0x09
    1e4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e50:	78 85       	ldd	r23, Y+8	; 0x08
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e8       	ldi	r20, 0x80	; 128
    1e5c:	5f e3       	ldi	r21, 0x3F	; 63
    1e5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	2c f4       	brge	.+10     	; 0x1e70 <Keypad_GetPressedKey+0xd6>
		__ticks = 1;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
    1e6e:	3f c0       	rjmp	.+126    	; 0x1eee <Keypad_GetPressedKey+0x154>
	else if (__tmp > 65535)
    1e70:	6f 81       	ldd	r22, Y+7	; 0x07
    1e72:	78 85       	ldd	r23, Y+8	; 0x08
    1e74:	89 85       	ldd	r24, Y+9	; 0x09
    1e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	3f ef       	ldi	r19, 0xFF	; 255
    1e7c:	4f e7       	ldi	r20, 0x7F	; 127
    1e7e:	57 e4       	ldi	r21, 0x47	; 71
    1e80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e84:	18 16       	cp	r1, r24
    1e86:	4c f5       	brge	.+82     	; 0x1eda <Keypad_GetPressedKey+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e2       	ldi	r20, 0x20	; 32
    1e96:	51 e4       	ldi	r21, 0x41	; 65
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	0f c0       	rjmp	.+30     	; 0x1ed0 <Keypad_GetPressedKey+0x136>
    1eb2:	80 e9       	ldi	r24, 0x90	; 144
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	8b 83       	std	Y+3, r24	; 0x03
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <Keypad_GetPressedKey+0x124>
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	69 f7       	brne	.-38     	; 0x1eb2 <Keypad_GetPressedKey+0x118>
    1ed8:	14 c0       	rjmp	.+40     	; 0x1f02 <Keypad_GetPressedKey+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eda:	6f 81       	ldd	r22, Y+7	; 0x07
    1edc:	78 85       	ldd	r23, Y+8	; 0x08
    1ede:	89 85       	ldd	r24, Y+9	; 0x09
    1ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <Keypad_GetPressedKey+0x160>
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms (20);
		Dio_SetPinValue(KEYPAD_PORT, row, LOW);
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	69 89       	ldd	r22, Y+17	; 0x11
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_SetPinValue>

		for (col = 0; col<4 ;col++)
    1f0c:	18 8a       	std	Y+16, r1	; 0x10
    1f0e:	23 c0       	rjmp	.+70     	; 0x1f56 <Keypad_GetPressedKey+0x1bc>
		{
			key_pressed = Dio_GetPinValue(KEYPAD_PORT, (col+4));
    1f10:	88 89       	ldd	r24, Y+16	; 0x10
    1f12:	98 2f       	mov	r25, r24
    1f14:	9c 5f       	subi	r25, 0xFC	; 252
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	69 2f       	mov	r22, r25
    1f1a:	0e 94 5f 08 	call	0x10be	; 0x10be <Dio_GetPinValue>
    1f1e:	8f 87       	std	Y+15, r24	; 0x0f

			if (key_pressed == 0)
    1f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f22:	88 23       	and	r24, r24
    1f24:	a9 f4       	brne	.+42     	; 0x1f50 <Keypad_GetPressedKey+0x1b6>
			{
				return_value = arr[row][col];
    1f26:	89 89       	ldd	r24, Y+17	; 0x11
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	88 89       	ldd	r24, Y+16	; 0x10
    1f2e:	48 2f       	mov	r20, r24
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	22 0f       	add	r18, r18
    1f34:	33 1f       	adc	r19, r19
    1f36:	22 0f       	add	r18, r18
    1f38:	33 1f       	adc	r19, r19
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	01 96       	adiw	r24, 0x01	; 1
    1f3e:	82 0f       	add	r24, r18
    1f40:	93 1f       	adc	r25, r19
    1f42:	84 0f       	add	r24, r20
    1f44:	95 1f       	adc	r25, r21
    1f46:	fc 01       	movw	r30, r24
    1f48:	72 96       	adiw	r30, 0x12	; 18
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8a 8b       	std	Y+18, r24	; 0x12
    1f4e:	06 c0       	rjmp	.+12     	; 0x1f5c <Keypad_GetPressedKey+0x1c2>
		Dio_SetPinValue(KEYPAD_PORT,KEYPAD_FOURTH_PIN,HIGH);

		_delay_ms (20);
		Dio_SetPinValue(KEYPAD_PORT, row, LOW);

		for (col = 0; col<4 ;col++)
    1f50:	88 89       	ldd	r24, Y+16	; 0x10
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	88 8b       	std	Y+16, r24	; 0x10
    1f56:	88 89       	ldd	r24, Y+16	; 0x10
    1f58:	84 30       	cpi	r24, 0x04	; 4
    1f5a:	d0 f2       	brcs	.-76     	; 0x1f10 <Keypad_GetPressedKey+0x176>

	u8 return_value = NOT_PRESSED;
	u8 arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	u8 row,col;
	u8 key_pressed;
	for(row = 0; row < 4; row++){
    1f5c:	89 89       	ldd	r24, Y+17	; 0x11
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	89 8b       	std	Y+17, r24	; 0x11
    1f62:	89 89       	ldd	r24, Y+17	; 0x11
    1f64:	84 30       	cpi	r24, 0x04	; 4
    1f66:	08 f4       	brcc	.+2      	; 0x1f6a <Keypad_GetPressedKey+0x1d0>
    1f68:	46 cf       	rjmp	.-372    	; 0x1df6 <Keypad_GetPressedKey+0x5c>
				return_value = arr[row][col];
				break;
			}
		}
	}
	return return_value;
    1f6a:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1f6c:	a7 96       	adiw	r28, 0x27	; 39
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <main>:

volatile u16 session_counter = 0;
u8 timeout_flag = FALSE;

int main (void)
{
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	c6 5f       	subi	r28, 0xF6	; 246
    1f8c:	d1 40       	sbci	r29, 0x01	; 1
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61

	u8 temperatue = 0;
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ea 51       	subi	r30, 0x1A	; 26
    1f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9e:	10 82       	st	Z, r1
	u8 temp_ones = NOT_SELECTED;
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	eb 51       	subi	r30, 0x1B	; 27
    1fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa6:	8f ef       	ldi	r24, 0xFF	; 255
    1fa8:	80 83       	st	Z, r24
	u8 temp_tens = NOT_SELECTED;
    1faa:	fe 01       	movw	r30, r28
    1fac:	ec 51       	subi	r30, 0x1C	; 28
    1fae:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	80 83       	st	Z, r24


	u8 login_mode = NO_MODE;
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ed 51       	subi	r30, 0x1D	; 29
    1fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fba:	10 82       	st	Z, r1
	u8 block_mode_flag = FALSE;
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ee 51       	subi	r30, 0x1E	; 30
    1fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc2:	10 82       	st	Z, r1
	u8 key_pressed = NOT_PRESSED;
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ef 51       	subi	r30, 0x1F	; 31
    1fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fca:	8f ef       	ldi	r24, 0xFF	; 255
    1fcc:	80 83       	st	Z, r24

	LED_Init(ADMIN_LED_PORT, ADMIN_LED_PIN);
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	65 e0       	ldi	r22, 0x05	; 5
    1fd2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LED_Init>
	LED_Init(GUEST_LED_PORT, GUEST_LED_PIN);
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	66 e0       	ldi	r22, 0x06	; 6
    1fda:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LED_Init>
	LED_Init(BLOCK_LED_PORT, BLOCK_LED_PIN);
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	67 e0       	ldi	r22, 0x07	; 7
    1fe2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LED_Init>

	LCD_Init();
    1fe6:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Init>

	Keypad_Init();
    1fea:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Keypad_Init>

	SPI_INIT_MASTER();
    1fee:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_INIT_MASTER>

	LCD_WriteString("Welcome to smart");
    1ff2:	80 e6       	ldi	r24, 0x60	; 96
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
	LCD_MOVE_CURSOR(2,1);
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	61 e0       	ldi	r22, 0x01	; 1
    1ffe:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
	LCD_WriteString("home system");
    2002:	81 e7       	ldi	r24, 0x71	; 113
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    200a:	fe 01       	movw	r30, r28
    200c:	e7 52       	subi	r30, 0x27	; 39
    200e:	fe 4f       	sbci	r31, 0xFE	; 254
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	aa e7       	ldi	r26, 0x7A	; 122
    2016:	b4 e4       	ldi	r27, 0x44	; 68
    2018:	80 83       	st	Z, r24
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	a2 83       	std	Z+2, r26	; 0x02
    201e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	8e 01       	movw	r16, r28
    2022:	0b 52       	subi	r16, 0x2B	; 43
    2024:	1e 4f       	sbci	r17, 0xFE	; 254
    2026:	fe 01       	movw	r30, r28
    2028:	e7 52       	subi	r30, 0x27	; 39
    202a:	fe 4f       	sbci	r31, 0xFE	; 254
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	4a e7       	ldi	r20, 0x7A	; 122
    203a:	55 e4       	ldi	r21, 0x45	; 69
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	f8 01       	movw	r30, r16
    2046:	80 83       	st	Z, r24
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	a2 83       	std	Z+2, r26	; 0x02
    204c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    204e:	fe 01       	movw	r30, r28
    2050:	eb 52       	subi	r30, 0x2B	; 43
    2052:	fe 4f       	sbci	r31, 0xFE	; 254
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	93 81       	ldd	r25, Z+3	; 0x03
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	44 f4       	brge	.+16     	; 0x207c <main+0xfe>
		__ticks = 1;
    206c:	fe 01       	movw	r30, r28
    206e:	ed 52       	subi	r30, 0x2D	; 45
    2070:	fe 4f       	sbci	r31, 0xFE	; 254
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
    207a:	64 c0       	rjmp	.+200    	; 0x2144 <main+0x1c6>
	else if (__tmp > 65535)
    207c:	fe 01       	movw	r30, r28
    207e:	eb 52       	subi	r30, 0x2B	; 43
    2080:	fe 4f       	sbci	r31, 0xFE	; 254
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	3f ef       	ldi	r19, 0xFF	; 255
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	57 e4       	ldi	r21, 0x47	; 71
    2092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	0c f0       	brlt	.+2      	; 0x209c <main+0x11e>
    209a:	43 c0       	rjmp	.+134    	; 0x2122 <main+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209c:	fe 01       	movw	r30, r28
    209e:	e7 52       	subi	r30, 0x27	; 39
    20a0:	fe 4f       	sbci	r31, 0xFE	; 254
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8e 01       	movw	r16, r28
    20bc:	0d 52       	subi	r16, 0x2D	; 45
    20be:	1e 4f       	sbci	r17, 0xFE	; 254
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	f8 01       	movw	r30, r16
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24
    20d2:	1f c0       	rjmp	.+62     	; 0x2112 <main+0x194>
    20d4:	fe 01       	movw	r30, r28
    20d6:	ef 52       	subi	r30, 0x2F	; 47
    20d8:	fe 4f       	sbci	r31, 0xFE	; 254
    20da:	80 e9       	ldi	r24, 0x90	; 144
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
    20e2:	fe 01       	movw	r30, r28
    20e4:	ef 52       	subi	r30, 0x2F	; 47
    20e6:	fe 4f       	sbci	r31, 0xFE	; 254
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <main+0x16e>
    20f0:	fe 01       	movw	r30, r28
    20f2:	ef 52       	subi	r30, 0x2F	; 47
    20f4:	fe 4f       	sbci	r31, 0xFE	; 254
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	de 01       	movw	r26, r28
    20fc:	ad 52       	subi	r26, 0x2D	; 45
    20fe:	be 4f       	sbci	r27, 0xFE	; 254
    2100:	fe 01       	movw	r30, r28
    2102:	ed 52       	subi	r30, 0x2D	; 45
    2104:	fe 4f       	sbci	r31, 0xFE	; 254
    2106:	80 81       	ld	r24, Z
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	11 96       	adiw	r26, 0x01	; 1
    210e:	9c 93       	st	X, r25
    2110:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2112:	fe 01       	movw	r30, r28
    2114:	ed 52       	subi	r30, 0x2D	; 45
    2116:	fe 4f       	sbci	r31, 0xFE	; 254
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	d1 f6       	brne	.-76     	; 0x20d4 <main+0x156>
    2120:	27 c0       	rjmp	.+78     	; 0x2170 <main+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2122:	8e 01       	movw	r16, r28
    2124:	0d 52       	subi	r16, 0x2D	; 45
    2126:	1e 4f       	sbci	r17, 0xFE	; 254
    2128:	fe 01       	movw	r30, r28
    212a:	eb 52       	subi	r30, 0x2B	; 43
    212c:	fe 4f       	sbci	r31, 0xFE	; 254
    212e:	60 81       	ld	r22, Z
    2130:	71 81       	ldd	r23, Z+1	; 0x01
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	93 81       	ldd	r25, Z+3	; 0x03
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	f8 01       	movw	r30, r16
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
    2144:	de 01       	movw	r26, r28
    2146:	a1 53       	subi	r26, 0x31	; 49
    2148:	be 4f       	sbci	r27, 0xFE	; 254
    214a:	fe 01       	movw	r30, r28
    214c:	ed 52       	subi	r30, 0x2D	; 45
    214e:	fe 4f       	sbci	r31, 0xFE	; 254
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	8d 93       	st	X+, r24
    2156:	9c 93       	st	X, r25
    2158:	fe 01       	movw	r30, r28
    215a:	e1 53       	subi	r30, 0x31	; 49
    215c:	fe 4f       	sbci	r31, 0xFE	; 254
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <main+0x1e4>
    2166:	fe 01       	movw	r30, r28
    2168:	e1 53       	subi	r30, 0x31	; 49
    216a:	fe 4f       	sbci	r31, 0xFE	; 254
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	80 83       	st	Z, r24
	_delay_ms(1000);
	LCD_CLEAR_SCREEN();
    2170:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>

	if ((EEPROM_ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS) != PASS_SET)
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	0e 94 69 09 	call	0x12d2	; 0x12d2 <EEPROM_ReadByteFromAddress>
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	39 f4       	brne	.+14     	; 0x218e <main+0x210>
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	91 e0       	ldi	r25, 0x01	; 1
    2184:	0e 94 69 09 	call	0x12d2	; 0x12d2 <EEPROM_ReadByteFromAddress>
    2188:	81 30       	cpi	r24, 0x01	; 1
    218a:	09 f4       	brne	.+2      	; 0x218e <main+0x210>
    218c:	e4 c5       	rjmp	.+3016   	; 0x2d56 <main+0xdd8>
		|| (EEPROM_ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS) != PASS_SET))
	{
		LCD_WriteString("login for");
    218e:	8d e7       	ldi	r24, 0x7D	; 125
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
		LCD_MOVE_CURSOR(2,1);
    2196:	82 e0       	ldi	r24, 0x02	; 2
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
		LCD_WriteString("first time ");
    219e:	87 e8       	ldi	r24, 0x87	; 135
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    21a6:	fe 01       	movw	r30, r28
    21a8:	e5 53       	subi	r30, 0x35	; 53
    21aa:	fe 4f       	sbci	r31, 0xFE	; 254
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	aa e7       	ldi	r26, 0x7A	; 122
    21b2:	b4 e4       	ldi	r27, 0x44	; 68
    21b4:	80 83       	st	Z, r24
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	a2 83       	std	Z+2, r26	; 0x02
    21ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21bc:	8e 01       	movw	r16, r28
    21be:	09 53       	subi	r16, 0x39	; 57
    21c0:	1e 4f       	sbci	r17, 0xFE	; 254
    21c2:	fe 01       	movw	r30, r28
    21c4:	e5 53       	subi	r30, 0x35	; 53
    21c6:	fe 4f       	sbci	r31, 0xFE	; 254
    21c8:	60 81       	ld	r22, Z
    21ca:	71 81       	ldd	r23, Z+1	; 0x01
    21cc:	82 81       	ldd	r24, Z+2	; 0x02
    21ce:	93 81       	ldd	r25, Z+3	; 0x03
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a e7       	ldi	r20, 0x7A	; 122
    21d6:	55 e4       	ldi	r21, 0x45	; 69
    21d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	f8 01       	movw	r30, r16
    21e2:	80 83       	st	Z, r24
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	a2 83       	std	Z+2, r26	; 0x02
    21e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ea:	fe 01       	movw	r30, r28
    21ec:	e9 53       	subi	r30, 0x39	; 57
    21ee:	fe 4f       	sbci	r31, 0xFE	; 254
    21f0:	60 81       	ld	r22, Z
    21f2:	71 81       	ldd	r23, Z+1	; 0x01
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e8       	ldi	r20, 0x80	; 128
    21fe:	5f e3       	ldi	r21, 0x3F	; 63
    2200:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2204:	88 23       	and	r24, r24
    2206:	44 f4       	brge	.+16     	; 0x2218 <main+0x29a>
		__ticks = 1;
    2208:	fe 01       	movw	r30, r28
    220a:	eb 53       	subi	r30, 0x3B	; 59
    220c:	fe 4f       	sbci	r31, 0xFE	; 254
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	80 83       	st	Z, r24
    2216:	64 c0       	rjmp	.+200    	; 0x22e0 <main+0x362>
	else if (__tmp > 65535)
    2218:	fe 01       	movw	r30, r28
    221a:	e9 53       	subi	r30, 0x39	; 57
    221c:	fe 4f       	sbci	r31, 0xFE	; 254
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	0c f0       	brlt	.+2      	; 0x2238 <main+0x2ba>
    2236:	43 c0       	rjmp	.+134    	; 0x22be <main+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2238:	fe 01       	movw	r30, r28
    223a:	e5 53       	subi	r30, 0x35	; 53
    223c:	fe 4f       	sbci	r31, 0xFE	; 254
    223e:	60 81       	ld	r22, Z
    2240:	71 81       	ldd	r23, Z+1	; 0x01
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	93 81       	ldd	r25, Z+3	; 0x03
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e2       	ldi	r20, 0x20	; 32
    224c:	51 e4       	ldi	r21, 0x41	; 65
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	8e 01       	movw	r16, r28
    2258:	0b 53       	subi	r16, 0x3B	; 59
    225a:	1e 4f       	sbci	r17, 0xFE	; 254
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	f8 01       	movw	r30, r16
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
    226e:	1f c0       	rjmp	.+62     	; 0x22ae <main+0x330>
    2270:	fe 01       	movw	r30, r28
    2272:	ed 53       	subi	r30, 0x3D	; 61
    2274:	fe 4f       	sbci	r31, 0xFE	; 254
    2276:	80 e9       	ldi	r24, 0x90	; 144
    2278:	91 e0       	ldi	r25, 0x01	; 1
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	80 83       	st	Z, r24
    227e:	fe 01       	movw	r30, r28
    2280:	ed 53       	subi	r30, 0x3D	; 61
    2282:	fe 4f       	sbci	r31, 0xFE	; 254
    2284:	80 81       	ld	r24, Z
    2286:	91 81       	ldd	r25, Z+1	; 0x01
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <main+0x30a>
    228c:	fe 01       	movw	r30, r28
    228e:	ed 53       	subi	r30, 0x3D	; 61
    2290:	fe 4f       	sbci	r31, 0xFE	; 254
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2296:	de 01       	movw	r26, r28
    2298:	ab 53       	subi	r26, 0x3B	; 59
    229a:	be 4f       	sbci	r27, 0xFE	; 254
    229c:	fe 01       	movw	r30, r28
    229e:	eb 53       	subi	r30, 0x3B	; 59
    22a0:	fe 4f       	sbci	r31, 0xFE	; 254
    22a2:	80 81       	ld	r24, Z
    22a4:	91 81       	ldd	r25, Z+1	; 0x01
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	11 96       	adiw	r26, 0x01	; 1
    22aa:	9c 93       	st	X, r25
    22ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ae:	fe 01       	movw	r30, r28
    22b0:	eb 53       	subi	r30, 0x3B	; 59
    22b2:	fe 4f       	sbci	r31, 0xFE	; 254
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	d1 f6       	brne	.-76     	; 0x2270 <main+0x2f2>
    22bc:	27 c0       	rjmp	.+78     	; 0x230c <main+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22be:	8e 01       	movw	r16, r28
    22c0:	0b 53       	subi	r16, 0x3B	; 59
    22c2:	1e 4f       	sbci	r17, 0xFE	; 254
    22c4:	fe 01       	movw	r30, r28
    22c6:	e9 53       	subi	r30, 0x39	; 57
    22c8:	fe 4f       	sbci	r31, 0xFE	; 254
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	f8 01       	movw	r30, r16
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	de 01       	movw	r26, r28
    22e2:	af 53       	subi	r26, 0x3F	; 63
    22e4:	be 4f       	sbci	r27, 0xFE	; 254
    22e6:	fe 01       	movw	r30, r28
    22e8:	eb 53       	subi	r30, 0x3B	; 59
    22ea:	fe 4f       	sbci	r31, 0xFE	; 254
    22ec:	80 81       	ld	r24, Z
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	8d 93       	st	X+, r24
    22f2:	9c 93       	st	X, r25
    22f4:	fe 01       	movw	r30, r28
    22f6:	ef 53       	subi	r30, 0x3F	; 63
    22f8:	fe 4f       	sbci	r31, 0xFE	; 254
    22fa:	80 81       	ld	r24, Z
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <main+0x380>
    2302:	fe 01       	movw	r30, r28
    2304:	ef 53       	subi	r30, 0x3F	; 63
    2306:	fe 4f       	sbci	r31, 0xFE	; 254
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	80 83       	st	Z, r24
		_delay_ms(1000);
		LCD_CLEAR_SCREEN();
    230c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
		LCD_WriteString("set admin pass ");
    2310:	83 e9       	ldi	r24, 0x93	; 147
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
		LCD_MOVE_CURSOR(2,1);
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
		LCD_WriteString("admin pass:");
    2320:	83 ea       	ldi	r24, 0xA3	; 163
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>

		u8 pass_counter = 0;
    2328:	fe 01       	movw	r30, r28
    232a:	e0 52       	subi	r30, 0x20	; 32
    232c:	fe 4f       	sbci	r31, 0xFE	; 254
    232e:	10 82       	st	Z, r1
		u8 pass[PASS_SIZE] = {NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
    2330:	fe 01       	movw	r30, r28
    2332:	e9 51       	subi	r30, 0x19	; 25
    2334:	fe 4f       	sbci	r31, 0xFE	; 254
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	80 83       	st	Z, r24
    233a:	fe 01       	movw	r30, r28
    233c:	e9 51       	subi	r30, 0x19	; 25
    233e:	fe 4f       	sbci	r31, 0xFE	; 254
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	81 83       	std	Z+1, r24	; 0x01
    2344:	fe 01       	movw	r30, r28
    2346:	e9 51       	subi	r30, 0x19	; 25
    2348:	fe 4f       	sbci	r31, 0xFE	; 254
    234a:	8f ef       	ldi	r24, 0xFF	; 255
    234c:	82 83       	std	Z+2, r24	; 0x02
    234e:	fe 01       	movw	r30, r28
    2350:	e9 51       	subi	r30, 0x19	; 25
    2352:	fe 4f       	sbci	r31, 0xFE	; 254
    2354:	8f ef       	ldi	r24, 0xFF	; 255
    2356:	83 83       	std	Z+3, r24	; 0x03
    2358:	a5 c1       	rjmp	.+842    	; 0x26a4 <main+0x726>
		while(pass_counter <PASS_SIZE)
		{
			key_pressed =NOT_PRESSED;
    235a:	fe 01       	movw	r30, r28
    235c:	ef 51       	subi	r30, 0x1F	; 31
    235e:	fe 4f       	sbci	r31, 0xFE	; 254
    2360:	8f ef       	ldi	r24, 0xFF	; 255
    2362:	80 83       	st	Z, r24
    2364:	06 c0       	rjmp	.+12     	; 0x2372 <main+0x3f4>
			while (key_pressed == NOT_PRESSED)
			{
				key_pressed = Keypad_GetPressedKey();
    2366:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <Keypad_GetPressedKey>
    236a:	fe 01       	movw	r30, r28
    236c:	ef 51       	subi	r30, 0x1F	; 31
    236e:	fe 4f       	sbci	r31, 0xFE	; 254
    2370:	80 83       	st	Z, r24
		u8 pass_counter = 0;
		u8 pass[PASS_SIZE] = {NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
		while(pass_counter <PASS_SIZE)
		{
			key_pressed =NOT_PRESSED;
			while (key_pressed == NOT_PRESSED)
    2372:	fe 01       	movw	r30, r28
    2374:	ef 51       	subi	r30, 0x1F	; 31
    2376:	fe 4f       	sbci	r31, 0xFE	; 254
    2378:	80 81       	ld	r24, Z
    237a:	8f 3f       	cpi	r24, 0xFF	; 255
    237c:	a1 f3       	breq	.-24     	; 0x2366 <main+0x3e8>
			{
				key_pressed = Keypad_GetPressedKey();
			}
			pass[pass_counter] = key_pressed;
    237e:	fe 01       	movw	r30, r28
    2380:	e0 52       	subi	r30, 0x20	; 32
    2382:	fe 4f       	sbci	r31, 0xFE	; 254
    2384:	80 81       	ld	r24, Z
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	ce 01       	movw	r24, r28
    238c:	89 51       	subi	r24, 0x19	; 25
    238e:	9e 4f       	sbci	r25, 0xFE	; 254
    2390:	dc 01       	movw	r26, r24
    2392:	a2 0f       	add	r26, r18
    2394:	b3 1f       	adc	r27, r19
    2396:	fe 01       	movw	r30, r28
    2398:	ef 51       	subi	r30, 0x1F	; 31
    239a:	fe 4f       	sbci	r31, 0xFE	; 254
    239c:	80 81       	ld	r24, Z
    239e:	8c 93       	st	X, r24
			LCD_WriteChar(key_pressed);
    23a0:	fe 01       	movw	r30, r28
    23a2:	ef 51       	subi	r30, 0x1F	; 31
    23a4:	fe 4f       	sbci	r31, 0xFE	; 254
    23a6:	80 81       	ld	r24, Z
    23a8:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
    23ac:	fe 01       	movw	r30, r28
    23ae:	e3 54       	subi	r30, 0x43	; 67
    23b0:	fe 4f       	sbci	r31, 0xFE	; 254
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	a8 e4       	ldi	r26, 0x48	; 72
    23b8:	b3 e4       	ldi	r27, 0x43	; 67
    23ba:	80 83       	st	Z, r24
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	a2 83       	std	Z+2, r26	; 0x02
    23c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c2:	8e 01       	movw	r16, r28
    23c4:	07 54       	subi	r16, 0x47	; 71
    23c6:	1e 4f       	sbci	r17, 0xFE	; 254
    23c8:	fe 01       	movw	r30, r28
    23ca:	e3 54       	subi	r30, 0x43	; 67
    23cc:	fe 4f       	sbci	r31, 0xFE	; 254
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a e7       	ldi	r20, 0x7A	; 122
    23dc:	55 e4       	ldi	r21, 0x45	; 69
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	f8 01       	movw	r30, r16
    23e8:	80 83       	st	Z, r24
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	a2 83       	std	Z+2, r26	; 0x02
    23ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f0:	fe 01       	movw	r30, r28
    23f2:	e7 54       	subi	r30, 0x47	; 71
    23f4:	fe 4f       	sbci	r31, 0xFE	; 254
    23f6:	60 81       	ld	r22, Z
    23f8:	71 81       	ldd	r23, Z+1	; 0x01
    23fa:	82 81       	ldd	r24, Z+2	; 0x02
    23fc:	93 81       	ldd	r25, Z+3	; 0x03
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e8       	ldi	r20, 0x80	; 128
    2404:	5f e3       	ldi	r21, 0x3F	; 63
    2406:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240a:	88 23       	and	r24, r24
    240c:	44 f4       	brge	.+16     	; 0x241e <main+0x4a0>
		__ticks = 1;
    240e:	fe 01       	movw	r30, r28
    2410:	e9 54       	subi	r30, 0x49	; 73
    2412:	fe 4f       	sbci	r31, 0xFE	; 254
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	80 83       	st	Z, r24
    241c:	64 c0       	rjmp	.+200    	; 0x24e6 <main+0x568>
	else if (__tmp > 65535)
    241e:	fe 01       	movw	r30, r28
    2420:	e7 54       	subi	r30, 0x47	; 71
    2422:	fe 4f       	sbci	r31, 0xFE	; 254
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	0c f0       	brlt	.+2      	; 0x243e <main+0x4c0>
    243c:	43 c0       	rjmp	.+134    	; 0x24c4 <main+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243e:	fe 01       	movw	r30, r28
    2440:	e3 54       	subi	r30, 0x43	; 67
    2442:	fe 4f       	sbci	r31, 0xFE	; 254
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	8e 01       	movw	r16, r28
    245e:	09 54       	subi	r16, 0x49	; 73
    2460:	1e 4f       	sbci	r17, 0xFE	; 254
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	f8 01       	movw	r30, r16
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
    2474:	1f c0       	rjmp	.+62     	; 0x24b4 <main+0x536>
    2476:	fe 01       	movw	r30, r28
    2478:	eb 54       	subi	r30, 0x4B	; 75
    247a:	fe 4f       	sbci	r31, 0xFE	; 254
    247c:	80 e9       	ldi	r24, 0x90	; 144
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
    2484:	fe 01       	movw	r30, r28
    2486:	eb 54       	subi	r30, 0x4B	; 75
    2488:	fe 4f       	sbci	r31, 0xFE	; 254
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <main+0x510>
    2492:	fe 01       	movw	r30, r28
    2494:	eb 54       	subi	r30, 0x4B	; 75
    2496:	fe 4f       	sbci	r31, 0xFE	; 254
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	de 01       	movw	r26, r28
    249e:	a9 54       	subi	r26, 0x49	; 73
    24a0:	be 4f       	sbci	r27, 0xFE	; 254
    24a2:	fe 01       	movw	r30, r28
    24a4:	e9 54       	subi	r30, 0x49	; 73
    24a6:	fe 4f       	sbci	r31, 0xFE	; 254
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	11 96       	adiw	r26, 0x01	; 1
    24b0:	9c 93       	st	X, r25
    24b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	fe 01       	movw	r30, r28
    24b6:	e9 54       	subi	r30, 0x49	; 73
    24b8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	d1 f6       	brne	.-76     	; 0x2476 <main+0x4f8>
    24c2:	27 c0       	rjmp	.+78     	; 0x2512 <main+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	8e 01       	movw	r16, r28
    24c6:	09 54       	subi	r16, 0x49	; 73
    24c8:	1e 4f       	sbci	r17, 0xFE	; 254
    24ca:	fe 01       	movw	r30, r28
    24cc:	e7 54       	subi	r30, 0x47	; 71
    24ce:	fe 4f       	sbci	r31, 0xFE	; 254
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	f8 01       	movw	r30, r16
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	de 01       	movw	r26, r28
    24e8:	ad 54       	subi	r26, 0x4D	; 77
    24ea:	be 4f       	sbci	r27, 0xFE	; 254
    24ec:	fe 01       	movw	r30, r28
    24ee:	e9 54       	subi	r30, 0x49	; 73
    24f0:	fe 4f       	sbci	r31, 0xFE	; 254
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	8d 93       	st	X+, r24
    24f8:	9c 93       	st	X, r25
    24fa:	fe 01       	movw	r30, r28
    24fc:	ed 54       	subi	r30, 0x4D	; 77
    24fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2500:	80 81       	ld	r24, Z
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <main+0x586>
    2508:	fe 01       	movw	r30, r28
    250a:	ed 54       	subi	r30, 0x4D	; 77
    250c:	fe 4f       	sbci	r31, 0xFE	; 254
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
			_delay_ms(CHARACTER_PREVIEW_TIME);
			LCD_MOVE_CURSOR(2,12+pass_counter);
    2512:	fe 01       	movw	r30, r28
    2514:	e0 52       	subi	r30, 0x20	; 32
    2516:	fe 4f       	sbci	r31, 0xFE	; 254
    2518:	80 81       	ld	r24, Z
    251a:	98 2f       	mov	r25, r24
    251c:	94 5f       	subi	r25, 0xF4	; 244
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	69 2f       	mov	r22, r25
    2522:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
			LCD_WriteChar(PASSWORD_SYMBOL);
    2526:	8a e2       	ldi	r24, 0x2A	; 42
    2528:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
    252c:	fe 01       	movw	r30, r28
    252e:	e1 55       	subi	r30, 0x51	; 81
    2530:	fe 4f       	sbci	r31, 0xFE	; 254
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	a8 ec       	ldi	r26, 0xC8	; 200
    2538:	b2 e4       	ldi	r27, 0x42	; 66
    253a:	80 83       	st	Z, r24
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	a2 83       	std	Z+2, r26	; 0x02
    2540:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2542:	8e 01       	movw	r16, r28
    2544:	05 55       	subi	r16, 0x55	; 85
    2546:	1e 4f       	sbci	r17, 0xFE	; 254
    2548:	fe 01       	movw	r30, r28
    254a:	e1 55       	subi	r30, 0x51	; 81
    254c:	fe 4f       	sbci	r31, 0xFE	; 254
    254e:	60 81       	ld	r22, Z
    2550:	71 81       	ldd	r23, Z+1	; 0x01
    2552:	82 81       	ldd	r24, Z+2	; 0x02
    2554:	93 81       	ldd	r25, Z+3	; 0x03
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	4a e7       	ldi	r20, 0x7A	; 122
    255c:	55 e4       	ldi	r21, 0x45	; 69
    255e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	f8 01       	movw	r30, r16
    2568:	80 83       	st	Z, r24
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	a2 83       	std	Z+2, r26	; 0x02
    256e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2570:	fe 01       	movw	r30, r28
    2572:	e5 55       	subi	r30, 0x55	; 85
    2574:	fe 4f       	sbci	r31, 0xFE	; 254
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f e3       	ldi	r21, 0x3F	; 63
    2586:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    258a:	88 23       	and	r24, r24
    258c:	44 f4       	brge	.+16     	; 0x259e <main+0x620>
		__ticks = 1;
    258e:	fe 01       	movw	r30, r28
    2590:	e7 55       	subi	r30, 0x57	; 87
    2592:	fe 4f       	sbci	r31, 0xFE	; 254
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	80 83       	st	Z, r24
    259c:	64 c0       	rjmp	.+200    	; 0x2666 <main+0x6e8>
	else if (__tmp > 65535)
    259e:	fe 01       	movw	r30, r28
    25a0:	e5 55       	subi	r30, 0x55	; 85
    25a2:	fe 4f       	sbci	r31, 0xFE	; 254
    25a4:	60 81       	ld	r22, Z
    25a6:	71 81       	ldd	r23, Z+1	; 0x01
    25a8:	82 81       	ldd	r24, Z+2	; 0x02
    25aa:	93 81       	ldd	r25, Z+3	; 0x03
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	3f ef       	ldi	r19, 0xFF	; 255
    25b0:	4f e7       	ldi	r20, 0x7F	; 127
    25b2:	57 e4       	ldi	r21, 0x47	; 71
    25b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b8:	18 16       	cp	r1, r24
    25ba:	0c f0       	brlt	.+2      	; 0x25be <main+0x640>
    25bc:	43 c0       	rjmp	.+134    	; 0x2644 <main+0x6c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25be:	fe 01       	movw	r30, r28
    25c0:	e1 55       	subi	r30, 0x51	; 81
    25c2:	fe 4f       	sbci	r31, 0xFE	; 254
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e2       	ldi	r20, 0x20	; 32
    25d2:	51 e4       	ldi	r21, 0x41	; 65
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8e 01       	movw	r16, r28
    25de:	07 55       	subi	r16, 0x57	; 87
    25e0:	1e 4f       	sbci	r17, 0xFE	; 254
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	f8 01       	movw	r30, r16
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
    25f4:	1f c0       	rjmp	.+62     	; 0x2634 <main+0x6b6>
    25f6:	fe 01       	movw	r30, r28
    25f8:	e9 55       	subi	r30, 0x59	; 89
    25fa:	fe 4f       	sbci	r31, 0xFE	; 254
    25fc:	80 e9       	ldi	r24, 0x90	; 144
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	fe 01       	movw	r30, r28
    2606:	e9 55       	subi	r30, 0x59	; 89
    2608:	fe 4f       	sbci	r31, 0xFE	; 254
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <main+0x690>
    2612:	fe 01       	movw	r30, r28
    2614:	e9 55       	subi	r30, 0x59	; 89
    2616:	fe 4f       	sbci	r31, 0xFE	; 254
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261c:	de 01       	movw	r26, r28
    261e:	a7 55       	subi	r26, 0x57	; 87
    2620:	be 4f       	sbci	r27, 0xFE	; 254
    2622:	fe 01       	movw	r30, r28
    2624:	e7 55       	subi	r30, 0x57	; 87
    2626:	fe 4f       	sbci	r31, 0xFE	; 254
    2628:	80 81       	ld	r24, Z
    262a:	91 81       	ldd	r25, Z+1	; 0x01
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	11 96       	adiw	r26, 0x01	; 1
    2630:	9c 93       	st	X, r25
    2632:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	fe 01       	movw	r30, r28
    2636:	e7 55       	subi	r30, 0x57	; 87
    2638:	fe 4f       	sbci	r31, 0xFE	; 254
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	d1 f6       	brne	.-76     	; 0x25f6 <main+0x678>
    2642:	27 c0       	rjmp	.+78     	; 0x2692 <main+0x714>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2644:	8e 01       	movw	r16, r28
    2646:	07 55       	subi	r16, 0x57	; 87
    2648:	1e 4f       	sbci	r17, 0xFE	; 254
    264a:	fe 01       	movw	r30, r28
    264c:	e5 55       	subi	r30, 0x55	; 85
    264e:	fe 4f       	sbci	r31, 0xFE	; 254
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	f8 01       	movw	r30, r16
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
    2666:	de 01       	movw	r26, r28
    2668:	ab 55       	subi	r26, 0x5B	; 91
    266a:	be 4f       	sbci	r27, 0xFE	; 254
    266c:	fe 01       	movw	r30, r28
    266e:	e7 55       	subi	r30, 0x57	; 87
    2670:	fe 4f       	sbci	r31, 0xFE	; 254
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	8d 93       	st	X+, r24
    2678:	9c 93       	st	X, r25
    267a:	fe 01       	movw	r30, r28
    267c:	eb 55       	subi	r30, 0x5B	; 91
    267e:	fe 4f       	sbci	r31, 0xFE	; 254
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <main+0x706>
    2688:	fe 01       	movw	r30, r28
    268a:	eb 55       	subi	r30, 0x5B	; 91
    268c:	fe 4f       	sbci	r31, 0xFE	; 254
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
			_delay_ms(100);
			pass_counter++;
    2692:	de 01       	movw	r26, r28
    2694:	a0 52       	subi	r26, 0x20	; 32
    2696:	be 4f       	sbci	r27, 0xFE	; 254
    2698:	fe 01       	movw	r30, r28
    269a:	e0 52       	subi	r30, 0x20	; 32
    269c:	fe 4f       	sbci	r31, 0xFE	; 254
    269e:	80 81       	ld	r24, Z
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	8c 93       	st	X, r24
		LCD_MOVE_CURSOR(2,1);
		LCD_WriteString("admin pass:");

		u8 pass_counter = 0;
		u8 pass[PASS_SIZE] = {NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
		while(pass_counter <PASS_SIZE)
    26a4:	fe 01       	movw	r30, r28
    26a6:	e0 52       	subi	r30, 0x20	; 32
    26a8:	fe 4f       	sbci	r31, 0xFE	; 254
    26aa:	80 81       	ld	r24, Z
    26ac:	84 30       	cpi	r24, 0x04	; 4
    26ae:	08 f4       	brcc	.+2      	; 0x26b2 <main+0x734>
    26b0:	54 ce       	rjmp	.-856    	; 0x235a <main+0x3dc>
			LCD_WriteChar(PASSWORD_SYMBOL);
			_delay_ms(100);
			pass_counter++;
		}

		EEPROM_WriteBlockToAddress(EEPROM_ADMIN_ADDRESS,pass, PASS_SIZE);
    26b2:	9e 01       	movw	r18, r28
    26b4:	29 51       	subi	r18, 0x19	; 25
    26b6:	3e 4f       	sbci	r19, 0xFE	; 254
    26b8:	82 e0       	ldi	r24, 0x02	; 2
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	b9 01       	movw	r22, r18
    26be:	44 e0       	ldi	r20, 0x04	; 4
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	0e 94 21 0a 	call	0x1442	; 0x1442 <EEPROM_WriteBlockToAddress>
		EEPROM_WriteByteToAddress(ADMIN_PASS_STATUS_ADDRESS, PASS_SET);
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	91 e0       	ldi	r25, 0x01	; 1
    26ca:	61 e0       	ldi	r22, 0x01	; 1
    26cc:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <EEPROM_WriteByteToAddress>

		LCD_CLEAR_SCREEN();
    26d0:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
		LCD_WriteString("pass saved");
    26d4:	8f ea       	ldi	r24, 0xAF	; 175
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    26dc:	fe 01       	movw	r30, r28
    26de:	ef 55       	subi	r30, 0x5F	; 95
    26e0:	fe 4f       	sbci	r31, 0xFE	; 254
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	aa ef       	ldi	r26, 0xFA	; 250
    26e8:	b3 e4       	ldi	r27, 0x43	; 67
    26ea:	80 83       	st	Z, r24
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	a2 83       	std	Z+2, r26	; 0x02
    26f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	8e 01       	movw	r16, r28
    26f4:	03 56       	subi	r16, 0x63	; 99
    26f6:	1e 4f       	sbci	r17, 0xFE	; 254
    26f8:	fe 01       	movw	r30, r28
    26fa:	ef 55       	subi	r30, 0x5F	; 95
    26fc:	fe 4f       	sbci	r31, 0xFE	; 254
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a e7       	ldi	r20, 0x7A	; 122
    270c:	55 e4       	ldi	r21, 0x45	; 69
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	f8 01       	movw	r30, r16
    2718:	80 83       	st	Z, r24
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	a2 83       	std	Z+2, r26	; 0x02
    271e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2720:	fe 01       	movw	r30, r28
    2722:	e3 56       	subi	r30, 0x63	; 99
    2724:	fe 4f       	sbci	r31, 0xFE	; 254
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e8       	ldi	r20, 0x80	; 128
    2734:	5f e3       	ldi	r21, 0x3F	; 63
    2736:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    273a:	88 23       	and	r24, r24
    273c:	44 f4       	brge	.+16     	; 0x274e <main+0x7d0>
		__ticks = 1;
    273e:	fe 01       	movw	r30, r28
    2740:	e5 56       	subi	r30, 0x65	; 101
    2742:	fe 4f       	sbci	r31, 0xFE	; 254
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	80 83       	st	Z, r24
    274c:	64 c0       	rjmp	.+200    	; 0x2816 <main+0x898>
	else if (__tmp > 65535)
    274e:	fe 01       	movw	r30, r28
    2750:	e3 56       	subi	r30, 0x63	; 99
    2752:	fe 4f       	sbci	r31, 0xFE	; 254
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	3f ef       	ldi	r19, 0xFF	; 255
    2760:	4f e7       	ldi	r20, 0x7F	; 127
    2762:	57 e4       	ldi	r21, 0x47	; 71
    2764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2768:	18 16       	cp	r1, r24
    276a:	0c f0       	brlt	.+2      	; 0x276e <main+0x7f0>
    276c:	43 c0       	rjmp	.+134    	; 0x27f4 <main+0x876>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276e:	fe 01       	movw	r30, r28
    2770:	ef 55       	subi	r30, 0x5F	; 95
    2772:	fe 4f       	sbci	r31, 0xFE	; 254
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e2       	ldi	r20, 0x20	; 32
    2782:	51 e4       	ldi	r21, 0x41	; 65
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	8e 01       	movw	r16, r28
    278e:	05 56       	subi	r16, 0x65	; 101
    2790:	1e 4f       	sbci	r17, 0xFE	; 254
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	f8 01       	movw	r30, r16
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	80 83       	st	Z, r24
    27a4:	1f c0       	rjmp	.+62     	; 0x27e4 <main+0x866>
    27a6:	fe 01       	movw	r30, r28
    27a8:	e7 56       	subi	r30, 0x67	; 103
    27aa:	fe 4f       	sbci	r31, 0xFE	; 254
    27ac:	80 e9       	ldi	r24, 0x90	; 144
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
    27b4:	fe 01       	movw	r30, r28
    27b6:	e7 56       	subi	r30, 0x67	; 103
    27b8:	fe 4f       	sbci	r31, 0xFE	; 254
    27ba:	80 81       	ld	r24, Z
    27bc:	91 81       	ldd	r25, Z+1	; 0x01
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <main+0x840>
    27c2:	fe 01       	movw	r30, r28
    27c4:	e7 56       	subi	r30, 0x67	; 103
    27c6:	fe 4f       	sbci	r31, 0xFE	; 254
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27cc:	de 01       	movw	r26, r28
    27ce:	a5 56       	subi	r26, 0x65	; 101
    27d0:	be 4f       	sbci	r27, 0xFE	; 254
    27d2:	fe 01       	movw	r30, r28
    27d4:	e5 56       	subi	r30, 0x65	; 101
    27d6:	fe 4f       	sbci	r31, 0xFE	; 254
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	11 96       	adiw	r26, 0x01	; 1
    27e0:	9c 93       	st	X, r25
    27e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e4:	fe 01       	movw	r30, r28
    27e6:	e5 56       	subi	r30, 0x65	; 101
    27e8:	fe 4f       	sbci	r31, 0xFE	; 254
    27ea:	80 81       	ld	r24, Z
    27ec:	91 81       	ldd	r25, Z+1	; 0x01
    27ee:	00 97       	sbiw	r24, 0x00	; 0
    27f0:	d1 f6       	brne	.-76     	; 0x27a6 <main+0x828>
    27f2:	27 c0       	rjmp	.+78     	; 0x2842 <main+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f4:	8e 01       	movw	r16, r28
    27f6:	05 56       	subi	r16, 0x65	; 101
    27f8:	1e 4f       	sbci	r17, 0xFE	; 254
    27fa:	fe 01       	movw	r30, r28
    27fc:	e3 56       	subi	r30, 0x63	; 99
    27fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2800:	60 81       	ld	r22, Z
    2802:	71 81       	ldd	r23, Z+1	; 0x01
    2804:	82 81       	ldd	r24, Z+2	; 0x02
    2806:	93 81       	ldd	r25, Z+3	; 0x03
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	f8 01       	movw	r30, r16
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
    2816:	de 01       	movw	r26, r28
    2818:	a9 56       	subi	r26, 0x69	; 105
    281a:	be 4f       	sbci	r27, 0xFE	; 254
    281c:	fe 01       	movw	r30, r28
    281e:	e5 56       	subi	r30, 0x65	; 101
    2820:	fe 4f       	sbci	r31, 0xFE	; 254
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	8d 93       	st	X+, r24
    2828:	9c 93       	st	X, r25
    282a:	fe 01       	movw	r30, r28
    282c:	e9 56       	subi	r30, 0x69	; 105
    282e:	fe 4f       	sbci	r31, 0xFE	; 254
    2830:	80 81       	ld	r24, Z
    2832:	91 81       	ldd	r25, Z+1	; 0x01
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <main+0x8b6>
    2838:	fe 01       	movw	r30, r28
    283a:	e9 56       	subi	r30, 0x69	; 105
    283c:	fe 4f       	sbci	r31, 0xFE	; 254
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	80 83       	st	Z, r24
		_delay_ms(500);
		LCD_CLEAR_SCREEN();
    2842:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>


		pass_counter = 0;
    2846:	fe 01       	movw	r30, r28
    2848:	e0 52       	subi	r30, 0x20	; 32
    284a:	fe 4f       	sbci	r31, 0xFE	; 254
    284c:	10 82       	st	Z, r1
		LCD_WriteString("set guest pass");
    284e:	8a eb       	ldi	r24, 0xBA	; 186
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
		LCD_MOVE_CURSOR(2,1);
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	61 e0       	ldi	r22, 0x01	; 1
    285a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
		LCD_WriteString("guest pass:");
    285e:	89 ec       	ldi	r24, 0xC9	; 201
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    2866:	a5 c1       	rjmp	.+842    	; 0x2bb2 <main+0xc34>
		while(pass_counter <PASS_SIZE)
				{
					key_pressed =NOT_PRESSED;
    2868:	fe 01       	movw	r30, r28
    286a:	ef 51       	subi	r30, 0x1F	; 31
    286c:	fe 4f       	sbci	r31, 0xFE	; 254
    286e:	8f ef       	ldi	r24, 0xFF	; 255
    2870:	80 83       	st	Z, r24
    2872:	06 c0       	rjmp	.+12     	; 0x2880 <main+0x902>
					while (key_pressed == NOT_PRESSED)
					{
						key_pressed = Keypad_GetPressedKey();
    2874:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <Keypad_GetPressedKey>
    2878:	fe 01       	movw	r30, r28
    287a:	ef 51       	subi	r30, 0x1F	; 31
    287c:	fe 4f       	sbci	r31, 0xFE	; 254
    287e:	80 83       	st	Z, r24
		LCD_MOVE_CURSOR(2,1);
		LCD_WriteString("guest pass:");
		while(pass_counter <PASS_SIZE)
				{
					key_pressed =NOT_PRESSED;
					while (key_pressed == NOT_PRESSED)
    2880:	fe 01       	movw	r30, r28
    2882:	ef 51       	subi	r30, 0x1F	; 31
    2884:	fe 4f       	sbci	r31, 0xFE	; 254
    2886:	80 81       	ld	r24, Z
    2888:	8f 3f       	cpi	r24, 0xFF	; 255
    288a:	a1 f3       	breq	.-24     	; 0x2874 <main+0x8f6>
					{
						key_pressed = Keypad_GetPressedKey();
					}
					pass[pass_counter] = key_pressed;
    288c:	fe 01       	movw	r30, r28
    288e:	e0 52       	subi	r30, 0x20	; 32
    2890:	fe 4f       	sbci	r31, 0xFE	; 254
    2892:	80 81       	ld	r24, Z
    2894:	28 2f       	mov	r18, r24
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	ce 01       	movw	r24, r28
    289a:	89 51       	subi	r24, 0x19	; 25
    289c:	9e 4f       	sbci	r25, 0xFE	; 254
    289e:	dc 01       	movw	r26, r24
    28a0:	a2 0f       	add	r26, r18
    28a2:	b3 1f       	adc	r27, r19
    28a4:	fe 01       	movw	r30, r28
    28a6:	ef 51       	subi	r30, 0x1F	; 31
    28a8:	fe 4f       	sbci	r31, 0xFE	; 254
    28aa:	80 81       	ld	r24, Z
    28ac:	8c 93       	st	X, r24
					LCD_WriteChar(key_pressed);
    28ae:	fe 01       	movw	r30, r28
    28b0:	ef 51       	subi	r30, 0x1F	; 31
    28b2:	fe 4f       	sbci	r31, 0xFE	; 254
    28b4:	80 81       	ld	r24, Z
    28b6:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
    28ba:	fe 01       	movw	r30, r28
    28bc:	ed 56       	subi	r30, 0x6D	; 109
    28be:	fe 4f       	sbci	r31, 0xFE	; 254
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a8 e4       	ldi	r26, 0x48	; 72
    28c6:	b3 e4       	ldi	r27, 0x43	; 67
    28c8:	80 83       	st	Z, r24
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	a2 83       	std	Z+2, r26	; 0x02
    28ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	8e 01       	movw	r16, r28
    28d2:	01 57       	subi	r16, 0x71	; 113
    28d4:	1e 4f       	sbci	r17, 0xFE	; 254
    28d6:	fe 01       	movw	r30, r28
    28d8:	ed 56       	subi	r30, 0x6D	; 109
    28da:	fe 4f       	sbci	r31, 0xFE	; 254
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	4a e7       	ldi	r20, 0x7A	; 122
    28ea:	55 e4       	ldi	r21, 0x45	; 69
    28ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	80 83       	st	Z, r24
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	a2 83       	std	Z+2, r26	; 0x02
    28fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28fe:	fe 01       	movw	r30, r28
    2900:	e1 57       	subi	r30, 0x71	; 113
    2902:	fe 4f       	sbci	r31, 0xFE	; 254
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	44 f4       	brge	.+16     	; 0x292c <main+0x9ae>
		__ticks = 1;
    291c:	fe 01       	movw	r30, r28
    291e:	e3 57       	subi	r30, 0x73	; 115
    2920:	fe 4f       	sbci	r31, 0xFE	; 254
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
    292a:	64 c0       	rjmp	.+200    	; 0x29f4 <main+0xa76>
	else if (__tmp > 65535)
    292c:	fe 01       	movw	r30, r28
    292e:	e1 57       	subi	r30, 0x71	; 113
    2930:	fe 4f       	sbci	r31, 0xFE	; 254
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	0c f0       	brlt	.+2      	; 0x294c <main+0x9ce>
    294a:	43 c0       	rjmp	.+134    	; 0x29d2 <main+0xa54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	fe 01       	movw	r30, r28
    294e:	ed 56       	subi	r30, 0x6D	; 109
    2950:	fe 4f       	sbci	r31, 0xFE	; 254
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	8e 01       	movw	r16, r28
    296c:	03 57       	subi	r16, 0x73	; 115
    296e:	1e 4f       	sbci	r17, 0xFE	; 254
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	f8 01       	movw	r30, r16
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    2982:	1f c0       	rjmp	.+62     	; 0x29c2 <main+0xa44>
    2984:	fe 01       	movw	r30, r28
    2986:	e5 57       	subi	r30, 0x75	; 117
    2988:	fe 4f       	sbci	r31, 0xFE	; 254
    298a:	80 e9       	ldi	r24, 0x90	; 144
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	fe 01       	movw	r30, r28
    2994:	e5 57       	subi	r30, 0x75	; 117
    2996:	fe 4f       	sbci	r31, 0xFE	; 254
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <main+0xa1e>
    29a0:	fe 01       	movw	r30, r28
    29a2:	e5 57       	subi	r30, 0x75	; 117
    29a4:	fe 4f       	sbci	r31, 0xFE	; 254
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	de 01       	movw	r26, r28
    29ac:	a3 57       	subi	r26, 0x73	; 115
    29ae:	be 4f       	sbci	r27, 0xFE	; 254
    29b0:	fe 01       	movw	r30, r28
    29b2:	e3 57       	subi	r30, 0x73	; 115
    29b4:	fe 4f       	sbci	r31, 0xFE	; 254
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	11 96       	adiw	r26, 0x01	; 1
    29be:	9c 93       	st	X, r25
    29c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c2:	fe 01       	movw	r30, r28
    29c4:	e3 57       	subi	r30, 0x73	; 115
    29c6:	fe 4f       	sbci	r31, 0xFE	; 254
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	d1 f6       	brne	.-76     	; 0x2984 <main+0xa06>
    29d0:	27 c0       	rjmp	.+78     	; 0x2a20 <main+0xaa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	8e 01       	movw	r16, r28
    29d4:	03 57       	subi	r16, 0x73	; 115
    29d6:	1e 4f       	sbci	r17, 0xFE	; 254
    29d8:	fe 01       	movw	r30, r28
    29da:	e1 57       	subi	r30, 0x71	; 113
    29dc:	fe 4f       	sbci	r31, 0xFE	; 254
    29de:	60 81       	ld	r22, Z
    29e0:	71 81       	ldd	r23, Z+1	; 0x01
    29e2:	82 81       	ldd	r24, Z+2	; 0x02
    29e4:	93 81       	ldd	r25, Z+3	; 0x03
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	f8 01       	movw	r30, r16
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	80 83       	st	Z, r24
    29f4:	de 01       	movw	r26, r28
    29f6:	a7 57       	subi	r26, 0x77	; 119
    29f8:	be 4f       	sbci	r27, 0xFE	; 254
    29fa:	fe 01       	movw	r30, r28
    29fc:	e3 57       	subi	r30, 0x73	; 115
    29fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2a00:	80 81       	ld	r24, Z
    2a02:	91 81       	ldd	r25, Z+1	; 0x01
    2a04:	8d 93       	st	X+, r24
    2a06:	9c 93       	st	X, r25
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e7 57       	subi	r30, 0x77	; 119
    2a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <main+0xa94>
    2a16:	fe 01       	movw	r30, r28
    2a18:	e7 57       	subi	r30, 0x77	; 119
    2a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1c:	91 83       	std	Z+1, r25	; 0x01
    2a1e:	80 83       	st	Z, r24
					_delay_ms(CHARACTER_PREVIEW_TIME);
					LCD_MOVE_CURSOR(2,12+pass_counter);
    2a20:	fe 01       	movw	r30, r28
    2a22:	e0 52       	subi	r30, 0x20	; 32
    2a24:	fe 4f       	sbci	r31, 0xFE	; 254
    2a26:	80 81       	ld	r24, Z
    2a28:	98 2f       	mov	r25, r24
    2a2a:	94 5f       	subi	r25, 0xF4	; 244
    2a2c:	82 e0       	ldi	r24, 0x02	; 2
    2a2e:	69 2f       	mov	r22, r25
    2a30:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
					LCD_WriteChar(PASSWORD_SYMBOL);
    2a34:	8a e2       	ldi	r24, 0x2A	; 42
    2a36:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	eb 57       	subi	r30, 0x7B	; 123
    2a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	a8 ec       	ldi	r26, 0xC8	; 200
    2a46:	b2 e4       	ldi	r27, 0x42	; 66
    2a48:	80 83       	st	Z, r24
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	a2 83       	std	Z+2, r26	; 0x02
    2a4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a50:	8e 01       	movw	r16, r28
    2a52:	0f 57       	subi	r16, 0x7F	; 127
    2a54:	1e 4f       	sbci	r17, 0xFE	; 254
    2a56:	fe 01       	movw	r30, r28
    2a58:	eb 57       	subi	r30, 0x7B	; 123
    2a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	4a e7       	ldi	r20, 0x7A	; 122
    2a6a:	55 e4       	ldi	r21, 0x45	; 69
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	f8 01       	movw	r30, r16
    2a76:	80 83       	st	Z, r24
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	a2 83       	std	Z+2, r26	; 0x02
    2a7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a7e:	fe 01       	movw	r30, r28
    2a80:	ef 57       	subi	r30, 0x7F	; 127
    2a82:	fe 4f       	sbci	r31, 0xFE	; 254
    2a84:	60 81       	ld	r22, Z
    2a86:	71 81       	ldd	r23, Z+1	; 0x01
    2a88:	82 81       	ldd	r24, Z+2	; 0x02
    2a8a:	93 81       	ldd	r25, Z+3	; 0x03
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	5f e3       	ldi	r21, 0x3F	; 63
    2a94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a98:	88 23       	and	r24, r24
    2a9a:	44 f4       	brge	.+16     	; 0x2aac <main+0xb2e>
		__ticks = 1;
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e1 58       	subi	r30, 0x81	; 129
    2aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
    2aaa:	64 c0       	rjmp	.+200    	; 0x2b74 <main+0xbf6>
	else if (__tmp > 65535)
    2aac:	fe 01       	movw	r30, r28
    2aae:	ef 57       	subi	r30, 0x7F	; 127
    2ab0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab2:	60 81       	ld	r22, Z
    2ab4:	71 81       	ldd	r23, Z+1	; 0x01
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	93 81       	ldd	r25, Z+3	; 0x03
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	3f ef       	ldi	r19, 0xFF	; 255
    2abe:	4f e7       	ldi	r20, 0x7F	; 127
    2ac0:	57 e4       	ldi	r21, 0x47	; 71
    2ac2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac6:	18 16       	cp	r1, r24
    2ac8:	0c f0       	brlt	.+2      	; 0x2acc <main+0xb4e>
    2aca:	43 c0       	rjmp	.+134    	; 0x2b52 <main+0xbd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2acc:	fe 01       	movw	r30, r28
    2ace:	eb 57       	subi	r30, 0x7B	; 123
    2ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad2:	60 81       	ld	r22, Z
    2ad4:	71 81       	ldd	r23, Z+1	; 0x01
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	93 81       	ldd	r25, Z+3	; 0x03
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e2       	ldi	r20, 0x20	; 32
    2ae0:	51 e4       	ldi	r21, 0x41	; 65
    2ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	8e 01       	movw	r16, r28
    2aec:	01 58       	subi	r16, 0x81	; 129
    2aee:	1e 4f       	sbci	r17, 0xFE	; 254
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	f8 01       	movw	r30, r16
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
    2b02:	1f c0       	rjmp	.+62     	; 0x2b42 <main+0xbc4>
    2b04:	fe 01       	movw	r30, r28
    2b06:	e3 58       	subi	r30, 0x83	; 131
    2b08:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0a:	80 e9       	ldi	r24, 0x90	; 144
    2b0c:	91 e0       	ldi	r25, 0x01	; 1
    2b0e:	91 83       	std	Z+1, r25	; 0x01
    2b10:	80 83       	st	Z, r24
    2b12:	fe 01       	movw	r30, r28
    2b14:	e3 58       	subi	r30, 0x83	; 131
    2b16:	fe 4f       	sbci	r31, 0xFE	; 254
    2b18:	80 81       	ld	r24, Z
    2b1a:	91 81       	ldd	r25, Z+1	; 0x01
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <main+0xb9e>
    2b20:	fe 01       	movw	r30, r28
    2b22:	e3 58       	subi	r30, 0x83	; 131
    2b24:	fe 4f       	sbci	r31, 0xFE	; 254
    2b26:	91 83       	std	Z+1, r25	; 0x01
    2b28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2a:	de 01       	movw	r26, r28
    2b2c:	a1 58       	subi	r26, 0x81	; 129
    2b2e:	be 4f       	sbci	r27, 0xFE	; 254
    2b30:	fe 01       	movw	r30, r28
    2b32:	e1 58       	subi	r30, 0x81	; 129
    2b34:	fe 4f       	sbci	r31, 0xFE	; 254
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	11 96       	adiw	r26, 0x01	; 1
    2b3e:	9c 93       	st	X, r25
    2b40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b42:	fe 01       	movw	r30, r28
    2b44:	e1 58       	subi	r30, 0x81	; 129
    2b46:	fe 4f       	sbci	r31, 0xFE	; 254
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	d1 f6       	brne	.-76     	; 0x2b04 <main+0xb86>
    2b50:	27 c0       	rjmp	.+78     	; 0x2ba0 <main+0xc22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b52:	8e 01       	movw	r16, r28
    2b54:	01 58       	subi	r16, 0x81	; 129
    2b56:	1e 4f       	sbci	r17, 0xFE	; 254
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ef 57       	subi	r30, 0x7F	; 127
    2b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	f8 01       	movw	r30, r16
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
    2b74:	de 01       	movw	r26, r28
    2b76:	a5 58       	subi	r26, 0x85	; 133
    2b78:	be 4f       	sbci	r27, 0xFE	; 254
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e1 58       	subi	r30, 0x81	; 129
    2b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	8d 93       	st	X+, r24
    2b86:	9c 93       	st	X, r25
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e5 58       	subi	r30, 0x85	; 133
    2b8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8e:	80 81       	ld	r24, Z
    2b90:	91 81       	ldd	r25, Z+1	; 0x01
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <main+0xc14>
    2b96:	fe 01       	movw	r30, r28
    2b98:	e5 58       	subi	r30, 0x85	; 133
    2b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
					_delay_ms(100);
					pass_counter++;
    2ba0:	de 01       	movw	r26, r28
    2ba2:	a0 52       	subi	r26, 0x20	; 32
    2ba4:	be 4f       	sbci	r27, 0xFE	; 254
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e0 52       	subi	r30, 0x20	; 32
    2baa:	fe 4f       	sbci	r31, 0xFE	; 254
    2bac:	80 81       	ld	r24, Z
    2bae:	8f 5f       	subi	r24, 0xFF	; 255
    2bb0:	8c 93       	st	X, r24

		pass_counter = 0;
		LCD_WriteString("set guest pass");
		LCD_MOVE_CURSOR(2,1);
		LCD_WriteString("guest pass:");
		while(pass_counter <PASS_SIZE)
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e0 52       	subi	r30, 0x20	; 32
    2bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb8:	80 81       	ld	r24, Z
    2bba:	84 30       	cpi	r24, 0x04	; 4
    2bbc:	08 f4       	brcc	.+2      	; 0x2bc0 <main+0xc42>
    2bbe:	54 ce       	rjmp	.-856    	; 0x2868 <main+0x8ea>
					LCD_WriteChar(PASSWORD_SYMBOL);
					_delay_ms(100);
					pass_counter++;
				}

				EEPROM_WriteBlockToAddress(EEPROM_GUEST_ADDRESS,pass, PASS_SIZE);
    2bc0:	9e 01       	movw	r18, r28
    2bc2:	29 51       	subi	r18, 0x19	; 25
    2bc4:	3e 4f       	sbci	r19, 0xFE	; 254
    2bc6:	86 e0       	ldi	r24, 0x06	; 6
    2bc8:	91 e0       	ldi	r25, 0x01	; 1
    2bca:	b9 01       	movw	r22, r18
    2bcc:	44 e0       	ldi	r20, 0x04	; 4
    2bce:	50 e0       	ldi	r21, 0x00	; 0
    2bd0:	0e 94 21 0a 	call	0x1442	; 0x1442 <EEPROM_WriteBlockToAddress>
				EEPROM_WriteByteToAddress(GUEST_PASS_STATUS_ADDRESS, PASS_SET);
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	61 e0       	ldi	r22, 0x01	; 1
    2bda:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <EEPROM_WriteByteToAddress>

				LCD_CLEAR_SCREEN();
    2bde:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
				LCD_WriteString("pass saved");
    2be2:	8f ea       	ldi	r24, 0xAF	; 175
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    2bea:	fe 01       	movw	r30, r28
    2bec:	e9 58       	subi	r30, 0x89	; 137
    2bee:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	aa ef       	ldi	r26, 0xFA	; 250
    2bf6:	b3 e4       	ldi	r27, 0x43	; 67
    2bf8:	80 83       	st	Z, r24
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	a2 83       	std	Z+2, r26	; 0x02
    2bfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	8e 01       	movw	r16, r28
    2c02:	0d 58       	subi	r16, 0x8D	; 141
    2c04:	1e 4f       	sbci	r17, 0xFE	; 254
    2c06:	fe 01       	movw	r30, r28
    2c08:	e9 58       	subi	r30, 0x89	; 137
    2c0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c0c:	60 81       	ld	r22, Z
    2c0e:	71 81       	ldd	r23, Z+1	; 0x01
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	93 81       	ldd	r25, Z+3	; 0x03
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	4a e7       	ldi	r20, 0x7A	; 122
    2c1a:	55 e4       	ldi	r21, 0x45	; 69
    2c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	f8 01       	movw	r30, r16
    2c26:	80 83       	st	Z, r24
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	a2 83       	std	Z+2, r26	; 0x02
    2c2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c2e:	fe 01       	movw	r30, r28
    2c30:	ed 58       	subi	r30, 0x8D	; 141
    2c32:	fe 4f       	sbci	r31, 0xFE	; 254
    2c34:	60 81       	ld	r22, Z
    2c36:	71 81       	ldd	r23, Z+1	; 0x01
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c48:	88 23       	and	r24, r24
    2c4a:	44 f4       	brge	.+16     	; 0x2c5c <main+0xcde>
		__ticks = 1;
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ef 58       	subi	r30, 0x8F	; 143
    2c50:	fe 4f       	sbci	r31, 0xFE	; 254
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	91 83       	std	Z+1, r25	; 0x01
    2c58:	80 83       	st	Z, r24
    2c5a:	64 c0       	rjmp	.+200    	; 0x2d24 <main+0xda6>
	else if (__tmp > 65535)
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	ed 58       	subi	r30, 0x8D	; 141
    2c60:	fe 4f       	sbci	r31, 0xFE	; 254
    2c62:	60 81       	ld	r22, Z
    2c64:	71 81       	ldd	r23, Z+1	; 0x01
    2c66:	82 81       	ldd	r24, Z+2	; 0x02
    2c68:	93 81       	ldd	r25, Z+3	; 0x03
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	3f ef       	ldi	r19, 0xFF	; 255
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	57 e4       	ldi	r21, 0x47	; 71
    2c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	0c f0       	brlt	.+2      	; 0x2c7c <main+0xcfe>
    2c7a:	43 c0       	rjmp	.+134    	; 0x2d02 <main+0xd84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e9 58       	subi	r30, 0x89	; 137
    2c80:	fe 4f       	sbci	r31, 0xFE	; 254
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e2       	ldi	r20, 0x20	; 32
    2c90:	51 e4       	ldi	r21, 0x41	; 65
    2c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	8e 01       	movw	r16, r28
    2c9c:	0f 58       	subi	r16, 0x8F	; 143
    2c9e:	1e 4f       	sbci	r17, 0xFE	; 254
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	f8 01       	movw	r30, r16
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	80 83       	st	Z, r24
    2cb2:	1f c0       	rjmp	.+62     	; 0x2cf2 <main+0xd74>
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e1 59       	subi	r30, 0x91	; 145
    2cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cba:	80 e9       	ldi	r24, 0x90	; 144
    2cbc:	91 e0       	ldi	r25, 0x01	; 1
    2cbe:	91 83       	std	Z+1, r25	; 0x01
    2cc0:	80 83       	st	Z, r24
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e1 59       	subi	r30, 0x91	; 145
    2cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc8:	80 81       	ld	r24, Z
    2cca:	91 81       	ldd	r25, Z+1	; 0x01
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <main+0xd4e>
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e1 59       	subi	r30, 0x91	; 145
    2cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cda:	de 01       	movw	r26, r28
    2cdc:	af 58       	subi	r26, 0x8F	; 143
    2cde:	be 4f       	sbci	r27, 0xFE	; 254
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	ef 58       	subi	r30, 0x8F	; 143
    2ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce6:	80 81       	ld	r24, Z
    2ce8:	91 81       	ldd	r25, Z+1	; 0x01
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	11 96       	adiw	r26, 0x01	; 1
    2cee:	9c 93       	st	X, r25
    2cf0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ef 58       	subi	r30, 0x8F	; 143
    2cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	d1 f6       	brne	.-76     	; 0x2cb4 <main+0xd36>
    2d00:	27 c0       	rjmp	.+78     	; 0x2d50 <main+0xdd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d02:	8e 01       	movw	r16, r28
    2d04:	0f 58       	subi	r16, 0x8F	; 143
    2d06:	1e 4f       	sbci	r17, 0xFE	; 254
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ed 58       	subi	r30, 0x8D	; 141
    2d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0e:	60 81       	ld	r22, Z
    2d10:	71 81       	ldd	r23, Z+1	; 0x01
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	f8 01       	movw	r30, r16
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
    2d24:	de 01       	movw	r26, r28
    2d26:	a3 59       	subi	r26, 0x93	; 147
    2d28:	be 4f       	sbci	r27, 0xFE	; 254
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	ef 58       	subi	r30, 0x8F	; 143
    2d2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	8d 93       	st	X+, r24
    2d36:	9c 93       	st	X, r25
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e3 59       	subi	r30, 0x93	; 147
    2d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <main+0xdc4>
    2d46:	fe 01       	movw	r30, r28
    2d48:	e3 59       	subi	r30, 0x93	; 147
    2d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_CLEAR_SCREEN();
    2d50:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
    2d54:	04 c0       	rjmp	.+8      	; 0x2d5e <main+0xde0>

	}
	else
	{
		block_mode_flag =FALSE;
    2d56:	fe 01       	movw	r30, r28
    2d58:	ee 51       	subi	r30, 0x1E	; 30
    2d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d5c:	10 82       	st	Z, r1
	}

	while (1)
	{
		key_pressed = NOT_PRESSED;
    2d5e:	fe 01       	movw	r30, r28
    2d60:	ef 51       	subi	r30, 0x1F	; 31
    2d62:	fe 4f       	sbci	r31, 0xFE	; 254
    2d64:	8f ef       	ldi	r24, 0xFF	; 255
    2d66:	80 83       	st	Z, r24
		u8 pass_tries_count = 0;
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e1 52       	subi	r30, 0x21	; 33
    2d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6e:	10 82       	st	Z, r1

		if (timeout_flag == TRUE)
    2d70:	80 91 8c 02 	lds	r24, 0x028C
    2d74:	81 30       	cpi	r24, 0x01	; 1
    2d76:	11 f0       	breq	.+4      	; 0x2d7c <main+0xdfe>
    2d78:	0c 94 47 22 	jmp	0x448e	; 0x448e <main+0x2510>
		{
			timer0_stop();
    2d7c:	0e 94 4a 30 	call	0x6094	; 0x6094 <timer0_stop>
			session_counter = 0;
    2d80:	10 92 8b 02 	sts	0x028B, r1
    2d84:	10 92 8a 02 	sts	0x028A, r1
			timeout_flag = FALSE;
    2d88:	10 92 8c 02 	sts	0x028C, r1
			login_mode = NO_MODE;
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	ed 51       	subi	r30, 0x1D	; 29
    2d90:	fe 4f       	sbci	r31, 0xFE	; 254
    2d92:	10 82       	st	Z, r1
			key_pressed = NOT_PRESSED;
    2d94:	fe 01       	movw	r30, r28
    2d96:	ef 51       	subi	r30, 0x1F	; 31
    2d98:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9a:	8f ef       	ldi	r24, 0xFF	; 255
    2d9c:	80 83       	st	Z, r24
			LED_TurnOff(ADMIN_LED_PORT, ADMIN_LED_PIN);
    2d9e:	82 e0       	ldi	r24, 0x02	; 2
    2da0:	65 e0       	ldi	r22, 0x05	; 5
    2da2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <LED_TurnOff>
			LED_TurnOff(GUEST_LED_PORT, GUEST_LED_PIN);
    2da6:	82 e0       	ldi	r24, 0x02	; 2
    2da8:	66 e0       	ldi	r22, 0x06	; 6
    2daa:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <LED_TurnOff>
			LCD_CLEAR_SCREEN();
    2dae:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
			LCD_WriteString("session timeout");
    2db2:	85 ed       	ldi	r24, 0xD5	; 213
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    2dba:	fe 01       	movw	r30, r28
    2dbc:	e7 59       	subi	r30, 0x97	; 151
    2dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	aa e7       	ldi	r26, 0x7A	; 122
    2dc6:	b4 e4       	ldi	r27, 0x44	; 68
    2dc8:	80 83       	st	Z, r24
    2dca:	91 83       	std	Z+1, r25	; 0x01
    2dcc:	a2 83       	std	Z+2, r26	; 0x02
    2dce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd0:	8e 01       	movw	r16, r28
    2dd2:	0b 59       	subi	r16, 0x9B	; 155
    2dd4:	1e 4f       	sbci	r17, 0xFE	; 254
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e7 59       	subi	r30, 0x97	; 151
    2dda:	fe 4f       	sbci	r31, 0xFE	; 254
    2ddc:	60 81       	ld	r22, Z
    2dde:	71 81       	ldd	r23, Z+1	; 0x01
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	93 81       	ldd	r25, Z+3	; 0x03
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	4a e7       	ldi	r20, 0x7A	; 122
    2dea:	55 e4       	ldi	r21, 0x45	; 69
    2dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	f8 01       	movw	r30, r16
    2df6:	80 83       	st	Z, r24
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	a2 83       	std	Z+2, r26	; 0x02
    2dfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dfe:	fe 01       	movw	r30, r28
    2e00:	eb 59       	subi	r30, 0x9B	; 155
    2e02:	fe 4f       	sbci	r31, 0xFE	; 254
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e8       	ldi	r20, 0x80	; 128
    2e12:	5f e3       	ldi	r21, 0x3F	; 63
    2e14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e18:	88 23       	and	r24, r24
    2e1a:	44 f4       	brge	.+16     	; 0x2e2c <main+0xeae>
		__ticks = 1;
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	ed 59       	subi	r30, 0x9D	; 157
    2e20:	fe 4f       	sbci	r31, 0xFE	; 254
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	80 83       	st	Z, r24
    2e2a:	65 c0       	rjmp	.+202    	; 0x2ef6 <main+0xf78>
	else if (__tmp > 65535)
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	eb 59       	subi	r30, 0x9B	; 155
    2e30:	fe 4f       	sbci	r31, 0xFE	; 254
    2e32:	60 81       	ld	r22, Z
    2e34:	71 81       	ldd	r23, Z+1	; 0x01
    2e36:	82 81       	ldd	r24, Z+2	; 0x02
    2e38:	93 81       	ldd	r25, Z+3	; 0x03
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	3f ef       	ldi	r19, 0xFF	; 255
    2e3e:	4f e7       	ldi	r20, 0x7F	; 127
    2e40:	57 e4       	ldi	r21, 0x47	; 71
    2e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e46:	18 16       	cp	r1, r24
    2e48:	0c f0       	brlt	.+2      	; 0x2e4c <main+0xece>
    2e4a:	44 c0       	rjmp	.+136    	; 0x2ed4 <main+0xf56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e7 59       	subi	r30, 0x97	; 151
    2e50:	fe 4f       	sbci	r31, 0xFE	; 254
    2e52:	60 81       	ld	r22, Z
    2e54:	71 81       	ldd	r23, Z+1	; 0x01
    2e56:	82 81       	ldd	r24, Z+2	; 0x02
    2e58:	93 81       	ldd	r25, Z+3	; 0x03
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	40 e2       	ldi	r20, 0x20	; 32
    2e60:	51 e4       	ldi	r21, 0x41	; 65
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	8e 01       	movw	r16, r28
    2e6c:	0d 59       	subi	r16, 0x9D	; 157
    2e6e:	1e 4f       	sbci	r17, 0xFE	; 254
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	f8 01       	movw	r30, r16
    2e7e:	91 83       	std	Z+1, r25	; 0x01
    2e80:	80 83       	st	Z, r24
    2e82:	1f c0       	rjmp	.+62     	; 0x2ec2 <main+0xf44>
    2e84:	fe 01       	movw	r30, r28
    2e86:	ef 59       	subi	r30, 0x9F	; 159
    2e88:	fe 4f       	sbci	r31, 0xFE	; 254
    2e8a:	80 e9       	ldi	r24, 0x90	; 144
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	91 83       	std	Z+1, r25	; 0x01
    2e90:	80 83       	st	Z, r24
    2e92:	fe 01       	movw	r30, r28
    2e94:	ef 59       	subi	r30, 0x9F	; 159
    2e96:	fe 4f       	sbci	r31, 0xFE	; 254
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	f1 f7       	brne	.-4      	; 0x2e9c <main+0xf1e>
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ef 59       	subi	r30, 0x9F	; 159
    2ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eaa:	de 01       	movw	r26, r28
    2eac:	ad 59       	subi	r26, 0x9D	; 157
    2eae:	be 4f       	sbci	r27, 0xFE	; 254
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	ed 59       	subi	r30, 0x9D	; 157
    2eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb6:	80 81       	ld	r24, Z
    2eb8:	91 81       	ldd	r25, Z+1	; 0x01
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	11 96       	adiw	r26, 0x01	; 1
    2ebe:	9c 93       	st	X, r25
    2ec0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ed 59       	subi	r30, 0x9D	; 157
    2ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	00 97       	sbiw	r24, 0x00	; 0
    2ece:	d1 f6       	brne	.-76     	; 0x2e84 <main+0xf06>
    2ed0:	0c 94 47 22 	jmp	0x448e	; 0x448e <main+0x2510>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed4:	8e 01       	movw	r16, r28
    2ed6:	0d 59       	subi	r16, 0x9D	; 157
    2ed8:	1e 4f       	sbci	r17, 0xFE	; 254
    2eda:	fe 01       	movw	r30, r28
    2edc:	eb 59       	subi	r30, 0x9B	; 155
    2ede:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee0:	60 81       	ld	r22, Z
    2ee2:	71 81       	ldd	r23, Z+1	; 0x01
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	f8 01       	movw	r30, r16
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	80 83       	st	Z, r24
    2ef6:	de 01       	movw	r26, r28
    2ef8:	a1 5a       	subi	r26, 0xA1	; 161
    2efa:	be 4f       	sbci	r27, 0xFE	; 254
    2efc:	fe 01       	movw	r30, r28
    2efe:	ed 59       	subi	r30, 0x9D	; 157
    2f00:	fe 4f       	sbci	r31, 0xFE	; 254
    2f02:	80 81       	ld	r24, Z
    2f04:	91 81       	ldd	r25, Z+1	; 0x01
    2f06:	11 96       	adiw	r26, 0x01	; 1
    2f08:	9c 93       	st	X, r25
    2f0a:	8e 93       	st	-X, r24
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e1 5a       	subi	r30, 0xA1	; 161
    2f10:	fe 4f       	sbci	r31, 0xFE	; 254
    2f12:	80 81       	ld	r24, Z
    2f14:	91 81       	ldd	r25, Z+1	; 0x01
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	f1 f7       	brne	.-4      	; 0x2f16 <main+0xf98>
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e1 5a       	subi	r30, 0xA1	; 161
    2f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
    2f24:	0c 94 47 22 	jmp	0x448e	; 0x448e <main+0x2510>
			_delay_ms(1000);
		}

		while(login_mode == NO_MODE)
		{
			if (block_mode_flag == TRUE)
    2f28:	fe 01       	movw	r30, r28
    2f2a:	ee 51       	subi	r30, 0x1E	; 30
    2f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2e:	80 81       	ld	r24, Z
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	09 f0       	breq	.+2      	; 0x2f36 <main+0xfb8>
    2f34:	d5 c0       	rjmp	.+426    	; 0x30e0 <main+0x1162>
			{
				LCD_CLEAR_SCREEN();
    2f36:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
				LCD_WriteString("login blocked");
    2f3a:	85 ee       	ldi	r24, 0xE5	; 229
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
				LCD_MOVE_CURSOR(2,1);
    2f42:	82 e0       	ldi	r24, 0x02	; 2
    2f44:	61 e0       	ldi	r22, 0x01	; 1
    2f46:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
				LCD_WriteString("wait 5 seconds");
    2f4a:	83 ef       	ldi	r24, 0xF3	; 243
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
				LED_TurnOn(BLOCK_LED_PORT, BLOCK_LED_PIN);
    2f52:	82 e0       	ldi	r24, 0x02	; 2
    2f54:	67 e0       	ldi	r22, 0x07	; 7
    2f56:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LED_TurnOn>
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	e5 5a       	subi	r30, 0xA5	; 165
    2f5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e4       	ldi	r25, 0x40	; 64
    2f64:	ac e9       	ldi	r26, 0x9C	; 156
    2f66:	b5 e4       	ldi	r27, 0x45	; 69
    2f68:	80 83       	st	Z, r24
    2f6a:	91 83       	std	Z+1, r25	; 0x01
    2f6c:	a2 83       	std	Z+2, r26	; 0x02
    2f6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	8e 01       	movw	r16, r28
    2f72:	09 5a       	subi	r16, 0xA9	; 169
    2f74:	1e 4f       	sbci	r17, 0xFE	; 254
    2f76:	fe 01       	movw	r30, r28
    2f78:	e5 5a       	subi	r30, 0xA5	; 165
    2f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7c:	60 81       	ld	r22, Z
    2f7e:	71 81       	ldd	r23, Z+1	; 0x01
    2f80:	82 81       	ldd	r24, Z+2	; 0x02
    2f82:	93 81       	ldd	r25, Z+3	; 0x03
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	4a e7       	ldi	r20, 0x7A	; 122
    2f8a:	55 e4       	ldi	r21, 0x45	; 69
    2f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	f8 01       	movw	r30, r16
    2f96:	80 83       	st	Z, r24
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	a2 83       	std	Z+2, r26	; 0x02
    2f9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e9 5a       	subi	r30, 0xA9	; 169
    2fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa4:	60 81       	ld	r22, Z
    2fa6:	71 81       	ldd	r23, Z+1	; 0x01
    2fa8:	82 81       	ldd	r24, Z+2	; 0x02
    2faa:	93 81       	ldd	r25, Z+3	; 0x03
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e8       	ldi	r20, 0x80	; 128
    2fb2:	5f e3       	ldi	r21, 0x3F	; 63
    2fb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb8:	88 23       	and	r24, r24
    2fba:	44 f4       	brge	.+16     	; 0x2fcc <main+0x104e>
		__ticks = 1;
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	eb 5a       	subi	r30, 0xAB	; 171
    2fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
    2fca:	64 c0       	rjmp	.+200    	; 0x3094 <main+0x1116>
	else if (__tmp > 65535)
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e9 5a       	subi	r30, 0xA9	; 169
    2fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	3f ef       	ldi	r19, 0xFF	; 255
    2fde:	4f e7       	ldi	r20, 0x7F	; 127
    2fe0:	57 e4       	ldi	r21, 0x47	; 71
    2fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe6:	18 16       	cp	r1, r24
    2fe8:	0c f0       	brlt	.+2      	; 0x2fec <main+0x106e>
    2fea:	43 c0       	rjmp	.+134    	; 0x3072 <main+0x10f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fec:	fe 01       	movw	r30, r28
    2fee:	e5 5a       	subi	r30, 0xA5	; 165
    2ff0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff2:	60 81       	ld	r22, Z
    2ff4:	71 81       	ldd	r23, Z+1	; 0x01
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e2       	ldi	r20, 0x20	; 32
    3000:	51 e4       	ldi	r21, 0x41	; 65
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	8e 01       	movw	r16, r28
    300c:	0b 5a       	subi	r16, 0xAB	; 171
    300e:	1e 4f       	sbci	r17, 0xFE	; 254
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	f8 01       	movw	r30, r16
    301e:	91 83       	std	Z+1, r25	; 0x01
    3020:	80 83       	st	Z, r24
    3022:	1f c0       	rjmp	.+62     	; 0x3062 <main+0x10e4>
    3024:	fe 01       	movw	r30, r28
    3026:	ed 5a       	subi	r30, 0xAD	; 173
    3028:	fe 4f       	sbci	r31, 0xFE	; 254
    302a:	80 e9       	ldi	r24, 0x90	; 144
    302c:	91 e0       	ldi	r25, 0x01	; 1
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
    3032:	fe 01       	movw	r30, r28
    3034:	ed 5a       	subi	r30, 0xAD	; 173
    3036:	fe 4f       	sbci	r31, 0xFE	; 254
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <main+0x10be>
    3040:	fe 01       	movw	r30, r28
    3042:	ed 5a       	subi	r30, 0xAD	; 173
    3044:	fe 4f       	sbci	r31, 0xFE	; 254
    3046:	91 83       	std	Z+1, r25	; 0x01
    3048:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304a:	de 01       	movw	r26, r28
    304c:	ab 5a       	subi	r26, 0xAB	; 171
    304e:	be 4f       	sbci	r27, 0xFE	; 254
    3050:	fe 01       	movw	r30, r28
    3052:	eb 5a       	subi	r30, 0xAB	; 171
    3054:	fe 4f       	sbci	r31, 0xFE	; 254
    3056:	80 81       	ld	r24, Z
    3058:	91 81       	ldd	r25, Z+1	; 0x01
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	11 96       	adiw	r26, 0x01	; 1
    305e:	9c 93       	st	X, r25
    3060:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3062:	fe 01       	movw	r30, r28
    3064:	eb 5a       	subi	r30, 0xAB	; 171
    3066:	fe 4f       	sbci	r31, 0xFE	; 254
    3068:	80 81       	ld	r24, Z
    306a:	91 81       	ldd	r25, Z+1	; 0x01
    306c:	00 97       	sbiw	r24, 0x00	; 0
    306e:	d1 f6       	brne	.-76     	; 0x3024 <main+0x10a6>
    3070:	27 c0       	rjmp	.+78     	; 0x30c0 <main+0x1142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3072:	8e 01       	movw	r16, r28
    3074:	0b 5a       	subi	r16, 0xAB	; 171
    3076:	1e 4f       	sbci	r17, 0xFE	; 254
    3078:	fe 01       	movw	r30, r28
    307a:	e9 5a       	subi	r30, 0xA9	; 169
    307c:	fe 4f       	sbci	r31, 0xFE	; 254
    307e:	60 81       	ld	r22, Z
    3080:	71 81       	ldd	r23, Z+1	; 0x01
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	93 81       	ldd	r25, Z+3	; 0x03
    3086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	f8 01       	movw	r30, r16
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	80 83       	st	Z, r24
    3094:	de 01       	movw	r26, r28
    3096:	af 5a       	subi	r26, 0xAF	; 175
    3098:	be 4f       	sbci	r27, 0xFE	; 254
    309a:	fe 01       	movw	r30, r28
    309c:	eb 5a       	subi	r30, 0xAB	; 171
    309e:	fe 4f       	sbci	r31, 0xFE	; 254
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	8d 93       	st	X+, r24
    30a6:	9c 93       	st	X, r25
    30a8:	fe 01       	movw	r30, r28
    30aa:	ef 5a       	subi	r30, 0xAF	; 175
    30ac:	fe 4f       	sbci	r31, 0xFE	; 254
    30ae:	80 81       	ld	r24, Z
    30b0:	91 81       	ldd	r25, Z+1	; 0x01
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	f1 f7       	brne	.-4      	; 0x30b2 <main+0x1134>
    30b6:	fe 01       	movw	r30, r28
    30b8:	ef 5a       	subi	r30, 0xAF	; 175
    30ba:	fe 4f       	sbci	r31, 0xFE	; 254
    30bc:	91 83       	std	Z+1, r25	; 0x01
    30be:	80 83       	st	Z, r24
				_delay_ms(BLOCK_MODE_TIME);

				pass_tries_count = 0;
    30c0:	fe 01       	movw	r30, r28
    30c2:	e1 52       	subi	r30, 0x21	; 33
    30c4:	fe 4f       	sbci	r31, 0xFE	; 254
    30c6:	10 82       	st	Z, r1
				block_mode_flag = FALSE;
    30c8:	fe 01       	movw	r30, r28
    30ca:	ee 51       	subi	r30, 0x1E	; 30
    30cc:	fe 4f       	sbci	r31, 0xFE	; 254
    30ce:	10 82       	st	Z, r1
				LED_TurnOff(BLOCK_LED_PORT, BLOCK_LED_PIN);
    30d0:	82 e0       	ldi	r24, 0x02	; 2
    30d2:	67 e0       	ldi	r22, 0x07	; 7
    30d4:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <LED_TurnOff>
				block_mode_flag = FALSE;
    30d8:	fe 01       	movw	r30, r28
    30da:	ee 51       	subi	r30, 0x1E	; 30
    30dc:	fe 4f       	sbci	r31, 0xFE	; 254
    30de:	10 82       	st	Z, r1
			}
			LCD_CLEAR_SCREEN();
    30e0:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
			LCD_WriteString("select mode : ");
    30e4:	82 e0       	ldi	r24, 0x02	; 2
    30e6:	91 e0       	ldi	r25, 0x01	; 1
    30e8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
			LCD_MOVE_CURSOR(2,1);
    30ec:	82 e0       	ldi	r24, 0x02	; 2
    30ee:	61 e0       	ldi	r22, 0x01	; 1
    30f0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
			LCD_WriteString("0:Admin 1:Guest");
    30f4:	81 e1       	ldi	r24, 0x11	; 17
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    30fc:	06 c0       	rjmp	.+12     	; 0x310a <main+0x118c>
			while (key_pressed== NOT_PRESSED)
			{
				key_pressed = Keypad_GetPressedKey();
    30fe:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <Keypad_GetPressedKey>
    3102:	fe 01       	movw	r30, r28
    3104:	ef 51       	subi	r30, 0x1F	; 31
    3106:	fe 4f       	sbci	r31, 0xFE	; 254
    3108:	80 83       	st	Z, r24
			}
			LCD_CLEAR_SCREEN();
			LCD_WriteString("select mode : ");
			LCD_MOVE_CURSOR(2,1);
			LCD_WriteString("0:Admin 1:Guest");
			while (key_pressed== NOT_PRESSED)
    310a:	fe 01       	movw	r30, r28
    310c:	ef 51       	subi	r30, 0x1F	; 31
    310e:	fe 4f       	sbci	r31, 0xFE	; 254
    3110:	80 81       	ld	r24, Z
    3112:	8f 3f       	cpi	r24, 0xFF	; 255
    3114:	a1 f3       	breq	.-24     	; 0x30fe <main+0x1180>
			{
				key_pressed = Keypad_GetPressedKey();
			}
			if (key_pressed != CHECK_ADMIN_MODE && key_pressed != CHECK_GUEST_MODE)
    3116:	fe 01       	movw	r30, r28
    3118:	ef 51       	subi	r30, 0x1F	; 31
    311a:	fe 4f       	sbci	r31, 0xFE	; 254
    311c:	80 81       	ld	r24, Z
    311e:	80 33       	cpi	r24, 0x30	; 48
    3120:	09 f4       	brne	.+2      	; 0x3124 <main+0x11a6>
    3122:	c9 c0       	rjmp	.+402    	; 0x32b6 <main+0x1338>
    3124:	fe 01       	movw	r30, r28
    3126:	ef 51       	subi	r30, 0x1F	; 31
    3128:	fe 4f       	sbci	r31, 0xFE	; 254
    312a:	80 81       	ld	r24, Z
    312c:	81 33       	cpi	r24, 0x31	; 49
    312e:	09 f4       	brne	.+2      	; 0x3132 <main+0x11b4>
    3130:	c2 c0       	rjmp	.+388    	; 0x32b6 <main+0x1338>
			{
				LCD_CLEAR_SCREEN();
    3132:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
				LCD_WriteString("wrong output");
    3136:	81 e2       	ldi	r24, 0x21	; 33
    3138:	91 e0       	ldi	r25, 0x01	; 1
    313a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
				key_pressed = NOT_PRESSED;
    313e:	fe 01       	movw	r30, r28
    3140:	ef 51       	subi	r30, 0x1F	; 31
    3142:	fe 4f       	sbci	r31, 0xFE	; 254
    3144:	8f ef       	ldi	r24, 0xFF	; 255
    3146:	80 83       	st	Z, r24
    3148:	fe 01       	movw	r30, r28
    314a:	e3 5b       	subi	r30, 0xB3	; 179
    314c:	fe 4f       	sbci	r31, 0xFE	; 254
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	aa e7       	ldi	r26, 0x7A	; 122
    3154:	b4 e4       	ldi	r27, 0x44	; 68
    3156:	80 83       	st	Z, r24
    3158:	91 83       	std	Z+1, r25	; 0x01
    315a:	a2 83       	std	Z+2, r26	; 0x02
    315c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315e:	8e 01       	movw	r16, r28
    3160:	07 5b       	subi	r16, 0xB7	; 183
    3162:	1e 4f       	sbci	r17, 0xFE	; 254
    3164:	fe 01       	movw	r30, r28
    3166:	e3 5b       	subi	r30, 0xB3	; 179
    3168:	fe 4f       	sbci	r31, 0xFE	; 254
    316a:	60 81       	ld	r22, Z
    316c:	71 81       	ldd	r23, Z+1	; 0x01
    316e:	82 81       	ldd	r24, Z+2	; 0x02
    3170:	93 81       	ldd	r25, Z+3	; 0x03
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	4a e7       	ldi	r20, 0x7A	; 122
    3178:	55 e4       	ldi	r21, 0x45	; 69
    317a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	f8 01       	movw	r30, r16
    3184:	80 83       	st	Z, r24
    3186:	91 83       	std	Z+1, r25	; 0x01
    3188:	a2 83       	std	Z+2, r26	; 0x02
    318a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    318c:	fe 01       	movw	r30, r28
    318e:	e7 5b       	subi	r30, 0xB7	; 183
    3190:	fe 4f       	sbci	r31, 0xFE	; 254
    3192:	60 81       	ld	r22, Z
    3194:	71 81       	ldd	r23, Z+1	; 0x01
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a6:	88 23       	and	r24, r24
    31a8:	44 f4       	brge	.+16     	; 0x31ba <main+0x123c>
		__ticks = 1;
    31aa:	fe 01       	movw	r30, r28
    31ac:	e9 5b       	subi	r30, 0xB9	; 185
    31ae:	fe 4f       	sbci	r31, 0xFE	; 254
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	91 83       	std	Z+1, r25	; 0x01
    31b6:	80 83       	st	Z, r24
    31b8:	65 c0       	rjmp	.+202    	; 0x3284 <main+0x1306>
	else if (__tmp > 65535)
    31ba:	fe 01       	movw	r30, r28
    31bc:	e7 5b       	subi	r30, 0xB7	; 183
    31be:	fe 4f       	sbci	r31, 0xFE	; 254
    31c0:	60 81       	ld	r22, Z
    31c2:	71 81       	ldd	r23, Z+1	; 0x01
    31c4:	82 81       	ldd	r24, Z+2	; 0x02
    31c6:	93 81       	ldd	r25, Z+3	; 0x03
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	3f ef       	ldi	r19, 0xFF	; 255
    31cc:	4f e7       	ldi	r20, 0x7F	; 127
    31ce:	57 e4       	ldi	r21, 0x47	; 71
    31d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d4:	18 16       	cp	r1, r24
    31d6:	0c f0       	brlt	.+2      	; 0x31da <main+0x125c>
    31d8:	44 c0       	rjmp	.+136    	; 0x3262 <main+0x12e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31da:	fe 01       	movw	r30, r28
    31dc:	e3 5b       	subi	r30, 0xB3	; 179
    31de:	fe 4f       	sbci	r31, 0xFE	; 254
    31e0:	60 81       	ld	r22, Z
    31e2:	71 81       	ldd	r23, Z+1	; 0x01
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	93 81       	ldd	r25, Z+3	; 0x03
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e2       	ldi	r20, 0x20	; 32
    31ee:	51 e4       	ldi	r21, 0x41	; 65
    31f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	8e 01       	movw	r16, r28
    31fa:	09 5b       	subi	r16, 0xB9	; 185
    31fc:	1e 4f       	sbci	r17, 0xFE	; 254
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	f8 01       	movw	r30, r16
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24
    3210:	1f c0       	rjmp	.+62     	; 0x3250 <main+0x12d2>
    3212:	fe 01       	movw	r30, r28
    3214:	eb 5b       	subi	r30, 0xBB	; 187
    3216:	fe 4f       	sbci	r31, 0xFE	; 254
    3218:	80 e9       	ldi	r24, 0x90	; 144
    321a:	91 e0       	ldi	r25, 0x01	; 1
    321c:	91 83       	std	Z+1, r25	; 0x01
    321e:	80 83       	st	Z, r24
    3220:	fe 01       	movw	r30, r28
    3222:	eb 5b       	subi	r30, 0xBB	; 187
    3224:	fe 4f       	sbci	r31, 0xFE	; 254
    3226:	80 81       	ld	r24, Z
    3228:	91 81       	ldd	r25, Z+1	; 0x01
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	f1 f7       	brne	.-4      	; 0x322a <main+0x12ac>
    322e:	fe 01       	movw	r30, r28
    3230:	eb 5b       	subi	r30, 0xBB	; 187
    3232:	fe 4f       	sbci	r31, 0xFE	; 254
    3234:	91 83       	std	Z+1, r25	; 0x01
    3236:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3238:	de 01       	movw	r26, r28
    323a:	a9 5b       	subi	r26, 0xB9	; 185
    323c:	be 4f       	sbci	r27, 0xFE	; 254
    323e:	fe 01       	movw	r30, r28
    3240:	e9 5b       	subi	r30, 0xB9	; 185
    3242:	fe 4f       	sbci	r31, 0xFE	; 254
    3244:	80 81       	ld	r24, Z
    3246:	91 81       	ldd	r25, Z+1	; 0x01
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	11 96       	adiw	r26, 0x01	; 1
    324c:	9c 93       	st	X, r25
    324e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3250:	fe 01       	movw	r30, r28
    3252:	e9 5b       	subi	r30, 0xB9	; 185
    3254:	fe 4f       	sbci	r31, 0xFE	; 254
    3256:	80 81       	ld	r24, Z
    3258:	91 81       	ldd	r25, Z+1	; 0x01
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	d1 f6       	brne	.-76     	; 0x3212 <main+0x1294>
    325e:	0c 94 47 22 	jmp	0x448e	; 0x448e <main+0x2510>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	8e 01       	movw	r16, r28
    3264:	09 5b       	subi	r16, 0xB9	; 185
    3266:	1e 4f       	sbci	r17, 0xFE	; 254
    3268:	fe 01       	movw	r30, r28
    326a:	e7 5b       	subi	r30, 0xB7	; 183
    326c:	fe 4f       	sbci	r31, 0xFE	; 254
    326e:	60 81       	ld	r22, Z
    3270:	71 81       	ldd	r23, Z+1	; 0x01
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	f8 01       	movw	r30, r16
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
    3284:	de 01       	movw	r26, r28
    3286:	ad 5b       	subi	r26, 0xBD	; 189
    3288:	be 4f       	sbci	r27, 0xFE	; 254
    328a:	fe 01       	movw	r30, r28
    328c:	e9 5b       	subi	r30, 0xB9	; 185
    328e:	fe 4f       	sbci	r31, 0xFE	; 254
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	11 96       	adiw	r26, 0x01	; 1
    3296:	9c 93       	st	X, r25
    3298:	8e 93       	st	-X, r24
    329a:	fe 01       	movw	r30, r28
    329c:	ed 5b       	subi	r30, 0xBD	; 189
    329e:	fe 4f       	sbci	r31, 0xFE	; 254
    32a0:	80 81       	ld	r24, Z
    32a2:	91 81       	ldd	r25, Z+1	; 0x01
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <main+0x1326>
    32a8:	fe 01       	movw	r30, r28
    32aa:	ed 5b       	subi	r30, 0xBD	; 189
    32ac:	fe 4f       	sbci	r31, 0xFE	; 254
    32ae:	91 83       	std	Z+1, r25	; 0x01
    32b0:	80 83       	st	Z, r24
    32b2:	0c 94 47 22 	jmp	0x448e	; 0x448e <main+0x2510>
				_delay_ms(1000);
				continue;
			}

			u8 pass_counter = 0;
    32b6:	fe 01       	movw	r30, r28
    32b8:	e3 52       	subi	r30, 0x23	; 35
    32ba:	fe 4f       	sbci	r31, 0xFE	; 254
    32bc:	10 82       	st	Z, r1
			u8 pass[PASS_SIZE] = {NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
    32be:	fe 01       	movw	r30, r28
    32c0:	e5 51       	subi	r30, 0x15	; 21
    32c2:	fe 4f       	sbci	r31, 0xFE	; 254
    32c4:	8f ef       	ldi	r24, 0xFF	; 255
    32c6:	80 83       	st	Z, r24
    32c8:	fe 01       	movw	r30, r28
    32ca:	e5 51       	subi	r30, 0x15	; 21
    32cc:	fe 4f       	sbci	r31, 0xFE	; 254
    32ce:	8f ef       	ldi	r24, 0xFF	; 255
    32d0:	81 83       	std	Z+1, r24	; 0x01
    32d2:	fe 01       	movw	r30, r28
    32d4:	e5 51       	subi	r30, 0x15	; 21
    32d6:	fe 4f       	sbci	r31, 0xFE	; 254
    32d8:	8f ef       	ldi	r24, 0xFF	; 255
    32da:	82 83       	std	Z+2, r24	; 0x02
    32dc:	fe 01       	movw	r30, r28
    32de:	e5 51       	subi	r30, 0x15	; 21
    32e0:	fe 4f       	sbci	r31, 0xFE	; 254
    32e2:	8f ef       	ldi	r24, 0xFF	; 255
    32e4:	83 83       	std	Z+3, r24	; 0x03
			u8 stored_pass[PASS_SIZE] = {NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
    32e6:	fe 01       	movw	r30, r28
    32e8:	e1 51       	subi	r30, 0x11	; 17
    32ea:	fe 4f       	sbci	r31, 0xFE	; 254
    32ec:	8f ef       	ldi	r24, 0xFF	; 255
    32ee:	80 83       	st	Z, r24
    32f0:	fe 01       	movw	r30, r28
    32f2:	e1 51       	subi	r30, 0x11	; 17
    32f4:	fe 4f       	sbci	r31, 0xFE	; 254
    32f6:	8f ef       	ldi	r24, 0xFF	; 255
    32f8:	81 83       	std	Z+1, r24	; 0x01
    32fa:	fe 01       	movw	r30, r28
    32fc:	e1 51       	subi	r30, 0x11	; 17
    32fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3300:	8f ef       	ldi	r24, 0xFF	; 255
    3302:	82 83       	std	Z+2, r24	; 0x02
    3304:	fe 01       	movw	r30, r28
    3306:	e1 51       	subi	r30, 0x11	; 17
    3308:	fe 4f       	sbci	r31, 0xFE	; 254
    330a:	8f ef       	ldi	r24, 0xFF	; 255
    330c:	83 83       	std	Z+3, r24	; 0x03

			switch (key_pressed)
    330e:	fe 01       	movw	r30, r28
    3310:	ef 51       	subi	r30, 0x1F	; 31
    3312:	fe 4f       	sbci	r31, 0xFE	; 254
    3314:	80 81       	ld	r24, Z
    3316:	28 2f       	mov	r18, r24
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	cb 50       	subi	r28, 0x0B	; 11
    331c:	de 4f       	sbci	r29, 0xFE	; 254
    331e:	39 83       	std	Y+1, r19	; 0x01
    3320:	28 83       	st	Y, r18
    3322:	c5 5f       	subi	r28, 0xF5	; 245
    3324:	d1 40       	sbci	r29, 0x01	; 1
    3326:	cb 50       	subi	r28, 0x0B	; 11
    3328:	de 4f       	sbci	r29, 0xFE	; 254
    332a:	88 81       	ld	r24, Y
    332c:	99 81       	ldd	r25, Y+1	; 0x01
    332e:	c5 5f       	subi	r28, 0xF5	; 245
    3330:	d1 40       	sbci	r29, 0x01	; 1
    3332:	80 33       	cpi	r24, 0x30	; 48
    3334:	91 05       	cpc	r25, r1
    3336:	09 f4       	brne	.+2      	; 0x333a <main+0x13bc>
    3338:	54 c4       	rjmp	.+2216   	; 0x3be2 <main+0x1c64>
    333a:	cb 50       	subi	r28, 0x0B	; 11
    333c:	de 4f       	sbci	r29, 0xFE	; 254
    333e:	e8 81       	ld	r30, Y
    3340:	f9 81       	ldd	r31, Y+1	; 0x01
    3342:	c5 5f       	subi	r28, 0xF5	; 245
    3344:	d1 40       	sbci	r29, 0x01	; 1
    3346:	e1 33       	cpi	r30, 0x31	; 49
    3348:	f1 05       	cpc	r31, r1
    334a:	11 f4       	brne	.+4      	; 0x3350 <main+0x13d2>
    334c:	0c 94 40 22 	jmp	0x4480	; 0x4480 <main+0x2502>
    3350:	0c 94 47 22 	jmp	0x448e	; 0x448e <main+0x2510>
			{
			case CHECK_ADMIN_MODE:
				while (login_mode != ADMIN)
				{
					key_pressed = NOT_PRESSED;
    3354:	fe 01       	movw	r30, r28
    3356:	ef 51       	subi	r30, 0x1F	; 31
    3358:	fe 4f       	sbci	r31, 0xFE	; 254
    335a:	8f ef       	ldi	r24, 0xFF	; 255
    335c:	80 83       	st	Z, r24
					LCD_CLEAR_SCREEN();
    335e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
					LCD_WriteString("admin mode");
    3362:	8e e2       	ldi	r24, 0x2E	; 46
    3364:	91 e0       	ldi	r25, 0x01	; 1
    3366:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
					LCD_MOVE_CURSOR(2,1);
    336a:	82 e0       	ldi	r24, 0x02	; 2
    336c:	61 e0       	ldi	r22, 0x01	; 1
    336e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
					LCD_WriteString("enter pass:");
    3372:	89 e3       	ldi	r24, 0x39	; 57
    3374:	91 e0       	ldi	r25, 0x01	; 1
    3376:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    337a:	fe 01       	movw	r30, r28
    337c:	e1 5c       	subi	r30, 0xC1	; 193
    337e:	fe 4f       	sbci	r31, 0xFE	; 254
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	a8 e4       	ldi	r26, 0x48	; 72
    3386:	b3 e4       	ldi	r27, 0x43	; 67
    3388:	80 83       	st	Z, r24
    338a:	91 83       	std	Z+1, r25	; 0x01
    338c:	a2 83       	std	Z+2, r26	; 0x02
    338e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3390:	8e 01       	movw	r16, r28
    3392:	05 5c       	subi	r16, 0xC5	; 197
    3394:	1e 4f       	sbci	r17, 0xFE	; 254
    3396:	fe 01       	movw	r30, r28
    3398:	e1 5c       	subi	r30, 0xC1	; 193
    339a:	fe 4f       	sbci	r31, 0xFE	; 254
    339c:	60 81       	ld	r22, Z
    339e:	71 81       	ldd	r23, Z+1	; 0x01
    33a0:	82 81       	ldd	r24, Z+2	; 0x02
    33a2:	93 81       	ldd	r25, Z+3	; 0x03
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	4a e7       	ldi	r20, 0x7A	; 122
    33aa:	55 e4       	ldi	r21, 0x45	; 69
    33ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	f8 01       	movw	r30, r16
    33b6:	80 83       	st	Z, r24
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	a2 83       	std	Z+2, r26	; 0x02
    33bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33be:	fe 01       	movw	r30, r28
    33c0:	e5 5c       	subi	r30, 0xC5	; 197
    33c2:	fe 4f       	sbci	r31, 0xFE	; 254
    33c4:	60 81       	ld	r22, Z
    33c6:	71 81       	ldd	r23, Z+1	; 0x01
    33c8:	82 81       	ldd	r24, Z+2	; 0x02
    33ca:	93 81       	ldd	r25, Z+3	; 0x03
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	40 e8       	ldi	r20, 0x80	; 128
    33d2:	5f e3       	ldi	r21, 0x3F	; 63
    33d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d8:	88 23       	and	r24, r24
    33da:	44 f4       	brge	.+16     	; 0x33ec <main+0x146e>
		__ticks = 1;
    33dc:	fe 01       	movw	r30, r28
    33de:	e7 5c       	subi	r30, 0xC7	; 199
    33e0:	fe 4f       	sbci	r31, 0xFE	; 254
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	91 83       	std	Z+1, r25	; 0x01
    33e8:	80 83       	st	Z, r24
    33ea:	64 c0       	rjmp	.+200    	; 0x34b4 <main+0x1536>
	else if (__tmp > 65535)
    33ec:	fe 01       	movw	r30, r28
    33ee:	e5 5c       	subi	r30, 0xC5	; 197
    33f0:	fe 4f       	sbci	r31, 0xFE	; 254
    33f2:	60 81       	ld	r22, Z
    33f4:	71 81       	ldd	r23, Z+1	; 0x01
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	93 81       	ldd	r25, Z+3	; 0x03
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	3f ef       	ldi	r19, 0xFF	; 255
    33fe:	4f e7       	ldi	r20, 0x7F	; 127
    3400:	57 e4       	ldi	r21, 0x47	; 71
    3402:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3406:	18 16       	cp	r1, r24
    3408:	0c f0       	brlt	.+2      	; 0x340c <main+0x148e>
    340a:	43 c0       	rjmp	.+134    	; 0x3492 <main+0x1514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340c:	fe 01       	movw	r30, r28
    340e:	e1 5c       	subi	r30, 0xC1	; 193
    3410:	fe 4f       	sbci	r31, 0xFE	; 254
    3412:	60 81       	ld	r22, Z
    3414:	71 81       	ldd	r23, Z+1	; 0x01
    3416:	82 81       	ldd	r24, Z+2	; 0x02
    3418:	93 81       	ldd	r25, Z+3	; 0x03
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e2       	ldi	r20, 0x20	; 32
    3420:	51 e4       	ldi	r21, 0x41	; 65
    3422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	8e 01       	movw	r16, r28
    342c:	07 5c       	subi	r16, 0xC7	; 199
    342e:	1e 4f       	sbci	r17, 0xFE	; 254
    3430:	bc 01       	movw	r22, r24
    3432:	cd 01       	movw	r24, r26
    3434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	f8 01       	movw	r30, r16
    343e:	91 83       	std	Z+1, r25	; 0x01
    3440:	80 83       	st	Z, r24
    3442:	1f c0       	rjmp	.+62     	; 0x3482 <main+0x1504>
    3444:	fe 01       	movw	r30, r28
    3446:	e9 5c       	subi	r30, 0xC9	; 201
    3448:	fe 4f       	sbci	r31, 0xFE	; 254
    344a:	80 e9       	ldi	r24, 0x90	; 144
    344c:	91 e0       	ldi	r25, 0x01	; 1
    344e:	91 83       	std	Z+1, r25	; 0x01
    3450:	80 83       	st	Z, r24
    3452:	fe 01       	movw	r30, r28
    3454:	e9 5c       	subi	r30, 0xC9	; 201
    3456:	fe 4f       	sbci	r31, 0xFE	; 254
    3458:	80 81       	ld	r24, Z
    345a:	91 81       	ldd	r25, Z+1	; 0x01
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <main+0x14de>
    3460:	fe 01       	movw	r30, r28
    3462:	e9 5c       	subi	r30, 0xC9	; 201
    3464:	fe 4f       	sbci	r31, 0xFE	; 254
    3466:	91 83       	std	Z+1, r25	; 0x01
    3468:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346a:	de 01       	movw	r26, r28
    346c:	a7 5c       	subi	r26, 0xC7	; 199
    346e:	be 4f       	sbci	r27, 0xFE	; 254
    3470:	fe 01       	movw	r30, r28
    3472:	e7 5c       	subi	r30, 0xC7	; 199
    3474:	fe 4f       	sbci	r31, 0xFE	; 254
    3476:	80 81       	ld	r24, Z
    3478:	91 81       	ldd	r25, Z+1	; 0x01
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	11 96       	adiw	r26, 0x01	; 1
    347e:	9c 93       	st	X, r25
    3480:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3482:	fe 01       	movw	r30, r28
    3484:	e7 5c       	subi	r30, 0xC7	; 199
    3486:	fe 4f       	sbci	r31, 0xFE	; 254
    3488:	80 81       	ld	r24, Z
    348a:	91 81       	ldd	r25, Z+1	; 0x01
    348c:	00 97       	sbiw	r24, 0x00	; 0
    348e:	d1 f6       	brne	.-76     	; 0x3444 <main+0x14c6>
    3490:	28 c0       	rjmp	.+80     	; 0x34e2 <main+0x1564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3492:	8e 01       	movw	r16, r28
    3494:	07 5c       	subi	r16, 0xC7	; 199
    3496:	1e 4f       	sbci	r17, 0xFE	; 254
    3498:	fe 01       	movw	r30, r28
    349a:	e5 5c       	subi	r30, 0xC5	; 197
    349c:	fe 4f       	sbci	r31, 0xFE	; 254
    349e:	60 81       	ld	r22, Z
    34a0:	71 81       	ldd	r23, Z+1	; 0x01
    34a2:	82 81       	ldd	r24, Z+2	; 0x02
    34a4:	93 81       	ldd	r25, Z+3	; 0x03
    34a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	f8 01       	movw	r30, r16
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	80 83       	st	Z, r24
    34b4:	de 01       	movw	r26, r28
    34b6:	ab 5c       	subi	r26, 0xCB	; 203
    34b8:	be 4f       	sbci	r27, 0xFE	; 254
    34ba:	fe 01       	movw	r30, r28
    34bc:	e7 5c       	subi	r30, 0xC7	; 199
    34be:	fe 4f       	sbci	r31, 0xFE	; 254
    34c0:	80 81       	ld	r24, Z
    34c2:	91 81       	ldd	r25, Z+1	; 0x01
    34c4:	11 96       	adiw	r26, 0x01	; 1
    34c6:	9c 93       	st	X, r25
    34c8:	8e 93       	st	-X, r24
    34ca:	fe 01       	movw	r30, r28
    34cc:	eb 5c       	subi	r30, 0xCB	; 203
    34ce:	fe 4f       	sbci	r31, 0xFE	; 254
    34d0:	80 81       	ld	r24, Z
    34d2:	91 81       	ldd	r25, Z+1	; 0x01
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <main+0x1556>
    34d8:	fe 01       	movw	r30, r28
    34da:	eb 5c       	subi	r30, 0xCB	; 203
    34dc:	fe 4f       	sbci	r31, 0xFE	; 254
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	80 83       	st	Z, r24
					_delay_ms(200);
					pass_counter = 0;
    34e2:	fe 01       	movw	r30, r28
    34e4:	e3 52       	subi	r30, 0x23	; 35
    34e6:	fe 4f       	sbci	r31, 0xFE	; 254
    34e8:	10 82       	st	Z, r1
    34ea:	a4 c1       	rjmp	.+840    	; 0x3834 <main+0x18b6>

					while (pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)
						{
							key_pressed = Keypad_GetPressedKey();
    34ec:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <Keypad_GetPressedKey>
    34f0:	fe 01       	movw	r30, r28
    34f2:	ef 51       	subi	r30, 0x1F	; 31
    34f4:	fe 4f       	sbci	r31, 0xFE	; 254
    34f6:	80 83       	st	Z, r24
					_delay_ms(200);
					pass_counter = 0;

					while (pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)
    34f8:	fe 01       	movw	r30, r28
    34fa:	ef 51       	subi	r30, 0x1F	; 31
    34fc:	fe 4f       	sbci	r31, 0xFE	; 254
    34fe:	80 81       	ld	r24, Z
    3500:	8f 3f       	cpi	r24, 0xFF	; 255
    3502:	a1 f3       	breq	.-24     	; 0x34ec <main+0x156e>
						{
							key_pressed = Keypad_GetPressedKey();
						}
						pass[pass_counter] = key_pressed;
    3504:	fe 01       	movw	r30, r28
    3506:	e3 52       	subi	r30, 0x23	; 35
    3508:	fe 4f       	sbci	r31, 0xFE	; 254
    350a:	80 81       	ld	r24, Z
    350c:	28 2f       	mov	r18, r24
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	ce 01       	movw	r24, r28
    3512:	85 51       	subi	r24, 0x15	; 21
    3514:	9e 4f       	sbci	r25, 0xFE	; 254
    3516:	dc 01       	movw	r26, r24
    3518:	a2 0f       	add	r26, r18
    351a:	b3 1f       	adc	r27, r19
    351c:	fe 01       	movw	r30, r28
    351e:	ef 51       	subi	r30, 0x1F	; 31
    3520:	fe 4f       	sbci	r31, 0xFE	; 254
    3522:	80 81       	ld	r24, Z
    3524:	8c 93       	st	X, r24
						LCD_WriteChar(key_pressed);
    3526:	fe 01       	movw	r30, r28
    3528:	ef 51       	subi	r30, 0x1F	; 31
    352a:	fe 4f       	sbci	r31, 0xFE	; 254
    352c:	80 81       	ld	r24, Z
    352e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
    3532:	fe 01       	movw	r30, r28
    3534:	ef 5c       	subi	r30, 0xCF	; 207
    3536:	fe 4f       	sbci	r31, 0xFE	; 254
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	a8 e4       	ldi	r26, 0x48	; 72
    353e:	b3 e4       	ldi	r27, 0x43	; 67
    3540:	80 83       	st	Z, r24
    3542:	91 83       	std	Z+1, r25	; 0x01
    3544:	a2 83       	std	Z+2, r26	; 0x02
    3546:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3548:	8e 01       	movw	r16, r28
    354a:	03 5d       	subi	r16, 0xD3	; 211
    354c:	1e 4f       	sbci	r17, 0xFE	; 254
    354e:	fe 01       	movw	r30, r28
    3550:	ef 5c       	subi	r30, 0xCF	; 207
    3552:	fe 4f       	sbci	r31, 0xFE	; 254
    3554:	60 81       	ld	r22, Z
    3556:	71 81       	ldd	r23, Z+1	; 0x01
    3558:	82 81       	ldd	r24, Z+2	; 0x02
    355a:	93 81       	ldd	r25, Z+3	; 0x03
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	4a e7       	ldi	r20, 0x7A	; 122
    3562:	55 e4       	ldi	r21, 0x45	; 69
    3564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	f8 01       	movw	r30, r16
    356e:	80 83       	st	Z, r24
    3570:	91 83       	std	Z+1, r25	; 0x01
    3572:	a2 83       	std	Z+2, r26	; 0x02
    3574:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3576:	fe 01       	movw	r30, r28
    3578:	e3 5d       	subi	r30, 0xD3	; 211
    357a:	fe 4f       	sbci	r31, 0xFE	; 254
    357c:	60 81       	ld	r22, Z
    357e:	71 81       	ldd	r23, Z+1	; 0x01
    3580:	82 81       	ldd	r24, Z+2	; 0x02
    3582:	93 81       	ldd	r25, Z+3	; 0x03
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e8       	ldi	r20, 0x80	; 128
    358a:	5f e3       	ldi	r21, 0x3F	; 63
    358c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3590:	88 23       	and	r24, r24
    3592:	44 f4       	brge	.+16     	; 0x35a4 <main+0x1626>
		__ticks = 1;
    3594:	fe 01       	movw	r30, r28
    3596:	e5 5d       	subi	r30, 0xD5	; 213
    3598:	fe 4f       	sbci	r31, 0xFE	; 254
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	91 83       	std	Z+1, r25	; 0x01
    35a0:	80 83       	st	Z, r24
    35a2:	64 c0       	rjmp	.+200    	; 0x366c <main+0x16ee>
	else if (__tmp > 65535)
    35a4:	fe 01       	movw	r30, r28
    35a6:	e3 5d       	subi	r30, 0xD3	; 211
    35a8:	fe 4f       	sbci	r31, 0xFE	; 254
    35aa:	60 81       	ld	r22, Z
    35ac:	71 81       	ldd	r23, Z+1	; 0x01
    35ae:	82 81       	ldd	r24, Z+2	; 0x02
    35b0:	93 81       	ldd	r25, Z+3	; 0x03
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	3f ef       	ldi	r19, 0xFF	; 255
    35b6:	4f e7       	ldi	r20, 0x7F	; 127
    35b8:	57 e4       	ldi	r21, 0x47	; 71
    35ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35be:	18 16       	cp	r1, r24
    35c0:	0c f0       	brlt	.+2      	; 0x35c4 <main+0x1646>
    35c2:	43 c0       	rjmp	.+134    	; 0x364a <main+0x16cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c4:	fe 01       	movw	r30, r28
    35c6:	ef 5c       	subi	r30, 0xCF	; 207
    35c8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ca:	60 81       	ld	r22, Z
    35cc:	71 81       	ldd	r23, Z+1	; 0x01
    35ce:	82 81       	ldd	r24, Z+2	; 0x02
    35d0:	93 81       	ldd	r25, Z+3	; 0x03
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	40 e2       	ldi	r20, 0x20	; 32
    35d8:	51 e4       	ldi	r21, 0x41	; 65
    35da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	8e 01       	movw	r16, r28
    35e4:	05 5d       	subi	r16, 0xD5	; 213
    35e6:	1e 4f       	sbci	r17, 0xFE	; 254
    35e8:	bc 01       	movw	r22, r24
    35ea:	cd 01       	movw	r24, r26
    35ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	f8 01       	movw	r30, r16
    35f6:	91 83       	std	Z+1, r25	; 0x01
    35f8:	80 83       	st	Z, r24
    35fa:	1f c0       	rjmp	.+62     	; 0x363a <main+0x16bc>
    35fc:	fe 01       	movw	r30, r28
    35fe:	e7 5d       	subi	r30, 0xD7	; 215
    3600:	fe 4f       	sbci	r31, 0xFE	; 254
    3602:	80 e9       	ldi	r24, 0x90	; 144
    3604:	91 e0       	ldi	r25, 0x01	; 1
    3606:	91 83       	std	Z+1, r25	; 0x01
    3608:	80 83       	st	Z, r24
    360a:	fe 01       	movw	r30, r28
    360c:	e7 5d       	subi	r30, 0xD7	; 215
    360e:	fe 4f       	sbci	r31, 0xFE	; 254
    3610:	80 81       	ld	r24, Z
    3612:	91 81       	ldd	r25, Z+1	; 0x01
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <main+0x1696>
    3618:	fe 01       	movw	r30, r28
    361a:	e7 5d       	subi	r30, 0xD7	; 215
    361c:	fe 4f       	sbci	r31, 0xFE	; 254
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3622:	de 01       	movw	r26, r28
    3624:	a5 5d       	subi	r26, 0xD5	; 213
    3626:	be 4f       	sbci	r27, 0xFE	; 254
    3628:	fe 01       	movw	r30, r28
    362a:	e5 5d       	subi	r30, 0xD5	; 213
    362c:	fe 4f       	sbci	r31, 0xFE	; 254
    362e:	80 81       	ld	r24, Z
    3630:	91 81       	ldd	r25, Z+1	; 0x01
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	11 96       	adiw	r26, 0x01	; 1
    3636:	9c 93       	st	X, r25
    3638:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363a:	fe 01       	movw	r30, r28
    363c:	e5 5d       	subi	r30, 0xD5	; 213
    363e:	fe 4f       	sbci	r31, 0xFE	; 254
    3640:	80 81       	ld	r24, Z
    3642:	91 81       	ldd	r25, Z+1	; 0x01
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	d1 f6       	brne	.-76     	; 0x35fc <main+0x167e>
    3648:	27 c0       	rjmp	.+78     	; 0x3698 <main+0x171a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    364a:	8e 01       	movw	r16, r28
    364c:	05 5d       	subi	r16, 0xD5	; 213
    364e:	1e 4f       	sbci	r17, 0xFE	; 254
    3650:	fe 01       	movw	r30, r28
    3652:	e3 5d       	subi	r30, 0xD3	; 211
    3654:	fe 4f       	sbci	r31, 0xFE	; 254
    3656:	60 81       	ld	r22, Z
    3658:	71 81       	ldd	r23, Z+1	; 0x01
    365a:	82 81       	ldd	r24, Z+2	; 0x02
    365c:	93 81       	ldd	r25, Z+3	; 0x03
    365e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	f8 01       	movw	r30, r16
    3668:	91 83       	std	Z+1, r25	; 0x01
    366a:	80 83       	st	Z, r24
    366c:	de 01       	movw	r26, r28
    366e:	a9 5d       	subi	r26, 0xD9	; 217
    3670:	be 4f       	sbci	r27, 0xFE	; 254
    3672:	fe 01       	movw	r30, r28
    3674:	e5 5d       	subi	r30, 0xD5	; 213
    3676:	fe 4f       	sbci	r31, 0xFE	; 254
    3678:	80 81       	ld	r24, Z
    367a:	91 81       	ldd	r25, Z+1	; 0x01
    367c:	8d 93       	st	X+, r24
    367e:	9c 93       	st	X, r25
    3680:	fe 01       	movw	r30, r28
    3682:	e9 5d       	subi	r30, 0xD9	; 217
    3684:	fe 4f       	sbci	r31, 0xFE	; 254
    3686:	80 81       	ld	r24, Z
    3688:	91 81       	ldd	r25, Z+1	; 0x01
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	f1 f7       	brne	.-4      	; 0x368a <main+0x170c>
    368e:	fe 01       	movw	r30, r28
    3690:	e9 5d       	subi	r30, 0xD9	; 217
    3692:	fe 4f       	sbci	r31, 0xFE	; 254
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
						_delay_ms(CHARACTER_PREVIEW_TIME);
						LCD_MOVE_CURSOR(2,12+pass_counter);
    3698:	fe 01       	movw	r30, r28
    369a:	e3 52       	subi	r30, 0x23	; 35
    369c:	fe 4f       	sbci	r31, 0xFE	; 254
    369e:	80 81       	ld	r24, Z
    36a0:	98 2f       	mov	r25, r24
    36a2:	94 5f       	subi	r25, 0xF4	; 244
    36a4:	82 e0       	ldi	r24, 0x02	; 2
    36a6:	69 2f       	mov	r22, r25
    36a8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
						LCD_WriteChar(PASSWORD_SYMBOL);
    36ac:	8a e2       	ldi	r24, 0x2A	; 42
    36ae:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
    36b2:	fe 01       	movw	r30, r28
    36b4:	ed 5d       	subi	r30, 0xDD	; 221
    36b6:	fe 4f       	sbci	r31, 0xFE	; 254
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	a8 ec       	ldi	r26, 0xC8	; 200
    36be:	b2 e4       	ldi	r27, 0x42	; 66
    36c0:	80 83       	st	Z, r24
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	a2 83       	std	Z+2, r26	; 0x02
    36c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c8:	8e 01       	movw	r16, r28
    36ca:	01 5e       	subi	r16, 0xE1	; 225
    36cc:	1e 4f       	sbci	r17, 0xFE	; 254
    36ce:	fe 01       	movw	r30, r28
    36d0:	ed 5d       	subi	r30, 0xDD	; 221
    36d2:	fe 4f       	sbci	r31, 0xFE	; 254
    36d4:	60 81       	ld	r22, Z
    36d6:	71 81       	ldd	r23, Z+1	; 0x01
    36d8:	82 81       	ldd	r24, Z+2	; 0x02
    36da:	93 81       	ldd	r25, Z+3	; 0x03
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	4a e7       	ldi	r20, 0x7A	; 122
    36e2:	55 e4       	ldi	r21, 0x45	; 69
    36e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	f8 01       	movw	r30, r16
    36ee:	80 83       	st	Z, r24
    36f0:	91 83       	std	Z+1, r25	; 0x01
    36f2:	a2 83       	std	Z+2, r26	; 0x02
    36f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36f6:	fe 01       	movw	r30, r28
    36f8:	e1 5e       	subi	r30, 0xE1	; 225
    36fa:	fe 4f       	sbci	r31, 0xFE	; 254
    36fc:	60 81       	ld	r22, Z
    36fe:	71 81       	ldd	r23, Z+1	; 0x01
    3700:	82 81       	ldd	r24, Z+2	; 0x02
    3702:	93 81       	ldd	r25, Z+3	; 0x03
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e8       	ldi	r20, 0x80	; 128
    370a:	5f e3       	ldi	r21, 0x3F	; 63
    370c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3710:	88 23       	and	r24, r24
    3712:	44 f4       	brge	.+16     	; 0x3724 <main+0x17a6>
		__ticks = 1;
    3714:	fe 01       	movw	r30, r28
    3716:	e3 5e       	subi	r30, 0xE3	; 227
    3718:	fe 4f       	sbci	r31, 0xFE	; 254
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	64 c0       	rjmp	.+200    	; 0x37ec <main+0x186e>
	else if (__tmp > 65535)
    3724:	fe 01       	movw	r30, r28
    3726:	e1 5e       	subi	r30, 0xE1	; 225
    3728:	fe 4f       	sbci	r31, 0xFE	; 254
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	82 81       	ldd	r24, Z+2	; 0x02
    3730:	93 81       	ldd	r25, Z+3	; 0x03
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	3f ef       	ldi	r19, 0xFF	; 255
    3736:	4f e7       	ldi	r20, 0x7F	; 127
    3738:	57 e4       	ldi	r21, 0x47	; 71
    373a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    373e:	18 16       	cp	r1, r24
    3740:	0c f0       	brlt	.+2      	; 0x3744 <main+0x17c6>
    3742:	43 c0       	rjmp	.+134    	; 0x37ca <main+0x184c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3744:	fe 01       	movw	r30, r28
    3746:	ed 5d       	subi	r30, 0xDD	; 221
    3748:	fe 4f       	sbci	r31, 0xFE	; 254
    374a:	60 81       	ld	r22, Z
    374c:	71 81       	ldd	r23, Z+1	; 0x01
    374e:	82 81       	ldd	r24, Z+2	; 0x02
    3750:	93 81       	ldd	r25, Z+3	; 0x03
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e2       	ldi	r20, 0x20	; 32
    3758:	51 e4       	ldi	r21, 0x41	; 65
    375a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	8e 01       	movw	r16, r28
    3764:	03 5e       	subi	r16, 0xE3	; 227
    3766:	1e 4f       	sbci	r17, 0xFE	; 254
    3768:	bc 01       	movw	r22, r24
    376a:	cd 01       	movw	r24, r26
    376c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	f8 01       	movw	r30, r16
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
    377a:	1f c0       	rjmp	.+62     	; 0x37ba <main+0x183c>
    377c:	fe 01       	movw	r30, r28
    377e:	e5 5e       	subi	r30, 0xE5	; 229
    3780:	fe 4f       	sbci	r31, 0xFE	; 254
    3782:	80 e9       	ldi	r24, 0x90	; 144
    3784:	91 e0       	ldi	r25, 0x01	; 1
    3786:	91 83       	std	Z+1, r25	; 0x01
    3788:	80 83       	st	Z, r24
    378a:	fe 01       	movw	r30, r28
    378c:	e5 5e       	subi	r30, 0xE5	; 229
    378e:	fe 4f       	sbci	r31, 0xFE	; 254
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <main+0x1816>
    3798:	fe 01       	movw	r30, r28
    379a:	e5 5e       	subi	r30, 0xE5	; 229
    379c:	fe 4f       	sbci	r31, 0xFE	; 254
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a2:	de 01       	movw	r26, r28
    37a4:	a3 5e       	subi	r26, 0xE3	; 227
    37a6:	be 4f       	sbci	r27, 0xFE	; 254
    37a8:	fe 01       	movw	r30, r28
    37aa:	e3 5e       	subi	r30, 0xE3	; 227
    37ac:	fe 4f       	sbci	r31, 0xFE	; 254
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	11 96       	adiw	r26, 0x01	; 1
    37b6:	9c 93       	st	X, r25
    37b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ba:	fe 01       	movw	r30, r28
    37bc:	e3 5e       	subi	r30, 0xE3	; 227
    37be:	fe 4f       	sbci	r31, 0xFE	; 254
    37c0:	80 81       	ld	r24, Z
    37c2:	91 81       	ldd	r25, Z+1	; 0x01
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	d1 f6       	brne	.-76     	; 0x377c <main+0x17fe>
    37c8:	27 c0       	rjmp	.+78     	; 0x3818 <main+0x189a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ca:	8e 01       	movw	r16, r28
    37cc:	03 5e       	subi	r16, 0xE3	; 227
    37ce:	1e 4f       	sbci	r17, 0xFE	; 254
    37d0:	fe 01       	movw	r30, r28
    37d2:	e1 5e       	subi	r30, 0xE1	; 225
    37d4:	fe 4f       	sbci	r31, 0xFE	; 254
    37d6:	60 81       	ld	r22, Z
    37d8:	71 81       	ldd	r23, Z+1	; 0x01
    37da:	82 81       	ldd	r24, Z+2	; 0x02
    37dc:	93 81       	ldd	r25, Z+3	; 0x03
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	f8 01       	movw	r30, r16
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
    37ec:	de 01       	movw	r26, r28
    37ee:	a7 5e       	subi	r26, 0xE7	; 231
    37f0:	be 4f       	sbci	r27, 0xFE	; 254
    37f2:	fe 01       	movw	r30, r28
    37f4:	e3 5e       	subi	r30, 0xE3	; 227
    37f6:	fe 4f       	sbci	r31, 0xFE	; 254
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	8d 93       	st	X+, r24
    37fe:	9c 93       	st	X, r25
    3800:	fe 01       	movw	r30, r28
    3802:	e7 5e       	subi	r30, 0xE7	; 231
    3804:	fe 4f       	sbci	r31, 0xFE	; 254
    3806:	80 81       	ld	r24, Z
    3808:	91 81       	ldd	r25, Z+1	; 0x01
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <main+0x188c>
    380e:	fe 01       	movw	r30, r28
    3810:	e7 5e       	subi	r30, 0xE7	; 231
    3812:	fe 4f       	sbci	r31, 0xFE	; 254
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	80 83       	st	Z, r24
						_delay_ms(100);
						pass_counter++;
    3818:	de 01       	movw	r26, r28
    381a:	a3 52       	subi	r26, 0x23	; 35
    381c:	be 4f       	sbci	r27, 0xFE	; 254
    381e:	fe 01       	movw	r30, r28
    3820:	e3 52       	subi	r30, 0x23	; 35
    3822:	fe 4f       	sbci	r31, 0xFE	; 254
    3824:	80 81       	ld	r24, Z
    3826:	8f 5f       	subi	r24, 0xFF	; 255
    3828:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;
    382a:	fe 01       	movw	r30, r28
    382c:	ef 51       	subi	r30, 0x1F	; 31
    382e:	fe 4f       	sbci	r31, 0xFE	; 254
    3830:	8f ef       	ldi	r24, 0xFF	; 255
    3832:	80 83       	st	Z, r24
					LCD_MOVE_CURSOR(2,1);
					LCD_WriteString("enter pass:");
					_delay_ms(200);
					pass_counter = 0;

					while (pass_counter<PASS_SIZE)
    3834:	fe 01       	movw	r30, r28
    3836:	e3 52       	subi	r30, 0x23	; 35
    3838:	fe 4f       	sbci	r31, 0xFE	; 254
    383a:	80 81       	ld	r24, Z
    383c:	84 30       	cpi	r24, 0x04	; 4
    383e:	08 f4       	brcc	.+2      	; 0x3842 <main+0x18c4>
    3840:	5b ce       	rjmp	.-842    	; 0x34f8 <main+0x157a>
						LCD_WriteChar(PASSWORD_SYMBOL);
						_delay_ms(100);
						pass_counter++;
						key_pressed = NOT_PRESSED;
					}
					EEPROM_ReadBlockFromAddress(EEPROM_ADMIN_ADDRESS, stored_pass, PASS_SIZE);
    3842:	9e 01       	movw	r18, r28
    3844:	21 51       	subi	r18, 0x11	; 17
    3846:	3e 4f       	sbci	r19, 0xFE	; 254
    3848:	82 e0       	ldi	r24, 0x02	; 2
    384a:	91 e0       	ldi	r25, 0x01	; 1
    384c:	b9 01       	movw	r22, r18
    384e:	44 e0       	ldi	r20, 0x04	; 4
    3850:	50 e0       	ldi	r21, 0x00	; 0
    3852:	0e 94 91 09 	call	0x1322	; 0x1322 <EEPROM_ReadBlockFromAddress>

					if ((ComparePass(pass, stored_pass, PASS_SIZE)) == TRUE)
    3856:	ce 01       	movw	r24, r28
    3858:	85 51       	subi	r24, 0x15	; 21
    385a:	9e 4f       	sbci	r25, 0xFE	; 254
    385c:	9e 01       	movw	r18, r28
    385e:	21 51       	subi	r18, 0x11	; 17
    3860:	3e 4f       	sbci	r19, 0xFE	; 254
    3862:	b9 01       	movw	r22, r18
    3864:	44 e0       	ldi	r20, 0x04	; 4
    3866:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <ComparePass>
    386a:	81 30       	cpi	r24, 0x01	; 1
    386c:	09 f0       	breq	.+2      	; 0x3870 <main+0x18f2>
    386e:	d3 c0       	rjmp	.+422    	; 0x3a16 <main+0x1a98>
					{
						login_mode =ADMIN;
    3870:	fe 01       	movw	r30, r28
    3872:	ed 51       	subi	r30, 0x1D	; 29
    3874:	fe 4f       	sbci	r31, 0xFE	; 254
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	80 83       	st	Z, r24
						pass_tries_count = 0;
    387a:	fe 01       	movw	r30, r28
    387c:	e1 52       	subi	r30, 0x21	; 33
    387e:	fe 4f       	sbci	r31, 0xFE	; 254
    3880:	10 82       	st	Z, r1
						LCD_CLEAR_SCREEN();
    3882:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
						LCD_WriteString("right pass");
    3886:	85 e4       	ldi	r24, 0x45	; 69
    3888:	91 e0       	ldi	r25, 0x01	; 1
    388a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
						LCD_MOVE_CURSOR(2,1);
    388e:	82 e0       	ldi	r24, 0x02	; 2
    3890:	61 e0       	ldi	r22, 0x01	; 1
    3892:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
						LCD_WriteString("admin mode");
    3896:	8e e2       	ldi	r24, 0x2E	; 46
    3898:	91 e0       	ldi	r25, 0x01	; 1
    389a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    389e:	fe 01       	movw	r30, r28
    38a0:	eb 5e       	subi	r30, 0xEB	; 235
    38a2:	fe 4f       	sbci	r31, 0xFE	; 254
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	aa ef       	ldi	r26, 0xFA	; 250
    38aa:	b3 e4       	ldi	r27, 0x43	; 67
    38ac:	80 83       	st	Z, r24
    38ae:	91 83       	std	Z+1, r25	; 0x01
    38b0:	a2 83       	std	Z+2, r26	; 0x02
    38b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b4:	8e 01       	movw	r16, r28
    38b6:	0f 5e       	subi	r16, 0xEF	; 239
    38b8:	1e 4f       	sbci	r17, 0xFE	; 254
    38ba:	fe 01       	movw	r30, r28
    38bc:	eb 5e       	subi	r30, 0xEB	; 235
    38be:	fe 4f       	sbci	r31, 0xFE	; 254
    38c0:	60 81       	ld	r22, Z
    38c2:	71 81       	ldd	r23, Z+1	; 0x01
    38c4:	82 81       	ldd	r24, Z+2	; 0x02
    38c6:	93 81       	ldd	r25, Z+3	; 0x03
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	4a e7       	ldi	r20, 0x7A	; 122
    38ce:	55 e4       	ldi	r21, 0x45	; 69
    38d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	f8 01       	movw	r30, r16
    38da:	80 83       	st	Z, r24
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	a2 83       	std	Z+2, r26	; 0x02
    38e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38e2:	fe 01       	movw	r30, r28
    38e4:	ef 5e       	subi	r30, 0xEF	; 239
    38e6:	fe 4f       	sbci	r31, 0xFE	; 254
    38e8:	60 81       	ld	r22, Z
    38ea:	71 81       	ldd	r23, Z+1	; 0x01
    38ec:	82 81       	ldd	r24, Z+2	; 0x02
    38ee:	93 81       	ldd	r25, Z+3	; 0x03
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	40 e8       	ldi	r20, 0x80	; 128
    38f6:	5f e3       	ldi	r21, 0x3F	; 63
    38f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38fc:	88 23       	and	r24, r24
    38fe:	44 f4       	brge	.+16     	; 0x3910 <main+0x1992>
		__ticks = 1;
    3900:	fe 01       	movw	r30, r28
    3902:	e1 5f       	subi	r30, 0xF1	; 241
    3904:	fe 4f       	sbci	r31, 0xFE	; 254
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	91 83       	std	Z+1, r25	; 0x01
    390c:	80 83       	st	Z, r24
    390e:	64 c0       	rjmp	.+200    	; 0x39d8 <main+0x1a5a>
	else if (__tmp > 65535)
    3910:	fe 01       	movw	r30, r28
    3912:	ef 5e       	subi	r30, 0xEF	; 239
    3914:	fe 4f       	sbci	r31, 0xFE	; 254
    3916:	60 81       	ld	r22, Z
    3918:	71 81       	ldd	r23, Z+1	; 0x01
    391a:	82 81       	ldd	r24, Z+2	; 0x02
    391c:	93 81       	ldd	r25, Z+3	; 0x03
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	3f ef       	ldi	r19, 0xFF	; 255
    3922:	4f e7       	ldi	r20, 0x7F	; 127
    3924:	57 e4       	ldi	r21, 0x47	; 71
    3926:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    392a:	18 16       	cp	r1, r24
    392c:	0c f0       	brlt	.+2      	; 0x3930 <main+0x19b2>
    392e:	43 c0       	rjmp	.+134    	; 0x39b6 <main+0x1a38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3930:	fe 01       	movw	r30, r28
    3932:	eb 5e       	subi	r30, 0xEB	; 235
    3934:	fe 4f       	sbci	r31, 0xFE	; 254
    3936:	60 81       	ld	r22, Z
    3938:	71 81       	ldd	r23, Z+1	; 0x01
    393a:	82 81       	ldd	r24, Z+2	; 0x02
    393c:	93 81       	ldd	r25, Z+3	; 0x03
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	40 e2       	ldi	r20, 0x20	; 32
    3944:	51 e4       	ldi	r21, 0x41	; 65
    3946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	8e 01       	movw	r16, r28
    3950:	01 5f       	subi	r16, 0xF1	; 241
    3952:	1e 4f       	sbci	r17, 0xFE	; 254
    3954:	bc 01       	movw	r22, r24
    3956:	cd 01       	movw	r24, r26
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	f8 01       	movw	r30, r16
    3962:	91 83       	std	Z+1, r25	; 0x01
    3964:	80 83       	st	Z, r24
    3966:	1f c0       	rjmp	.+62     	; 0x39a6 <main+0x1a28>
    3968:	fe 01       	movw	r30, r28
    396a:	e3 5f       	subi	r30, 0xF3	; 243
    396c:	fe 4f       	sbci	r31, 0xFE	; 254
    396e:	80 e9       	ldi	r24, 0x90	; 144
    3970:	91 e0       	ldi	r25, 0x01	; 1
    3972:	91 83       	std	Z+1, r25	; 0x01
    3974:	80 83       	st	Z, r24
    3976:	fe 01       	movw	r30, r28
    3978:	e3 5f       	subi	r30, 0xF3	; 243
    397a:	fe 4f       	sbci	r31, 0xFE	; 254
    397c:	80 81       	ld	r24, Z
    397e:	91 81       	ldd	r25, Z+1	; 0x01
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	f1 f7       	brne	.-4      	; 0x3980 <main+0x1a02>
    3984:	fe 01       	movw	r30, r28
    3986:	e3 5f       	subi	r30, 0xF3	; 243
    3988:	fe 4f       	sbci	r31, 0xFE	; 254
    398a:	91 83       	std	Z+1, r25	; 0x01
    398c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398e:	de 01       	movw	r26, r28
    3990:	a1 5f       	subi	r26, 0xF1	; 241
    3992:	be 4f       	sbci	r27, 0xFE	; 254
    3994:	fe 01       	movw	r30, r28
    3996:	e1 5f       	subi	r30, 0xF1	; 241
    3998:	fe 4f       	sbci	r31, 0xFE	; 254
    399a:	80 81       	ld	r24, Z
    399c:	91 81       	ldd	r25, Z+1	; 0x01
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	11 96       	adiw	r26, 0x01	; 1
    39a2:	9c 93       	st	X, r25
    39a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a6:	fe 01       	movw	r30, r28
    39a8:	e1 5f       	subi	r30, 0xF1	; 241
    39aa:	fe 4f       	sbci	r31, 0xFE	; 254
    39ac:	80 81       	ld	r24, Z
    39ae:	91 81       	ldd	r25, Z+1	; 0x01
    39b0:	00 97       	sbiw	r24, 0x00	; 0
    39b2:	d1 f6       	brne	.-76     	; 0x3968 <main+0x19ea>
    39b4:	27 c0       	rjmp	.+78     	; 0x3a04 <main+0x1a86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b6:	8e 01       	movw	r16, r28
    39b8:	01 5f       	subi	r16, 0xF1	; 241
    39ba:	1e 4f       	sbci	r17, 0xFE	; 254
    39bc:	fe 01       	movw	r30, r28
    39be:	ef 5e       	subi	r30, 0xEF	; 239
    39c0:	fe 4f       	sbci	r31, 0xFE	; 254
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	f8 01       	movw	r30, r16
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	80 83       	st	Z, r24
    39d8:	de 01       	movw	r26, r28
    39da:	a5 5f       	subi	r26, 0xF5	; 245
    39dc:	be 4f       	sbci	r27, 0xFE	; 254
    39de:	fe 01       	movw	r30, r28
    39e0:	e1 5f       	subi	r30, 0xF1	; 241
    39e2:	fe 4f       	sbci	r31, 0xFE	; 254
    39e4:	80 81       	ld	r24, Z
    39e6:	91 81       	ldd	r25, Z+1	; 0x01
    39e8:	8d 93       	st	X+, r24
    39ea:	9c 93       	st	X, r25
    39ec:	fe 01       	movw	r30, r28
    39ee:	e5 5f       	subi	r30, 0xF5	; 245
    39f0:	fe 4f       	sbci	r31, 0xFE	; 254
    39f2:	80 81       	ld	r24, Z
    39f4:	91 81       	ldd	r25, Z+1	; 0x01
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	f1 f7       	brne	.-4      	; 0x39f6 <main+0x1a78>
    39fa:	fe 01       	movw	r30, r28
    39fc:	e5 5f       	subi	r30, 0xF5	; 245
    39fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3a00:	91 83       	std	Z+1, r25	; 0x01
    3a02:	80 83       	st	Z, r24
						_delay_ms(500);
						LED_TurnOn(ADMIN_LED_PORT, ADMIN_LED_PIN);
    3a04:	82 e0       	ldi	r24, 0x02	; 2
    3a06:	65 e0       	ldi	r22, 0x05	; 5
    3a08:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LED_TurnOn>
						timer0_initializeCTC();
    3a0c:	0e 94 14 30 	call	0x6028	; 0x6028 <timer0_initializeCTC>
						LCD_CLEAR_SCREEN();
    3a10:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
    3a14:	e6 c0       	rjmp	.+460    	; 0x3be2 <main+0x1c64>
					}
					else
					{
						pass_tries_count++;
    3a16:	de 01       	movw	r26, r28
    3a18:	a1 52       	subi	r26, 0x21	; 33
    3a1a:	be 4f       	sbci	r27, 0xFE	; 254
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	e1 52       	subi	r30, 0x21	; 33
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	80 81       	ld	r24, Z
    3a24:	8f 5f       	subi	r24, 0xFF	; 255
    3a26:	8c 93       	st	X, r24
						login_mode = NO_MODE;
    3a28:	fe 01       	movw	r30, r28
    3a2a:	ed 51       	subi	r30, 0x1D	; 29
    3a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2e:	10 82       	st	Z, r1
						LCD_CLEAR_SCREEN();
    3a30:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
						LCD_WriteString("wrong pass");
    3a34:	80 e5       	ldi	r24, 0x50	; 80
    3a36:	91 e0       	ldi	r25, 0x01	; 1
    3a38:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
						LCD_MOVE_CURSOR(2,1);
    3a3c:	82 e0       	ldi	r24, 0x02	; 2
    3a3e:	61 e0       	ldi	r22, 0x01	; 1
    3a40:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
						LCD_WriteString("tries left:");
    3a44:	8b e5       	ldi	r24, 0x5B	; 91
    3a46:	91 e0       	ldi	r25, 0x01	; 1
    3a48:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
						LCD_WriteChar(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	e1 52       	subi	r30, 0x21	; 33
    3a50:	fe 4f       	sbci	r31, 0xFE	; 254
    3a52:	93 e3       	ldi	r25, 0x33	; 51
    3a54:	80 81       	ld	r24, Z
    3a56:	f9 2f       	mov	r31, r25
    3a58:	f8 1b       	sub	r31, r24
    3a5a:	8f 2f       	mov	r24, r31
    3a5c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
    3a60:	fe 01       	movw	r30, r28
    3a62:	e9 5f       	subi	r30, 0xF9	; 249
    3a64:	fe 4f       	sbci	r31, 0xFE	; 254
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	aa ef       	ldi	r26, 0xFA	; 250
    3a6c:	b3 e4       	ldi	r27, 0x43	; 67
    3a6e:	80 83       	st	Z, r24
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	a2 83       	std	Z+2, r26	; 0x02
    3a74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a76:	8e 01       	movw	r16, r28
    3a78:	0d 5f       	subi	r16, 0xFD	; 253
    3a7a:	1e 4f       	sbci	r17, 0xFE	; 254
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e9 5f       	subi	r30, 0xF9	; 249
    3a80:	fe 4f       	sbci	r31, 0xFE	; 254
    3a82:	60 81       	ld	r22, Z
    3a84:	71 81       	ldd	r23, Z+1	; 0x01
    3a86:	82 81       	ldd	r24, Z+2	; 0x02
    3a88:	93 81       	ldd	r25, Z+3	; 0x03
    3a8a:	20 e0       	ldi	r18, 0x00	; 0
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	4a e7       	ldi	r20, 0x7A	; 122
    3a90:	55 e4       	ldi	r21, 0x45	; 69
    3a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	f8 01       	movw	r30, r16
    3a9c:	80 83       	st	Z, r24
    3a9e:	91 83       	std	Z+1, r25	; 0x01
    3aa0:	a2 83       	std	Z+2, r26	; 0x02
    3aa2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	ed 5f       	subi	r30, 0xFD	; 253
    3aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aaa:	60 81       	ld	r22, Z
    3aac:	71 81       	ldd	r23, Z+1	; 0x01
    3aae:	82 81       	ldd	r24, Z+2	; 0x02
    3ab0:	93 81       	ldd	r25, Z+3	; 0x03
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	40 e8       	ldi	r20, 0x80	; 128
    3ab8:	5f e3       	ldi	r21, 0x3F	; 63
    3aba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3abe:	88 23       	and	r24, r24
    3ac0:	44 f4       	brge	.+16     	; 0x3ad2 <main+0x1b54>
		__ticks = 1;
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	ef 5f       	subi	r30, 0xFF	; 255
    3ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	91 83       	std	Z+1, r25	; 0x01
    3ace:	80 83       	st	Z, r24
    3ad0:	64 c0       	rjmp	.+200    	; 0x3b9a <main+0x1c1c>
	else if (__tmp > 65535)
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	ed 5f       	subi	r30, 0xFD	; 253
    3ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad8:	60 81       	ld	r22, Z
    3ada:	71 81       	ldd	r23, Z+1	; 0x01
    3adc:	82 81       	ldd	r24, Z+2	; 0x02
    3ade:	93 81       	ldd	r25, Z+3	; 0x03
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	3f ef       	ldi	r19, 0xFF	; 255
    3ae4:	4f e7       	ldi	r20, 0x7F	; 127
    3ae6:	57 e4       	ldi	r21, 0x47	; 71
    3ae8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aec:	18 16       	cp	r1, r24
    3aee:	0c f0       	brlt	.+2      	; 0x3af2 <main+0x1b74>
    3af0:	43 c0       	rjmp	.+134    	; 0x3b78 <main+0x1bfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af2:	fe 01       	movw	r30, r28
    3af4:	e9 5f       	subi	r30, 0xF9	; 249
    3af6:	fe 4f       	sbci	r31, 0xFE	; 254
    3af8:	60 81       	ld	r22, Z
    3afa:	71 81       	ldd	r23, Z+1	; 0x01
    3afc:	82 81       	ldd	r24, Z+2	; 0x02
    3afe:	93 81       	ldd	r25, Z+3	; 0x03
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	40 e2       	ldi	r20, 0x20	; 32
    3b06:	51 e4       	ldi	r21, 0x41	; 65
    3b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	8e 01       	movw	r16, r28
    3b12:	0f 5f       	subi	r16, 0xFF	; 255
    3b14:	1e 4f       	sbci	r17, 0xFE	; 254
    3b16:	bc 01       	movw	r22, r24
    3b18:	cd 01       	movw	r24, r26
    3b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	f8 01       	movw	r30, r16
    3b24:	91 83       	std	Z+1, r25	; 0x01
    3b26:	80 83       	st	Z, r24
    3b28:	1f c0       	rjmp	.+62     	; 0x3b68 <main+0x1bea>
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	e1 50       	subi	r30, 0x01	; 1
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	80 e9       	ldi	r24, 0x90	; 144
    3b32:	91 e0       	ldi	r25, 0x01	; 1
    3b34:	91 83       	std	Z+1, r25	; 0x01
    3b36:	80 83       	st	Z, r24
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e1 50       	subi	r30, 0x01	; 1
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	80 81       	ld	r24, Z
    3b40:	91 81       	ldd	r25, Z+1	; 0x01
    3b42:	01 97       	sbiw	r24, 0x01	; 1
    3b44:	f1 f7       	brne	.-4      	; 0x3b42 <main+0x1bc4>
    3b46:	fe 01       	movw	r30, r28
    3b48:	e1 50       	subi	r30, 0x01	; 1
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	91 83       	std	Z+1, r25	; 0x01
    3b4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b50:	de 01       	movw	r26, r28
    3b52:	af 5f       	subi	r26, 0xFF	; 255
    3b54:	be 4f       	sbci	r27, 0xFE	; 254
    3b56:	fe 01       	movw	r30, r28
    3b58:	ef 5f       	subi	r30, 0xFF	; 255
    3b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b5c:	80 81       	ld	r24, Z
    3b5e:	91 81       	ldd	r25, Z+1	; 0x01
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	11 96       	adiw	r26, 0x01	; 1
    3b64:	9c 93       	st	X, r25
    3b66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b68:	fe 01       	movw	r30, r28
    3b6a:	ef 5f       	subi	r30, 0xFF	; 255
    3b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b6e:	80 81       	ld	r24, Z
    3b70:	91 81       	ldd	r25, Z+1	; 0x01
    3b72:	00 97       	sbiw	r24, 0x00	; 0
    3b74:	d1 f6       	brne	.-76     	; 0x3b2a <main+0x1bac>
    3b76:	27 c0       	rjmp	.+78     	; 0x3bc6 <main+0x1c48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b78:	8e 01       	movw	r16, r28
    3b7a:	0f 5f       	subi	r16, 0xFF	; 255
    3b7c:	1e 4f       	sbci	r17, 0xFE	; 254
    3b7e:	fe 01       	movw	r30, r28
    3b80:	ed 5f       	subi	r30, 0xFD	; 253
    3b82:	fe 4f       	sbci	r31, 0xFE	; 254
    3b84:	60 81       	ld	r22, Z
    3b86:	71 81       	ldd	r23, Z+1	; 0x01
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	93 81       	ldd	r25, Z+3	; 0x03
    3b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	f8 01       	movw	r30, r16
    3b96:	91 83       	std	Z+1, r25	; 0x01
    3b98:	80 83       	st	Z, r24
    3b9a:	de 01       	movw	r26, r28
    3b9c:	a3 50       	subi	r26, 0x03	; 3
    3b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	ef 5f       	subi	r30, 0xFF	; 255
    3ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba6:	80 81       	ld	r24, Z
    3ba8:	91 81       	ldd	r25, Z+1	; 0x01
    3baa:	8d 93       	st	X+, r24
    3bac:	9c 93       	st	X, r25
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e3 50       	subi	r30, 0x03	; 3
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	80 81       	ld	r24, Z
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	01 97       	sbiw	r24, 0x01	; 1
    3bba:	f1 f7       	brne	.-4      	; 0x3bb8 <main+0x1c3a>
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	e3 50       	subi	r30, 0x03	; 3
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	91 83       	std	Z+1, r25	; 0x01
    3bc4:	80 83       	st	Z, r24
						_delay_ms(500);
						LCD_CLEAR_SCREEN();
    3bc6:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
						if (pass_tries_count>= TRIES_ALLOWED)
    3bca:	fe 01       	movw	r30, r28
    3bcc:	e1 52       	subi	r30, 0x21	; 33
    3bce:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd0:	80 81       	ld	r24, Z
    3bd2:	83 30       	cpi	r24, 0x03	; 3
    3bd4:	30 f0       	brcs	.+12     	; 0x3be2 <main+0x1c64>
						{
							block_mode_flag = TRUE;
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	ee 51       	subi	r30, 0x1E	; 30
    3bda:	fe 4f       	sbci	r31, 0xFE	; 254
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	80 83       	st	Z, r24
    3be0:	56 c4       	rjmp	.+2220   	; 0x448e <main+0x2510>
			u8 stored_pass[PASS_SIZE] = {NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};

			switch (key_pressed)
			{
			case CHECK_ADMIN_MODE:
				while (login_mode != ADMIN)
    3be2:	fe 01       	movw	r30, r28
    3be4:	ed 51       	subi	r30, 0x1D	; 29
    3be6:	fe 4f       	sbci	r31, 0xFE	; 254
    3be8:	80 81       	ld	r24, Z
    3bea:	81 30       	cpi	r24, 0x01	; 1
    3bec:	09 f0       	breq	.+2      	; 0x3bf0 <main+0x1c72>
    3bee:	b2 cb       	rjmp	.-2204   	; 0x3354 <main+0x13d6>
    3bf0:	4e c4       	rjmp	.+2204   	; 0x448e <main+0x2510>
				break;

			case CHECK_GUEST_MODE:
				while (login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	ef 51       	subi	r30, 0x1F	; 31
    3bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf8:	8f ef       	ldi	r24, 0xFF	; 255
    3bfa:	80 83       	st	Z, r24
					LCD_CLEAR_SCREEN();
    3bfc:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
					LCD_WriteString("guest mode");
    3c00:	87 e6       	ldi	r24, 0x67	; 103
    3c02:	91 e0       	ldi	r25, 0x01	; 1
    3c04:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
					LCD_MOVE_CURSOR(2,1);
    3c08:	82 e0       	ldi	r24, 0x02	; 2
    3c0a:	61 e0       	ldi	r22, 0x01	; 1
    3c0c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
					LCD_WriteString("guest pass:");
    3c10:	89 ec       	ldi	r24, 0xC9	; 201
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    3c18:	fe 01       	movw	r30, r28
    3c1a:	e7 50       	subi	r30, 0x07	; 7
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	a8 e4       	ldi	r26, 0x48	; 72
    3c24:	b3 e4       	ldi	r27, 0x43	; 67
    3c26:	80 83       	st	Z, r24
    3c28:	91 83       	std	Z+1, r25	; 0x01
    3c2a:	a2 83       	std	Z+2, r26	; 0x02
    3c2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2e:	8e 01       	movw	r16, r28
    3c30:	0b 50       	subi	r16, 0x0B	; 11
    3c32:	1f 4f       	sbci	r17, 0xFF	; 255
    3c34:	fe 01       	movw	r30, r28
    3c36:	e7 50       	subi	r30, 0x07	; 7
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	60 81       	ld	r22, Z
    3c3c:	71 81       	ldd	r23, Z+1	; 0x01
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	93 81       	ldd	r25, Z+3	; 0x03
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	4a e7       	ldi	r20, 0x7A	; 122
    3c48:	55 e4       	ldi	r21, 0x45	; 69
    3c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	f8 01       	movw	r30, r16
    3c54:	80 83       	st	Z, r24
    3c56:	91 83       	std	Z+1, r25	; 0x01
    3c58:	a2 83       	std	Z+2, r26	; 0x02
    3c5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	eb 50       	subi	r30, 0x0B	; 11
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	60 81       	ld	r22, Z
    3c64:	71 81       	ldd	r23, Z+1	; 0x01
    3c66:	82 81       	ldd	r24, Z+2	; 0x02
    3c68:	93 81       	ldd	r25, Z+3	; 0x03
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e8       	ldi	r20, 0x80	; 128
    3c70:	5f e3       	ldi	r21, 0x3F	; 63
    3c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c76:	88 23       	and	r24, r24
    3c78:	44 f4       	brge	.+16     	; 0x3c8a <main+0x1d0c>
		__ticks = 1;
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	ed 50       	subi	r30, 0x0D	; 13
    3c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	91 83       	std	Z+1, r25	; 0x01
    3c86:	80 83       	st	Z, r24
    3c88:	64 c0       	rjmp	.+200    	; 0x3d52 <main+0x1dd4>
	else if (__tmp > 65535)
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	eb 50       	subi	r30, 0x0B	; 11
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	60 81       	ld	r22, Z
    3c92:	71 81       	ldd	r23, Z+1	; 0x01
    3c94:	82 81       	ldd	r24, Z+2	; 0x02
    3c96:	93 81       	ldd	r25, Z+3	; 0x03
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	3f ef       	ldi	r19, 0xFF	; 255
    3c9c:	4f e7       	ldi	r20, 0x7F	; 127
    3c9e:	57 e4       	ldi	r21, 0x47	; 71
    3ca0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ca4:	18 16       	cp	r1, r24
    3ca6:	0c f0       	brlt	.+2      	; 0x3caa <main+0x1d2c>
    3ca8:	43 c0       	rjmp	.+134    	; 0x3d30 <main+0x1db2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3caa:	fe 01       	movw	r30, r28
    3cac:	e7 50       	subi	r30, 0x07	; 7
    3cae:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb0:	60 81       	ld	r22, Z
    3cb2:	71 81       	ldd	r23, Z+1	; 0x01
    3cb4:	82 81       	ldd	r24, Z+2	; 0x02
    3cb6:	93 81       	ldd	r25, Z+3	; 0x03
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e2       	ldi	r20, 0x20	; 32
    3cbe:	51 e4       	ldi	r21, 0x41	; 65
    3cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	8e 01       	movw	r16, r28
    3cca:	0d 50       	subi	r16, 0x0D	; 13
    3ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cce:	bc 01       	movw	r22, r24
    3cd0:	cd 01       	movw	r24, r26
    3cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	f8 01       	movw	r30, r16
    3cdc:	91 83       	std	Z+1, r25	; 0x01
    3cde:	80 83       	st	Z, r24
    3ce0:	1f c0       	rjmp	.+62     	; 0x3d20 <main+0x1da2>
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	ef 50       	subi	r30, 0x0F	; 15
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	80 e9       	ldi	r24, 0x90	; 144
    3cea:	91 e0       	ldi	r25, 0x01	; 1
    3cec:	91 83       	std	Z+1, r25	; 0x01
    3cee:	80 83       	st	Z, r24
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	ef 50       	subi	r30, 0x0F	; 15
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	80 81       	ld	r24, Z
    3cf8:	91 81       	ldd	r25, Z+1	; 0x01
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	f1 f7       	brne	.-4      	; 0x3cfa <main+0x1d7c>
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ef 50       	subi	r30, 0x0F	; 15
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d08:	de 01       	movw	r26, r28
    3d0a:	ad 50       	subi	r26, 0x0D	; 13
    3d0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d0e:	fe 01       	movw	r30, r28
    3d10:	ed 50       	subi	r30, 0x0D	; 13
    3d12:	ff 4f       	sbci	r31, 0xFF	; 255
    3d14:	80 81       	ld	r24, Z
    3d16:	91 81       	ldd	r25, Z+1	; 0x01
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	11 96       	adiw	r26, 0x01	; 1
    3d1c:	9c 93       	st	X, r25
    3d1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d20:	fe 01       	movw	r30, r28
    3d22:	ed 50       	subi	r30, 0x0D	; 13
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	80 81       	ld	r24, Z
    3d28:	91 81       	ldd	r25, Z+1	; 0x01
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	d1 f6       	brne	.-76     	; 0x3ce2 <main+0x1d64>
    3d2e:	28 c0       	rjmp	.+80     	; 0x3d80 <main+0x1e02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d30:	8e 01       	movw	r16, r28
    3d32:	0d 50       	subi	r16, 0x0D	; 13
    3d34:	1f 4f       	sbci	r17, 0xFF	; 255
    3d36:	fe 01       	movw	r30, r28
    3d38:	eb 50       	subi	r30, 0x0B	; 11
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	60 81       	ld	r22, Z
    3d3e:	71 81       	ldd	r23, Z+1	; 0x01
    3d40:	82 81       	ldd	r24, Z+2	; 0x02
    3d42:	93 81       	ldd	r25, Z+3	; 0x03
    3d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	f8 01       	movw	r30, r16
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	80 83       	st	Z, r24
    3d52:	de 01       	movw	r26, r28
    3d54:	a1 51       	subi	r26, 0x11	; 17
    3d56:	bf 4f       	sbci	r27, 0xFF	; 255
    3d58:	fe 01       	movw	r30, r28
    3d5a:	ed 50       	subi	r30, 0x0D	; 13
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	11 96       	adiw	r26, 0x01	; 1
    3d64:	9c 93       	st	X, r25
    3d66:	8e 93       	st	-X, r24
    3d68:	fe 01       	movw	r30, r28
    3d6a:	e1 51       	subi	r30, 0x11	; 17
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	80 81       	ld	r24, Z
    3d70:	91 81       	ldd	r25, Z+1	; 0x01
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <main+0x1df4>
    3d76:	fe 01       	movw	r30, r28
    3d78:	e1 51       	subi	r30, 0x11	; 17
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	80 83       	st	Z, r24
					_delay_ms(200);
					pass_counter = 0;
    3d80:	fe 01       	movw	r30, r28
    3d82:	e3 52       	subi	r30, 0x23	; 35
    3d84:	fe 4f       	sbci	r31, 0xFE	; 254
    3d86:	10 82       	st	Z, r1
    3d88:	a4 c1       	rjmp	.+840    	; 0x40d2 <main+0x2154>

					while (pass_counter < PASS_SIZE)
					{
						while(key_pressed == NOT_PRESSED)
						{
							key_pressed = Keypad_GetPressedKey();
    3d8a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <Keypad_GetPressedKey>
    3d8e:	fe 01       	movw	r30, r28
    3d90:	ef 51       	subi	r30, 0x1F	; 31
    3d92:	fe 4f       	sbci	r31, 0xFE	; 254
    3d94:	80 83       	st	Z, r24
					_delay_ms(200);
					pass_counter = 0;

					while (pass_counter < PASS_SIZE)
					{
						while(key_pressed == NOT_PRESSED)
    3d96:	fe 01       	movw	r30, r28
    3d98:	ef 51       	subi	r30, 0x1F	; 31
    3d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d9c:	80 81       	ld	r24, Z
    3d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3da0:	a1 f3       	breq	.-24     	; 0x3d8a <main+0x1e0c>
						{
							key_pressed = Keypad_GetPressedKey();
						}

						pass[pass_counter] = key_pressed;
    3da2:	fe 01       	movw	r30, r28
    3da4:	e3 52       	subi	r30, 0x23	; 35
    3da6:	fe 4f       	sbci	r31, 0xFE	; 254
    3da8:	80 81       	ld	r24, Z
    3daa:	28 2f       	mov	r18, r24
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	ce 01       	movw	r24, r28
    3db0:	85 51       	subi	r24, 0x15	; 21
    3db2:	9e 4f       	sbci	r25, 0xFE	; 254
    3db4:	dc 01       	movw	r26, r24
    3db6:	a2 0f       	add	r26, r18
    3db8:	b3 1f       	adc	r27, r19
    3dba:	fe 01       	movw	r30, r28
    3dbc:	ef 51       	subi	r30, 0x1F	; 31
    3dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc0:	80 81       	ld	r24, Z
    3dc2:	8c 93       	st	X, r24
						LCD_WriteChar(key_pressed);
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	ef 51       	subi	r30, 0x1F	; 31
    3dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dca:	80 81       	ld	r24, Z
    3dcc:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e5 51       	subi	r30, 0x15	; 21
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	a8 e4       	ldi	r26, 0x48	; 72
    3ddc:	b3 e4       	ldi	r27, 0x43	; 67
    3dde:	80 83       	st	Z, r24
    3de0:	91 83       	std	Z+1, r25	; 0x01
    3de2:	a2 83       	std	Z+2, r26	; 0x02
    3de4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3de6:	8e 01       	movw	r16, r28
    3de8:	09 51       	subi	r16, 0x19	; 25
    3dea:	1f 4f       	sbci	r17, 0xFF	; 255
    3dec:	fe 01       	movw	r30, r28
    3dee:	e5 51       	subi	r30, 0x15	; 21
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	60 81       	ld	r22, Z
    3df4:	71 81       	ldd	r23, Z+1	; 0x01
    3df6:	82 81       	ldd	r24, Z+2	; 0x02
    3df8:	93 81       	ldd	r25, Z+3	; 0x03
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	4a e7       	ldi	r20, 0x7A	; 122
    3e00:	55 e4       	ldi	r21, 0x45	; 69
    3e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e06:	dc 01       	movw	r26, r24
    3e08:	cb 01       	movw	r24, r22
    3e0a:	f8 01       	movw	r30, r16
    3e0c:	80 83       	st	Z, r24
    3e0e:	91 83       	std	Z+1, r25	; 0x01
    3e10:	a2 83       	std	Z+2, r26	; 0x02
    3e12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e14:	fe 01       	movw	r30, r28
    3e16:	e9 51       	subi	r30, 0x19	; 25
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	60 81       	ld	r22, Z
    3e1c:	71 81       	ldd	r23, Z+1	; 0x01
    3e1e:	82 81       	ldd	r24, Z+2	; 0x02
    3e20:	93 81       	ldd	r25, Z+3	; 0x03
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	40 e8       	ldi	r20, 0x80	; 128
    3e28:	5f e3       	ldi	r21, 0x3F	; 63
    3e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e2e:	88 23       	and	r24, r24
    3e30:	44 f4       	brge	.+16     	; 0x3e42 <main+0x1ec4>
		__ticks = 1;
    3e32:	fe 01       	movw	r30, r28
    3e34:	eb 51       	subi	r30, 0x1B	; 27
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	91 83       	std	Z+1, r25	; 0x01
    3e3e:	80 83       	st	Z, r24
    3e40:	64 c0       	rjmp	.+200    	; 0x3f0a <main+0x1f8c>
	else if (__tmp > 65535)
    3e42:	fe 01       	movw	r30, r28
    3e44:	e9 51       	subi	r30, 0x19	; 25
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	60 81       	ld	r22, Z
    3e4a:	71 81       	ldd	r23, Z+1	; 0x01
    3e4c:	82 81       	ldd	r24, Z+2	; 0x02
    3e4e:	93 81       	ldd	r25, Z+3	; 0x03
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	3f ef       	ldi	r19, 0xFF	; 255
    3e54:	4f e7       	ldi	r20, 0x7F	; 127
    3e56:	57 e4       	ldi	r21, 0x47	; 71
    3e58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e5c:	18 16       	cp	r1, r24
    3e5e:	0c f0       	brlt	.+2      	; 0x3e62 <main+0x1ee4>
    3e60:	43 c0       	rjmp	.+134    	; 0x3ee8 <main+0x1f6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e62:	fe 01       	movw	r30, r28
    3e64:	e5 51       	subi	r30, 0x15	; 21
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	60 81       	ld	r22, Z
    3e6a:	71 81       	ldd	r23, Z+1	; 0x01
    3e6c:	82 81       	ldd	r24, Z+2	; 0x02
    3e6e:	93 81       	ldd	r25, Z+3	; 0x03
    3e70:	20 e0       	ldi	r18, 0x00	; 0
    3e72:	30 e0       	ldi	r19, 0x00	; 0
    3e74:	40 e2       	ldi	r20, 0x20	; 32
    3e76:	51 e4       	ldi	r21, 0x41	; 65
    3e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	cb 01       	movw	r24, r22
    3e80:	8e 01       	movw	r16, r28
    3e82:	0b 51       	subi	r16, 0x1B	; 27
    3e84:	1f 4f       	sbci	r17, 0xFF	; 255
    3e86:	bc 01       	movw	r22, r24
    3e88:	cd 01       	movw	r24, r26
    3e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	f8 01       	movw	r30, r16
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	80 83       	st	Z, r24
    3e98:	1f c0       	rjmp	.+62     	; 0x3ed8 <main+0x1f5a>
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	ed 51       	subi	r30, 0x1D	; 29
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	80 e9       	ldi	r24, 0x90	; 144
    3ea2:	91 e0       	ldi	r25, 0x01	; 1
    3ea4:	91 83       	std	Z+1, r25	; 0x01
    3ea6:	80 83       	st	Z, r24
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	ed 51       	subi	r30, 0x1D	; 29
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	80 81       	ld	r24, Z
    3eb0:	91 81       	ldd	r25, Z+1	; 0x01
    3eb2:	01 97       	sbiw	r24, 0x01	; 1
    3eb4:	f1 f7       	brne	.-4      	; 0x3eb2 <main+0x1f34>
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	ed 51       	subi	r30, 0x1D	; 29
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	91 83       	std	Z+1, r25	; 0x01
    3ebe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec0:	de 01       	movw	r26, r28
    3ec2:	ab 51       	subi	r26, 0x1B	; 27
    3ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	eb 51       	subi	r30, 0x1B	; 27
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	80 81       	ld	r24, Z
    3ece:	91 81       	ldd	r25, Z+1	; 0x01
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	11 96       	adiw	r26, 0x01	; 1
    3ed4:	9c 93       	st	X, r25
    3ed6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed8:	fe 01       	movw	r30, r28
    3eda:	eb 51       	subi	r30, 0x1B	; 27
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	80 81       	ld	r24, Z
    3ee0:	91 81       	ldd	r25, Z+1	; 0x01
    3ee2:	00 97       	sbiw	r24, 0x00	; 0
    3ee4:	d1 f6       	brne	.-76     	; 0x3e9a <main+0x1f1c>
    3ee6:	27 c0       	rjmp	.+78     	; 0x3f36 <main+0x1fb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee8:	8e 01       	movw	r16, r28
    3eea:	0b 51       	subi	r16, 0x1B	; 27
    3eec:	1f 4f       	sbci	r17, 0xFF	; 255
    3eee:	fe 01       	movw	r30, r28
    3ef0:	e9 51       	subi	r30, 0x19	; 25
    3ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef4:	60 81       	ld	r22, Z
    3ef6:	71 81       	ldd	r23, Z+1	; 0x01
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	93 81       	ldd	r25, Z+3	; 0x03
    3efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f00:	dc 01       	movw	r26, r24
    3f02:	cb 01       	movw	r24, r22
    3f04:	f8 01       	movw	r30, r16
    3f06:	91 83       	std	Z+1, r25	; 0x01
    3f08:	80 83       	st	Z, r24
    3f0a:	de 01       	movw	r26, r28
    3f0c:	af 51       	subi	r26, 0x1F	; 31
    3f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f10:	fe 01       	movw	r30, r28
    3f12:	eb 51       	subi	r30, 0x1B	; 27
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	8d 93       	st	X+, r24
    3f1c:	9c 93       	st	X, r25
    3f1e:	fe 01       	movw	r30, r28
    3f20:	ef 51       	subi	r30, 0x1F	; 31
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	80 81       	ld	r24, Z
    3f26:	91 81       	ldd	r25, Z+1	; 0x01
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	f1 f7       	brne	.-4      	; 0x3f28 <main+0x1faa>
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	ef 51       	subi	r30, 0x1F	; 31
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	80 83       	st	Z, r24
						_delay_ms(CHARACTER_PREVIEW_TIME);
						LCD_MOVE_CURSOR(2,12+pass_counter);
    3f36:	fe 01       	movw	r30, r28
    3f38:	e3 52       	subi	r30, 0x23	; 35
    3f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f3c:	80 81       	ld	r24, Z
    3f3e:	98 2f       	mov	r25, r24
    3f40:	94 5f       	subi	r25, 0xF4	; 244
    3f42:	82 e0       	ldi	r24, 0x02	; 2
    3f44:	69 2f       	mov	r22, r25
    3f46:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
						LCD_WriteChar(PASSWORD_SYMBOL);
    3f4a:	8a e2       	ldi	r24, 0x2A	; 42
    3f4c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
    3f50:	fe 01       	movw	r30, r28
    3f52:	e3 52       	subi	r30, 0x23	; 35
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	80 e0       	ldi	r24, 0x00	; 0
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	a8 ec       	ldi	r26, 0xC8	; 200
    3f5c:	b2 e4       	ldi	r27, 0x42	; 66
    3f5e:	80 83       	st	Z, r24
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	a2 83       	std	Z+2, r26	; 0x02
    3f64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f66:	8e 01       	movw	r16, r28
    3f68:	07 52       	subi	r16, 0x27	; 39
    3f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e3 52       	subi	r30, 0x23	; 35
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	60 81       	ld	r22, Z
    3f74:	71 81       	ldd	r23, Z+1	; 0x01
    3f76:	82 81       	ldd	r24, Z+2	; 0x02
    3f78:	93 81       	ldd	r25, Z+3	; 0x03
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	4a e7       	ldi	r20, 0x7A	; 122
    3f80:	55 e4       	ldi	r21, 0x45	; 69
    3f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	f8 01       	movw	r30, r16
    3f8c:	80 83       	st	Z, r24
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	a2 83       	std	Z+2, r26	; 0x02
    3f92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f94:	fe 01       	movw	r30, r28
    3f96:	e7 52       	subi	r30, 0x27	; 39
    3f98:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9a:	60 81       	ld	r22, Z
    3f9c:	71 81       	ldd	r23, Z+1	; 0x01
    3f9e:	82 81       	ldd	r24, Z+2	; 0x02
    3fa0:	93 81       	ldd	r25, Z+3	; 0x03
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	40 e8       	ldi	r20, 0x80	; 128
    3fa8:	5f e3       	ldi	r21, 0x3F	; 63
    3faa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fae:	88 23       	and	r24, r24
    3fb0:	44 f4       	brge	.+16     	; 0x3fc2 <main+0x2044>
		__ticks = 1;
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	e9 52       	subi	r30, 0x29	; 41
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	91 83       	std	Z+1, r25	; 0x01
    3fbe:	80 83       	st	Z, r24
    3fc0:	64 c0       	rjmp	.+200    	; 0x408a <main+0x210c>
	else if (__tmp > 65535)
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e7 52       	subi	r30, 0x27	; 39
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	60 81       	ld	r22, Z
    3fca:	71 81       	ldd	r23, Z+1	; 0x01
    3fcc:	82 81       	ldd	r24, Z+2	; 0x02
    3fce:	93 81       	ldd	r25, Z+3	; 0x03
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	3f ef       	ldi	r19, 0xFF	; 255
    3fd4:	4f e7       	ldi	r20, 0x7F	; 127
    3fd6:	57 e4       	ldi	r21, 0x47	; 71
    3fd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fdc:	18 16       	cp	r1, r24
    3fde:	0c f0       	brlt	.+2      	; 0x3fe2 <main+0x2064>
    3fe0:	43 c0       	rjmp	.+134    	; 0x4068 <main+0x20ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	e3 52       	subi	r30, 0x23	; 35
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	60 81       	ld	r22, Z
    3fea:	71 81       	ldd	r23, Z+1	; 0x01
    3fec:	82 81       	ldd	r24, Z+2	; 0x02
    3fee:	93 81       	ldd	r25, Z+3	; 0x03
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	40 e2       	ldi	r20, 0x20	; 32
    3ff6:	51 e4       	ldi	r21, 0x41	; 65
    3ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	8e 01       	movw	r16, r28
    4002:	09 52       	subi	r16, 0x29	; 41
    4004:	1f 4f       	sbci	r17, 0xFF	; 255
    4006:	bc 01       	movw	r22, r24
    4008:	cd 01       	movw	r24, r26
    400a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	f8 01       	movw	r30, r16
    4014:	91 83       	std	Z+1, r25	; 0x01
    4016:	80 83       	st	Z, r24
    4018:	1f c0       	rjmp	.+62     	; 0x4058 <main+0x20da>
    401a:	fe 01       	movw	r30, r28
    401c:	eb 52       	subi	r30, 0x2B	; 43
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	80 e9       	ldi	r24, 0x90	; 144
    4022:	91 e0       	ldi	r25, 0x01	; 1
    4024:	91 83       	std	Z+1, r25	; 0x01
    4026:	80 83       	st	Z, r24
    4028:	fe 01       	movw	r30, r28
    402a:	eb 52       	subi	r30, 0x2B	; 43
    402c:	ff 4f       	sbci	r31, 0xFF	; 255
    402e:	80 81       	ld	r24, Z
    4030:	91 81       	ldd	r25, Z+1	; 0x01
    4032:	01 97       	sbiw	r24, 0x01	; 1
    4034:	f1 f7       	brne	.-4      	; 0x4032 <main+0x20b4>
    4036:	fe 01       	movw	r30, r28
    4038:	eb 52       	subi	r30, 0x2B	; 43
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	91 83       	std	Z+1, r25	; 0x01
    403e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4040:	de 01       	movw	r26, r28
    4042:	a9 52       	subi	r26, 0x29	; 41
    4044:	bf 4f       	sbci	r27, 0xFF	; 255
    4046:	fe 01       	movw	r30, r28
    4048:	e9 52       	subi	r30, 0x29	; 41
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	80 81       	ld	r24, Z
    404e:	91 81       	ldd	r25, Z+1	; 0x01
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	11 96       	adiw	r26, 0x01	; 1
    4054:	9c 93       	st	X, r25
    4056:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4058:	fe 01       	movw	r30, r28
    405a:	e9 52       	subi	r30, 0x29	; 41
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	80 81       	ld	r24, Z
    4060:	91 81       	ldd	r25, Z+1	; 0x01
    4062:	00 97       	sbiw	r24, 0x00	; 0
    4064:	d1 f6       	brne	.-76     	; 0x401a <main+0x209c>
    4066:	27 c0       	rjmp	.+78     	; 0x40b6 <main+0x2138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4068:	8e 01       	movw	r16, r28
    406a:	09 52       	subi	r16, 0x29	; 41
    406c:	1f 4f       	sbci	r17, 0xFF	; 255
    406e:	fe 01       	movw	r30, r28
    4070:	e7 52       	subi	r30, 0x27	; 39
    4072:	ff 4f       	sbci	r31, 0xFF	; 255
    4074:	60 81       	ld	r22, Z
    4076:	71 81       	ldd	r23, Z+1	; 0x01
    4078:	82 81       	ldd	r24, Z+2	; 0x02
    407a:	93 81       	ldd	r25, Z+3	; 0x03
    407c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	f8 01       	movw	r30, r16
    4086:	91 83       	std	Z+1, r25	; 0x01
    4088:	80 83       	st	Z, r24
    408a:	de 01       	movw	r26, r28
    408c:	ad 52       	subi	r26, 0x2D	; 45
    408e:	bf 4f       	sbci	r27, 0xFF	; 255
    4090:	fe 01       	movw	r30, r28
    4092:	e9 52       	subi	r30, 0x29	; 41
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	80 81       	ld	r24, Z
    4098:	91 81       	ldd	r25, Z+1	; 0x01
    409a:	8d 93       	st	X+, r24
    409c:	9c 93       	st	X, r25
    409e:	fe 01       	movw	r30, r28
    40a0:	ed 52       	subi	r30, 0x2D	; 45
    40a2:	ff 4f       	sbci	r31, 0xFF	; 255
    40a4:	80 81       	ld	r24, Z
    40a6:	91 81       	ldd	r25, Z+1	; 0x01
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	f1 f7       	brne	.-4      	; 0x40a8 <main+0x212a>
    40ac:	fe 01       	movw	r30, r28
    40ae:	ed 52       	subi	r30, 0x2D	; 45
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	91 83       	std	Z+1, r25	; 0x01
    40b4:	80 83       	st	Z, r24
						_delay_ms(100);
						pass_counter++;
    40b6:	de 01       	movw	r26, r28
    40b8:	a3 52       	subi	r26, 0x23	; 35
    40ba:	be 4f       	sbci	r27, 0xFE	; 254
    40bc:	fe 01       	movw	r30, r28
    40be:	e3 52       	subi	r30, 0x23	; 35
    40c0:	fe 4f       	sbci	r31, 0xFE	; 254
    40c2:	80 81       	ld	r24, Z
    40c4:	8f 5f       	subi	r24, 0xFF	; 255
    40c6:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;
    40c8:	fe 01       	movw	r30, r28
    40ca:	ef 51       	subi	r30, 0x1F	; 31
    40cc:	fe 4f       	sbci	r31, 0xFE	; 254
    40ce:	8f ef       	ldi	r24, 0xFF	; 255
    40d0:	80 83       	st	Z, r24
					LCD_MOVE_CURSOR(2,1);
					LCD_WriteString("guest pass:");
					_delay_ms(200);
					pass_counter = 0;

					while (pass_counter < PASS_SIZE)
    40d2:	fe 01       	movw	r30, r28
    40d4:	e3 52       	subi	r30, 0x23	; 35
    40d6:	fe 4f       	sbci	r31, 0xFE	; 254
    40d8:	80 81       	ld	r24, Z
    40da:	84 30       	cpi	r24, 0x04	; 4
    40dc:	08 f4       	brcc	.+2      	; 0x40e0 <main+0x2162>
    40de:	5b ce       	rjmp	.-842    	; 0x3d96 <main+0x1e18>
						LCD_WriteChar(PASSWORD_SYMBOL);
						_delay_ms(100);
						pass_counter++;
						key_pressed = NOT_PRESSED;
					}
					EEPROM_ReadBlockFromAddress(EEPROM_GUEST_ADDRESS, stored_pass, PASS_SIZE);
    40e0:	9e 01       	movw	r18, r28
    40e2:	21 51       	subi	r18, 0x11	; 17
    40e4:	3e 4f       	sbci	r19, 0xFE	; 254
    40e6:	86 e0       	ldi	r24, 0x06	; 6
    40e8:	91 e0       	ldi	r25, 0x01	; 1
    40ea:	b9 01       	movw	r22, r18
    40ec:	44 e0       	ldi	r20, 0x04	; 4
    40ee:	50 e0       	ldi	r21, 0x00	; 0
    40f0:	0e 94 91 09 	call	0x1322	; 0x1322 <EEPROM_ReadBlockFromAddress>

					if ((ComparePass(pass, stored_pass, PASS_SIZE)) == TRUE)
    40f4:	ce 01       	movw	r24, r28
    40f6:	85 51       	subi	r24, 0x15	; 21
    40f8:	9e 4f       	sbci	r25, 0xFE	; 254
    40fa:	9e 01       	movw	r18, r28
    40fc:	21 51       	subi	r18, 0x11	; 17
    40fe:	3e 4f       	sbci	r19, 0xFE	; 254
    4100:	b9 01       	movw	r22, r18
    4102:	44 e0       	ldi	r20, 0x04	; 4
    4104:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <ComparePass>
    4108:	81 30       	cpi	r24, 0x01	; 1
    410a:	09 f0       	breq	.+2      	; 0x410e <main+0x2190>
    410c:	d3 c0       	rjmp	.+422    	; 0x42b4 <main+0x2336>
					{
						login_mode =GUEST;
    410e:	fe 01       	movw	r30, r28
    4110:	ed 51       	subi	r30, 0x1D	; 29
    4112:	fe 4f       	sbci	r31, 0xFE	; 254
    4114:	82 e0       	ldi	r24, 0x02	; 2
    4116:	80 83       	st	Z, r24
						pass_tries_count = 0;
    4118:	fe 01       	movw	r30, r28
    411a:	e1 52       	subi	r30, 0x21	; 33
    411c:	fe 4f       	sbci	r31, 0xFE	; 254
    411e:	10 82       	st	Z, r1
						LCD_CLEAR_SCREEN();
    4120:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
						LCD_WriteString("right pass");
    4124:	85 e4       	ldi	r24, 0x45	; 69
    4126:	91 e0       	ldi	r25, 0x01	; 1
    4128:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
						LCD_MOVE_CURSOR(2,1);
    412c:	82 e0       	ldi	r24, 0x02	; 2
    412e:	61 e0       	ldi	r22, 0x01	; 1
    4130:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
						LCD_WriteString("guest mode");
    4134:	87 e6       	ldi	r24, 0x67	; 103
    4136:	91 e0       	ldi	r25, 0x01	; 1
    4138:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    413c:	fe 01       	movw	r30, r28
    413e:	e1 53       	subi	r30, 0x31	; 49
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	aa ef       	ldi	r26, 0xFA	; 250
    4148:	b3 e4       	ldi	r27, 0x43	; 67
    414a:	80 83       	st	Z, r24
    414c:	91 83       	std	Z+1, r25	; 0x01
    414e:	a2 83       	std	Z+2, r26	; 0x02
    4150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4152:	8e 01       	movw	r16, r28
    4154:	05 53       	subi	r16, 0x35	; 53
    4156:	1f 4f       	sbci	r17, 0xFF	; 255
    4158:	fe 01       	movw	r30, r28
    415a:	e1 53       	subi	r30, 0x31	; 49
    415c:	ff 4f       	sbci	r31, 0xFF	; 255
    415e:	60 81       	ld	r22, Z
    4160:	71 81       	ldd	r23, Z+1	; 0x01
    4162:	82 81       	ldd	r24, Z+2	; 0x02
    4164:	93 81       	ldd	r25, Z+3	; 0x03
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	4a e7       	ldi	r20, 0x7A	; 122
    416c:	55 e4       	ldi	r21, 0x45	; 69
    416e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	f8 01       	movw	r30, r16
    4178:	80 83       	st	Z, r24
    417a:	91 83       	std	Z+1, r25	; 0x01
    417c:	a2 83       	std	Z+2, r26	; 0x02
    417e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4180:	fe 01       	movw	r30, r28
    4182:	e5 53       	subi	r30, 0x35	; 53
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	60 81       	ld	r22, Z
    4188:	71 81       	ldd	r23, Z+1	; 0x01
    418a:	82 81       	ldd	r24, Z+2	; 0x02
    418c:	93 81       	ldd	r25, Z+3	; 0x03
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e8       	ldi	r20, 0x80	; 128
    4194:	5f e3       	ldi	r21, 0x3F	; 63
    4196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    419a:	88 23       	and	r24, r24
    419c:	44 f4       	brge	.+16     	; 0x41ae <main+0x2230>
		__ticks = 1;
    419e:	fe 01       	movw	r30, r28
    41a0:	e7 53       	subi	r30, 0x37	; 55
    41a2:	ff 4f       	sbci	r31, 0xFF	; 255
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	91 83       	std	Z+1, r25	; 0x01
    41aa:	80 83       	st	Z, r24
    41ac:	64 c0       	rjmp	.+200    	; 0x4276 <main+0x22f8>
	else if (__tmp > 65535)
    41ae:	fe 01       	movw	r30, r28
    41b0:	e5 53       	subi	r30, 0x35	; 53
    41b2:	ff 4f       	sbci	r31, 0xFF	; 255
    41b4:	60 81       	ld	r22, Z
    41b6:	71 81       	ldd	r23, Z+1	; 0x01
    41b8:	82 81       	ldd	r24, Z+2	; 0x02
    41ba:	93 81       	ldd	r25, Z+3	; 0x03
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	3f ef       	ldi	r19, 0xFF	; 255
    41c0:	4f e7       	ldi	r20, 0x7F	; 127
    41c2:	57 e4       	ldi	r21, 0x47	; 71
    41c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41c8:	18 16       	cp	r1, r24
    41ca:	0c f0       	brlt	.+2      	; 0x41ce <main+0x2250>
    41cc:	43 c0       	rjmp	.+134    	; 0x4254 <main+0x22d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ce:	fe 01       	movw	r30, r28
    41d0:	e1 53       	subi	r30, 0x31	; 49
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	60 81       	ld	r22, Z
    41d6:	71 81       	ldd	r23, Z+1	; 0x01
    41d8:	82 81       	ldd	r24, Z+2	; 0x02
    41da:	93 81       	ldd	r25, Z+3	; 0x03
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	40 e2       	ldi	r20, 0x20	; 32
    41e2:	51 e4       	ldi	r21, 0x41	; 65
    41e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	8e 01       	movw	r16, r28
    41ee:	07 53       	subi	r16, 0x37	; 55
    41f0:	1f 4f       	sbci	r17, 0xFF	; 255
    41f2:	bc 01       	movw	r22, r24
    41f4:	cd 01       	movw	r24, r26
    41f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fa:	dc 01       	movw	r26, r24
    41fc:	cb 01       	movw	r24, r22
    41fe:	f8 01       	movw	r30, r16
    4200:	91 83       	std	Z+1, r25	; 0x01
    4202:	80 83       	st	Z, r24
    4204:	1f c0       	rjmp	.+62     	; 0x4244 <main+0x22c6>
    4206:	fe 01       	movw	r30, r28
    4208:	e9 53       	subi	r30, 0x39	; 57
    420a:	ff 4f       	sbci	r31, 0xFF	; 255
    420c:	80 e9       	ldi	r24, 0x90	; 144
    420e:	91 e0       	ldi	r25, 0x01	; 1
    4210:	91 83       	std	Z+1, r25	; 0x01
    4212:	80 83       	st	Z, r24
    4214:	fe 01       	movw	r30, r28
    4216:	e9 53       	subi	r30, 0x39	; 57
    4218:	ff 4f       	sbci	r31, 0xFF	; 255
    421a:	80 81       	ld	r24, Z
    421c:	91 81       	ldd	r25, Z+1	; 0x01
    421e:	01 97       	sbiw	r24, 0x01	; 1
    4220:	f1 f7       	brne	.-4      	; 0x421e <main+0x22a0>
    4222:	fe 01       	movw	r30, r28
    4224:	e9 53       	subi	r30, 0x39	; 57
    4226:	ff 4f       	sbci	r31, 0xFF	; 255
    4228:	91 83       	std	Z+1, r25	; 0x01
    422a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    422c:	de 01       	movw	r26, r28
    422e:	a7 53       	subi	r26, 0x37	; 55
    4230:	bf 4f       	sbci	r27, 0xFF	; 255
    4232:	fe 01       	movw	r30, r28
    4234:	e7 53       	subi	r30, 0x37	; 55
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	11 96       	adiw	r26, 0x01	; 1
    4240:	9c 93       	st	X, r25
    4242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4244:	fe 01       	movw	r30, r28
    4246:	e7 53       	subi	r30, 0x37	; 55
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	80 81       	ld	r24, Z
    424c:	91 81       	ldd	r25, Z+1	; 0x01
    424e:	00 97       	sbiw	r24, 0x00	; 0
    4250:	d1 f6       	brne	.-76     	; 0x4206 <main+0x2288>
    4252:	27 c0       	rjmp	.+78     	; 0x42a2 <main+0x2324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4254:	8e 01       	movw	r16, r28
    4256:	07 53       	subi	r16, 0x37	; 55
    4258:	1f 4f       	sbci	r17, 0xFF	; 255
    425a:	fe 01       	movw	r30, r28
    425c:	e5 53       	subi	r30, 0x35	; 53
    425e:	ff 4f       	sbci	r31, 0xFF	; 255
    4260:	60 81       	ld	r22, Z
    4262:	71 81       	ldd	r23, Z+1	; 0x01
    4264:	82 81       	ldd	r24, Z+2	; 0x02
    4266:	93 81       	ldd	r25, Z+3	; 0x03
    4268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	f8 01       	movw	r30, r16
    4272:	91 83       	std	Z+1, r25	; 0x01
    4274:	80 83       	st	Z, r24
    4276:	de 01       	movw	r26, r28
    4278:	ab 53       	subi	r26, 0x3B	; 59
    427a:	bf 4f       	sbci	r27, 0xFF	; 255
    427c:	fe 01       	movw	r30, r28
    427e:	e7 53       	subi	r30, 0x37	; 55
    4280:	ff 4f       	sbci	r31, 0xFF	; 255
    4282:	80 81       	ld	r24, Z
    4284:	91 81       	ldd	r25, Z+1	; 0x01
    4286:	8d 93       	st	X+, r24
    4288:	9c 93       	st	X, r25
    428a:	fe 01       	movw	r30, r28
    428c:	eb 53       	subi	r30, 0x3B	; 59
    428e:	ff 4f       	sbci	r31, 0xFF	; 255
    4290:	80 81       	ld	r24, Z
    4292:	91 81       	ldd	r25, Z+1	; 0x01
    4294:	01 97       	sbiw	r24, 0x01	; 1
    4296:	f1 f7       	brne	.-4      	; 0x4294 <main+0x2316>
    4298:	fe 01       	movw	r30, r28
    429a:	eb 53       	subi	r30, 0x3B	; 59
    429c:	ff 4f       	sbci	r31, 0xFF	; 255
    429e:	91 83       	std	Z+1, r25	; 0x01
    42a0:	80 83       	st	Z, r24
						_delay_ms(500);
						LED_TurnOn(GUEST_LED_PORT, GUEST_LED_PIN);
    42a2:	82 e0       	ldi	r24, 0x02	; 2
    42a4:	66 e0       	ldi	r22, 0x06	; 6
    42a6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LED_TurnOn>
						timer0_initializeCTC();
    42aa:	0e 94 14 30 	call	0x6028	; 0x6028 <timer0_initializeCTC>
						LCD_CLEAR_SCREEN();
    42ae:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
    42b2:	e6 c0       	rjmp	.+460    	; 0x4480 <main+0x2502>
					}
					else
					{
						pass_tries_count++;
    42b4:	de 01       	movw	r26, r28
    42b6:	a1 52       	subi	r26, 0x21	; 33
    42b8:	be 4f       	sbci	r27, 0xFE	; 254
    42ba:	fe 01       	movw	r30, r28
    42bc:	e1 52       	subi	r30, 0x21	; 33
    42be:	fe 4f       	sbci	r31, 0xFE	; 254
    42c0:	80 81       	ld	r24, Z
    42c2:	8f 5f       	subi	r24, 0xFF	; 255
    42c4:	8c 93       	st	X, r24
						login_mode = NO_MODE;
    42c6:	fe 01       	movw	r30, r28
    42c8:	ed 51       	subi	r30, 0x1D	; 29
    42ca:	fe 4f       	sbci	r31, 0xFE	; 254
    42cc:	10 82       	st	Z, r1
						LCD_CLEAR_SCREEN();
    42ce:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
						LCD_WriteString("wrong pass");
    42d2:	80 e5       	ldi	r24, 0x50	; 80
    42d4:	91 e0       	ldi	r25, 0x01	; 1
    42d6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
						LCD_MOVE_CURSOR(2,1);
    42da:	82 e0       	ldi	r24, 0x02	; 2
    42dc:	61 e0       	ldi	r22, 0x01	; 1
    42de:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
						LCD_WriteString("tries left:");
    42e2:	8b e5       	ldi	r24, 0x5B	; 91
    42e4:	91 e0       	ldi	r25, 0x01	; 1
    42e6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
						LCD_WriteChar(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);
    42ea:	fe 01       	movw	r30, r28
    42ec:	e1 52       	subi	r30, 0x21	; 33
    42ee:	fe 4f       	sbci	r31, 0xFE	; 254
    42f0:	93 e3       	ldi	r25, 0x33	; 51
    42f2:	80 81       	ld	r24, Z
    42f4:	f9 2f       	mov	r31, r25
    42f6:	f8 1b       	sub	r31, r24
    42f8:	8f 2f       	mov	r24, r31
    42fa:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
    42fe:	fe 01       	movw	r30, r28
    4300:	ef 53       	subi	r30, 0x3F	; 63
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	aa ef       	ldi	r26, 0xFA	; 250
    430a:	b3 e4       	ldi	r27, 0x43	; 67
    430c:	80 83       	st	Z, r24
    430e:	91 83       	std	Z+1, r25	; 0x01
    4310:	a2 83       	std	Z+2, r26	; 0x02
    4312:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4314:	8e 01       	movw	r16, r28
    4316:	03 54       	subi	r16, 0x43	; 67
    4318:	1f 4f       	sbci	r17, 0xFF	; 255
    431a:	fe 01       	movw	r30, r28
    431c:	ef 53       	subi	r30, 0x3F	; 63
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	60 81       	ld	r22, Z
    4322:	71 81       	ldd	r23, Z+1	; 0x01
    4324:	82 81       	ldd	r24, Z+2	; 0x02
    4326:	93 81       	ldd	r25, Z+3	; 0x03
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	4a e7       	ldi	r20, 0x7A	; 122
    432e:	55 e4       	ldi	r21, 0x45	; 69
    4330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4334:	dc 01       	movw	r26, r24
    4336:	cb 01       	movw	r24, r22
    4338:	f8 01       	movw	r30, r16
    433a:	80 83       	st	Z, r24
    433c:	91 83       	std	Z+1, r25	; 0x01
    433e:	a2 83       	std	Z+2, r26	; 0x02
    4340:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4342:	fe 01       	movw	r30, r28
    4344:	e3 54       	subi	r30, 0x43	; 67
    4346:	ff 4f       	sbci	r31, 0xFF	; 255
    4348:	60 81       	ld	r22, Z
    434a:	71 81       	ldd	r23, Z+1	; 0x01
    434c:	82 81       	ldd	r24, Z+2	; 0x02
    434e:	93 81       	ldd	r25, Z+3	; 0x03
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	40 e8       	ldi	r20, 0x80	; 128
    4356:	5f e3       	ldi	r21, 0x3F	; 63
    4358:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    435c:	88 23       	and	r24, r24
    435e:	44 f4       	brge	.+16     	; 0x4370 <main+0x23f2>
		__ticks = 1;
    4360:	fe 01       	movw	r30, r28
    4362:	e5 54       	subi	r30, 0x45	; 69
    4364:	ff 4f       	sbci	r31, 0xFF	; 255
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	91 83       	std	Z+1, r25	; 0x01
    436c:	80 83       	st	Z, r24
    436e:	64 c0       	rjmp	.+200    	; 0x4438 <main+0x24ba>
	else if (__tmp > 65535)
    4370:	fe 01       	movw	r30, r28
    4372:	e3 54       	subi	r30, 0x43	; 67
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	60 81       	ld	r22, Z
    4378:	71 81       	ldd	r23, Z+1	; 0x01
    437a:	82 81       	ldd	r24, Z+2	; 0x02
    437c:	93 81       	ldd	r25, Z+3	; 0x03
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	3f ef       	ldi	r19, 0xFF	; 255
    4382:	4f e7       	ldi	r20, 0x7F	; 127
    4384:	57 e4       	ldi	r21, 0x47	; 71
    4386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    438a:	18 16       	cp	r1, r24
    438c:	0c f0       	brlt	.+2      	; 0x4390 <main+0x2412>
    438e:	43 c0       	rjmp	.+134    	; 0x4416 <main+0x2498>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4390:	fe 01       	movw	r30, r28
    4392:	ef 53       	subi	r30, 0x3F	; 63
    4394:	ff 4f       	sbci	r31, 0xFF	; 255
    4396:	60 81       	ld	r22, Z
    4398:	71 81       	ldd	r23, Z+1	; 0x01
    439a:	82 81       	ldd	r24, Z+2	; 0x02
    439c:	93 81       	ldd	r25, Z+3	; 0x03
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	40 e2       	ldi	r20, 0x20	; 32
    43a4:	51 e4       	ldi	r21, 0x41	; 65
    43a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	8e 01       	movw	r16, r28
    43b0:	05 54       	subi	r16, 0x45	; 69
    43b2:	1f 4f       	sbci	r17, 0xFF	; 255
    43b4:	bc 01       	movw	r22, r24
    43b6:	cd 01       	movw	r24, r26
    43b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	f8 01       	movw	r30, r16
    43c2:	91 83       	std	Z+1, r25	; 0x01
    43c4:	80 83       	st	Z, r24
    43c6:	1f c0       	rjmp	.+62     	; 0x4406 <main+0x2488>
    43c8:	fe 01       	movw	r30, r28
    43ca:	e7 54       	subi	r30, 0x47	; 71
    43cc:	ff 4f       	sbci	r31, 0xFF	; 255
    43ce:	80 e9       	ldi	r24, 0x90	; 144
    43d0:	91 e0       	ldi	r25, 0x01	; 1
    43d2:	91 83       	std	Z+1, r25	; 0x01
    43d4:	80 83       	st	Z, r24
    43d6:	fe 01       	movw	r30, r28
    43d8:	e7 54       	subi	r30, 0x47	; 71
    43da:	ff 4f       	sbci	r31, 0xFF	; 255
    43dc:	80 81       	ld	r24, Z
    43de:	91 81       	ldd	r25, Z+1	; 0x01
    43e0:	01 97       	sbiw	r24, 0x01	; 1
    43e2:	f1 f7       	brne	.-4      	; 0x43e0 <main+0x2462>
    43e4:	fe 01       	movw	r30, r28
    43e6:	e7 54       	subi	r30, 0x47	; 71
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	91 83       	std	Z+1, r25	; 0x01
    43ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43ee:	de 01       	movw	r26, r28
    43f0:	a5 54       	subi	r26, 0x45	; 69
    43f2:	bf 4f       	sbci	r27, 0xFF	; 255
    43f4:	fe 01       	movw	r30, r28
    43f6:	e5 54       	subi	r30, 0x45	; 69
    43f8:	ff 4f       	sbci	r31, 0xFF	; 255
    43fa:	80 81       	ld	r24, Z
    43fc:	91 81       	ldd	r25, Z+1	; 0x01
    43fe:	01 97       	sbiw	r24, 0x01	; 1
    4400:	11 96       	adiw	r26, 0x01	; 1
    4402:	9c 93       	st	X, r25
    4404:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4406:	fe 01       	movw	r30, r28
    4408:	e5 54       	subi	r30, 0x45	; 69
    440a:	ff 4f       	sbci	r31, 0xFF	; 255
    440c:	80 81       	ld	r24, Z
    440e:	91 81       	ldd	r25, Z+1	; 0x01
    4410:	00 97       	sbiw	r24, 0x00	; 0
    4412:	d1 f6       	brne	.-76     	; 0x43c8 <main+0x244a>
    4414:	27 c0       	rjmp	.+78     	; 0x4464 <main+0x24e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4416:	8e 01       	movw	r16, r28
    4418:	05 54       	subi	r16, 0x45	; 69
    441a:	1f 4f       	sbci	r17, 0xFF	; 255
    441c:	fe 01       	movw	r30, r28
    441e:	e3 54       	subi	r30, 0x43	; 67
    4420:	ff 4f       	sbci	r31, 0xFF	; 255
    4422:	60 81       	ld	r22, Z
    4424:	71 81       	ldd	r23, Z+1	; 0x01
    4426:	82 81       	ldd	r24, Z+2	; 0x02
    4428:	93 81       	ldd	r25, Z+3	; 0x03
    442a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    442e:	dc 01       	movw	r26, r24
    4430:	cb 01       	movw	r24, r22
    4432:	f8 01       	movw	r30, r16
    4434:	91 83       	std	Z+1, r25	; 0x01
    4436:	80 83       	st	Z, r24
    4438:	de 01       	movw	r26, r28
    443a:	a9 54       	subi	r26, 0x49	; 73
    443c:	bf 4f       	sbci	r27, 0xFF	; 255
    443e:	fe 01       	movw	r30, r28
    4440:	e5 54       	subi	r30, 0x45	; 69
    4442:	ff 4f       	sbci	r31, 0xFF	; 255
    4444:	80 81       	ld	r24, Z
    4446:	91 81       	ldd	r25, Z+1	; 0x01
    4448:	8d 93       	st	X+, r24
    444a:	9c 93       	st	X, r25
    444c:	fe 01       	movw	r30, r28
    444e:	e9 54       	subi	r30, 0x49	; 73
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	80 81       	ld	r24, Z
    4454:	91 81       	ldd	r25, Z+1	; 0x01
    4456:	01 97       	sbiw	r24, 0x01	; 1
    4458:	f1 f7       	brne	.-4      	; 0x4456 <main+0x24d8>
    445a:	fe 01       	movw	r30, r28
    445c:	e9 54       	subi	r30, 0x49	; 73
    445e:	ff 4f       	sbci	r31, 0xFF	; 255
    4460:	91 83       	std	Z+1, r25	; 0x01
    4462:	80 83       	st	Z, r24
						_delay_ms(500);
						LCD_CLEAR_SCREEN();
    4464:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
						if (pass_tries_count>= TRIES_ALLOWED)
    4468:	fe 01       	movw	r30, r28
    446a:	e1 52       	subi	r30, 0x21	; 33
    446c:	fe 4f       	sbci	r31, 0xFE	; 254
    446e:	80 81       	ld	r24, Z
    4470:	83 30       	cpi	r24, 0x03	; 3
    4472:	30 f0       	brcs	.+12     	; 0x4480 <main+0x2502>
						{
							block_mode_flag = TRUE;
    4474:	fe 01       	movw	r30, r28
    4476:	ee 51       	subi	r30, 0x1E	; 30
    4478:	fe 4f       	sbci	r31, 0xFE	; 254
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	80 83       	st	Z, r24
    447e:	07 c0       	rjmp	.+14     	; 0x448e <main+0x2510>
					}
				}
				break;

			case CHECK_GUEST_MODE:
				while (login_mode != GUEST)
    4480:	fe 01       	movw	r30, r28
    4482:	ed 51       	subi	r30, 0x1D	; 29
    4484:	fe 4f       	sbci	r31, 0xFE	; 254
    4486:	80 81       	ld	r24, Z
    4488:	82 30       	cpi	r24, 0x02	; 2
    448a:	09 f0       	breq	.+2      	; 0x448e <main+0x2510>
    448c:	b2 cb       	rjmp	.-2204   	; 0x3bf2 <main+0x1c74>
			LCD_CLEAR_SCREEN();
			LCD_WriteString("session timeout");
			_delay_ms(1000);
		}

		while(login_mode == NO_MODE)
    448e:	fe 01       	movw	r30, r28
    4490:	ed 51       	subi	r30, 0x1D	; 29
    4492:	fe 4f       	sbci	r31, 0xFE	; 254
    4494:	80 81       	ld	r24, Z
    4496:	88 23       	and	r24, r24
    4498:	11 f4       	brne	.+4      	; 0x449e <main+0x2520>
    449a:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <main+0xfaa>


			}
		}

		u8 show_menu = MAIN_MENU;
    449e:	fe 01       	movw	r30, r28
    44a0:	e2 52       	subi	r30, 0x22	; 34
    44a2:	fe 4f       	sbci	r31, 0xFE	; 254
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	80 83       	st	Z, r24
    44a8:	0c 94 61 2d 	jmp	0x5ac2	; 0x5ac2 <main+0x3b44>
		while (timeout_flag != TRUE)
		{
			key_pressed = NOT_PRESSED;
    44ac:	fe 01       	movw	r30, r28
    44ae:	ef 51       	subi	r30, 0x1F	; 31
    44b0:	fe 4f       	sbci	r31, 0xFE	; 254
    44b2:	8f ef       	ldi	r24, 0xFF	; 255
    44b4:	80 83       	st	Z, r24
			switch(show_menu)
    44b6:	fe 01       	movw	r30, r28
    44b8:	e2 52       	subi	r30, 0x22	; 34
    44ba:	fe 4f       	sbci	r31, 0xFE	; 254
    44bc:	80 81       	ld	r24, Z
    44be:	28 2f       	mov	r18, r24
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	cd 50       	subi	r28, 0x0D	; 13
    44c4:	de 4f       	sbci	r29, 0xFE	; 254
    44c6:	39 83       	std	Y+1, r19	; 0x01
    44c8:	28 83       	st	Y, r18
    44ca:	c3 5f       	subi	r28, 0xF3	; 243
    44cc:	d1 40       	sbci	r29, 0x01	; 1
    44ce:	cd 50       	subi	r28, 0x0D	; 13
    44d0:	de 4f       	sbci	r29, 0xFE	; 254
    44d2:	88 81       	ld	r24, Y
    44d4:	99 81       	ldd	r25, Y+1	; 0x01
    44d6:	c3 5f       	subi	r28, 0xF3	; 243
    44d8:	d1 40       	sbci	r29, 0x01	; 1
    44da:	85 30       	cpi	r24, 0x05	; 5
    44dc:	91 05       	cpc	r25, r1
    44de:	09 f4       	brne	.+2      	; 0x44e2 <main+0x2564>
    44e0:	3b c6       	rjmp	.+3190   	; 0x5158 <main+0x31da>
    44e2:	cd 50       	subi	r28, 0x0D	; 13
    44e4:	de 4f       	sbci	r29, 0xFE	; 254
    44e6:	e8 81       	ld	r30, Y
    44e8:	f9 81       	ldd	r31, Y+1	; 0x01
    44ea:	c3 5f       	subi	r28, 0xF3	; 243
    44ec:	d1 40       	sbci	r29, 0x01	; 1
    44ee:	e6 30       	cpi	r30, 0x06	; 6
    44f0:	f1 05       	cpc	r31, r1
    44f2:	ac f5       	brge	.+106    	; 0x455e <main+0x25e0>
    44f4:	cd 50       	subi	r28, 0x0D	; 13
    44f6:	de 4f       	sbci	r29, 0xFE	; 254
    44f8:	28 81       	ld	r18, Y
    44fa:	39 81       	ldd	r19, Y+1	; 0x01
    44fc:	c3 5f       	subi	r28, 0xF3	; 243
    44fe:	d1 40       	sbci	r29, 0x01	; 1
    4500:	22 30       	cpi	r18, 0x02	; 2
    4502:	31 05       	cpc	r19, r1
    4504:	09 f4       	brne	.+2      	; 0x4508 <main+0x258a>
    4506:	6c c2       	rjmp	.+1240   	; 0x49e0 <main+0x2a62>
    4508:	cd 50       	subi	r28, 0x0D	; 13
    450a:	de 4f       	sbci	r29, 0xFE	; 254
    450c:	88 81       	ld	r24, Y
    450e:	99 81       	ldd	r25, Y+1	; 0x01
    4510:	c3 5f       	subi	r28, 0xF3	; 243
    4512:	d1 40       	sbci	r29, 0x01	; 1
    4514:	83 30       	cpi	r24, 0x03	; 3
    4516:	91 05       	cpc	r25, r1
    4518:	64 f4       	brge	.+24     	; 0x4532 <main+0x25b4>
    451a:	cd 50       	subi	r28, 0x0D	; 13
    451c:	de 4f       	sbci	r29, 0xFE	; 254
    451e:	e8 81       	ld	r30, Y
    4520:	f9 81       	ldd	r31, Y+1	; 0x01
    4522:	c3 5f       	subi	r28, 0xF3	; 243
    4524:	d1 40       	sbci	r29, 0x01	; 1
    4526:	e1 30       	cpi	r30, 0x01	; 1
    4528:	f1 05       	cpc	r31, r1
    452a:	09 f4       	brne	.+2      	; 0x452e <main+0x25b0>
    452c:	57 c0       	rjmp	.+174    	; 0x45dc <main+0x265e>
    452e:	0c 94 61 2d 	jmp	0x5ac2	; 0x5ac2 <main+0x3b44>
    4532:	cd 50       	subi	r28, 0x0D	; 13
    4534:	de 4f       	sbci	r29, 0xFE	; 254
    4536:	28 81       	ld	r18, Y
    4538:	39 81       	ldd	r19, Y+1	; 0x01
    453a:	c3 5f       	subi	r28, 0xF3	; 243
    453c:	d1 40       	sbci	r29, 0x01	; 1
    453e:	23 30       	cpi	r18, 0x03	; 3
    4540:	31 05       	cpc	r19, r1
    4542:	09 f4       	brne	.+2      	; 0x4546 <main+0x25c8>
    4544:	ef c5       	rjmp	.+3038   	; 0x5124 <main+0x31a6>
    4546:	cd 50       	subi	r28, 0x0D	; 13
    4548:	de 4f       	sbci	r29, 0xFE	; 254
    454a:	88 81       	ld	r24, Y
    454c:	99 81       	ldd	r25, Y+1	; 0x01
    454e:	c3 5f       	subi	r28, 0xF3	; 243
    4550:	d1 40       	sbci	r29, 0x01	; 1
    4552:	84 30       	cpi	r24, 0x04	; 4
    4554:	91 05       	cpc	r25, r1
    4556:	09 f4       	brne	.+2      	; 0x455a <main+0x25dc>
    4558:	f2 c5       	rjmp	.+3044   	; 0x513e <main+0x31c0>
    455a:	0c 94 61 2d 	jmp	0x5ac2	; 0x5ac2 <main+0x3b44>
    455e:	cd 50       	subi	r28, 0x0D	; 13
    4560:	de 4f       	sbci	r29, 0xFE	; 254
    4562:	e8 81       	ld	r30, Y
    4564:	f9 81       	ldd	r31, Y+1	; 0x01
    4566:	c3 5f       	subi	r28, 0xF3	; 243
    4568:	d1 40       	sbci	r29, 0x01	; 1
    456a:	e8 30       	cpi	r30, 0x08	; 8
    456c:	f1 05       	cpc	r31, r1
    456e:	09 f4       	brne	.+2      	; 0x4572 <main+0x25f4>
    4570:	0e c4       	rjmp	.+2076   	; 0x4d8e <main+0x2e10>
    4572:	cd 50       	subi	r28, 0x0D	; 13
    4574:	de 4f       	sbci	r29, 0xFE	; 254
    4576:	28 81       	ld	r18, Y
    4578:	39 81       	ldd	r19, Y+1	; 0x01
    457a:	c3 5f       	subi	r28, 0xF3	; 243
    457c:	d1 40       	sbci	r29, 0x01	; 1
    457e:	29 30       	cpi	r18, 0x09	; 9
    4580:	31 05       	cpc	r19, r1
    4582:	b4 f4       	brge	.+44     	; 0x45b0 <main+0x2632>
    4584:	cd 50       	subi	r28, 0x0D	; 13
    4586:	de 4f       	sbci	r29, 0xFE	; 254
    4588:	88 81       	ld	r24, Y
    458a:	99 81       	ldd	r25, Y+1	; 0x01
    458c:	c3 5f       	subi	r28, 0xF3	; 243
    458e:	d1 40       	sbci	r29, 0x01	; 1
    4590:	86 30       	cpi	r24, 0x06	; 6
    4592:	91 05       	cpc	r25, r1
    4594:	09 f4       	brne	.+2      	; 0x4598 <main+0x261a>
    4596:	ed c5       	rjmp	.+3034   	; 0x5172 <main+0x31f4>
    4598:	cd 50       	subi	r28, 0x0D	; 13
    459a:	de 4f       	sbci	r29, 0xFE	; 254
    459c:	e8 81       	ld	r30, Y
    459e:	f9 81       	ldd	r31, Y+1	; 0x01
    45a0:	c3 5f       	subi	r28, 0xF3	; 243
    45a2:	d1 40       	sbci	r29, 0x01	; 1
    45a4:	e7 30       	cpi	r30, 0x07	; 7
    45a6:	f1 05       	cpc	r31, r1
    45a8:	09 f4       	brne	.+2      	; 0x45ac <main+0x262e>
    45aa:	fc c5       	rjmp	.+3064   	; 0x51a4 <main+0x3226>
    45ac:	0c 94 61 2d 	jmp	0x5ac2	; 0x5ac2 <main+0x3b44>
    45b0:	cd 50       	subi	r28, 0x0D	; 13
    45b2:	de 4f       	sbci	r29, 0xFE	; 254
    45b4:	28 81       	ld	r18, Y
    45b6:	39 81       	ldd	r19, Y+1	; 0x01
    45b8:	c3 5f       	subi	r28, 0xF3	; 243
    45ba:	d1 40       	sbci	r29, 0x01	; 1
    45bc:	29 30       	cpi	r18, 0x09	; 9
    45be:	31 05       	cpc	r19, r1
    45c0:	09 f4       	brne	.+2      	; 0x45c4 <main+0x2646>
    45c2:	fd c5       	rjmp	.+3066   	; 0x51be <main+0x3240>
    45c4:	cd 50       	subi	r28, 0x0D	; 13
    45c6:	de 4f       	sbci	r29, 0xFE	; 254
    45c8:	88 81       	ld	r24, Y
    45ca:	99 81       	ldd	r25, Y+1	; 0x01
    45cc:	c3 5f       	subi	r28, 0xF3	; 243
    45ce:	d1 40       	sbci	r29, 0x01	; 1
    45d0:	8a 30       	cpi	r24, 0x0A	; 10
    45d2:	91 05       	cpc	r25, r1
    45d4:	09 f4       	brne	.+2      	; 0x45d8 <main+0x265a>
    45d6:	00 c6       	rjmp	.+3072   	; 0x51d8 <main+0x325a>
    45d8:	0c 94 61 2d 	jmp	0x5ac2	; 0x5ac2 <main+0x3b44>
			{
			case MAIN_MENU:
				do{
					LCD_CLEAR_SCREEN();
    45dc:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
					LCD_WriteString("1:Room1 2:Room2");
    45e0:	82 e7       	ldi	r24, 0x72	; 114
    45e2:	91 e0       	ldi	r25, 0x01	; 1
    45e4:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
					LCD_MOVE_CURSOR(2,1);
    45e8:	82 e0       	ldi	r24, 0x02	; 2
    45ea:	61 e0       	ldi	r22, 0x01	; 1
    45ec:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
					if (login_mode ==ADMIN)
    45f0:	fe 01       	movw	r30, r28
    45f2:	ed 51       	subi	r30, 0x1D	; 29
    45f4:	fe 4f       	sbci	r31, 0xFE	; 254
    45f6:	80 81       	ld	r24, Z
    45f8:	81 30       	cpi	r24, 0x01	; 1
    45fa:	29 f4       	brne	.+10     	; 0x4606 <main+0x2688>
					{
						LCD_WriteString("3:Room3 4:More ");
    45fc:	82 e8       	ldi	r24, 0x82	; 130
    45fe:	91 e0       	ldi	r25, 0x01	; 1
    4600:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    4604:	0a c0       	rjmp	.+20     	; 0x461a <main+0x269c>
					}
					else if (login_mode == GUEST)
    4606:	fe 01       	movw	r30, r28
    4608:	ed 51       	subi	r30, 0x1D	; 29
    460a:	fe 4f       	sbci	r31, 0xFE	; 254
    460c:	80 81       	ld	r24, Z
    460e:	82 30       	cpi	r24, 0x02	; 2
    4610:	21 f4       	brne	.+8      	; 0x461a <main+0x269c>
					{
						LCD_WriteString("3:Room3 4:ROOM4 ");
    4612:	82 e9       	ldi	r24, 0x92	; 146
    4614:	91 e0       	ldi	r25, 0x01	; 1
    4616:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>

					}

					key_pressed = GetKeyPressed(login_mode);
    461a:	fe 01       	movw	r30, r28
    461c:	ed 51       	subi	r30, 0x1D	; 29
    461e:	fe 4f       	sbci	r31, 0xFE	; 254
    4620:	80 81       	ld	r24, Z
    4622:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <GetKeyPressed>
    4626:	fe 01       	movw	r30, r28
    4628:	ef 51       	subi	r30, 0x1F	; 31
    462a:	fe 4f       	sbci	r31, 0xFE	; 254
    462c:	80 83       	st	Z, r24
    462e:	fe 01       	movw	r30, r28
    4630:	ed 54       	subi	r30, 0x4D	; 77
    4632:	ff 4f       	sbci	r31, 0xFF	; 255
    4634:	80 e0       	ldi	r24, 0x00	; 0
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	a8 ec       	ldi	r26, 0xC8	; 200
    463a:	b2 e4       	ldi	r27, 0x42	; 66
    463c:	80 83       	st	Z, r24
    463e:	91 83       	std	Z+1, r25	; 0x01
    4640:	a2 83       	std	Z+2, r26	; 0x02
    4642:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4644:	8e 01       	movw	r16, r28
    4646:	01 55       	subi	r16, 0x51	; 81
    4648:	1f 4f       	sbci	r17, 0xFF	; 255
    464a:	fe 01       	movw	r30, r28
    464c:	ed 54       	subi	r30, 0x4D	; 77
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	60 81       	ld	r22, Z
    4652:	71 81       	ldd	r23, Z+1	; 0x01
    4654:	82 81       	ldd	r24, Z+2	; 0x02
    4656:	93 81       	ldd	r25, Z+3	; 0x03
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	4a e7       	ldi	r20, 0x7A	; 122
    465e:	55 e4       	ldi	r21, 0x45	; 69
    4660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	f8 01       	movw	r30, r16
    466a:	80 83       	st	Z, r24
    466c:	91 83       	std	Z+1, r25	; 0x01
    466e:	a2 83       	std	Z+2, r26	; 0x02
    4670:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4672:	fe 01       	movw	r30, r28
    4674:	e1 55       	subi	r30, 0x51	; 81
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	60 81       	ld	r22, Z
    467a:	71 81       	ldd	r23, Z+1	; 0x01
    467c:	82 81       	ldd	r24, Z+2	; 0x02
    467e:	93 81       	ldd	r25, Z+3	; 0x03
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	40 e8       	ldi	r20, 0x80	; 128
    4686:	5f e3       	ldi	r21, 0x3F	; 63
    4688:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    468c:	88 23       	and	r24, r24
    468e:	44 f4       	brge	.+16     	; 0x46a0 <main+0x2722>
		__ticks = 1;
    4690:	fe 01       	movw	r30, r28
    4692:	e3 55       	subi	r30, 0x53	; 83
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	91 83       	std	Z+1, r25	; 0x01
    469c:	80 83       	st	Z, r24
    469e:	64 c0       	rjmp	.+200    	; 0x4768 <main+0x27ea>
	else if (__tmp > 65535)
    46a0:	fe 01       	movw	r30, r28
    46a2:	e1 55       	subi	r30, 0x51	; 81
    46a4:	ff 4f       	sbci	r31, 0xFF	; 255
    46a6:	60 81       	ld	r22, Z
    46a8:	71 81       	ldd	r23, Z+1	; 0x01
    46aa:	82 81       	ldd	r24, Z+2	; 0x02
    46ac:	93 81       	ldd	r25, Z+3	; 0x03
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	3f ef       	ldi	r19, 0xFF	; 255
    46b2:	4f e7       	ldi	r20, 0x7F	; 127
    46b4:	57 e4       	ldi	r21, 0x47	; 71
    46b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46ba:	18 16       	cp	r1, r24
    46bc:	0c f0       	brlt	.+2      	; 0x46c0 <main+0x2742>
    46be:	43 c0       	rjmp	.+134    	; 0x4746 <main+0x27c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c0:	fe 01       	movw	r30, r28
    46c2:	ed 54       	subi	r30, 0x4D	; 77
    46c4:	ff 4f       	sbci	r31, 0xFF	; 255
    46c6:	60 81       	ld	r22, Z
    46c8:	71 81       	ldd	r23, Z+1	; 0x01
    46ca:	82 81       	ldd	r24, Z+2	; 0x02
    46cc:	93 81       	ldd	r25, Z+3	; 0x03
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	40 e2       	ldi	r20, 0x20	; 32
    46d4:	51 e4       	ldi	r21, 0x41	; 65
    46d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	8e 01       	movw	r16, r28
    46e0:	03 55       	subi	r16, 0x53	; 83
    46e2:	1f 4f       	sbci	r17, 0xFF	; 255
    46e4:	bc 01       	movw	r22, r24
    46e6:	cd 01       	movw	r24, r26
    46e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ec:	dc 01       	movw	r26, r24
    46ee:	cb 01       	movw	r24, r22
    46f0:	f8 01       	movw	r30, r16
    46f2:	91 83       	std	Z+1, r25	; 0x01
    46f4:	80 83       	st	Z, r24
    46f6:	1f c0       	rjmp	.+62     	; 0x4736 <main+0x27b8>
    46f8:	fe 01       	movw	r30, r28
    46fa:	e5 55       	subi	r30, 0x55	; 85
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	80 e9       	ldi	r24, 0x90	; 144
    4700:	91 e0       	ldi	r25, 0x01	; 1
    4702:	91 83       	std	Z+1, r25	; 0x01
    4704:	80 83       	st	Z, r24
    4706:	fe 01       	movw	r30, r28
    4708:	e5 55       	subi	r30, 0x55	; 85
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	80 81       	ld	r24, Z
    470e:	91 81       	ldd	r25, Z+1	; 0x01
    4710:	01 97       	sbiw	r24, 0x01	; 1
    4712:	f1 f7       	brne	.-4      	; 0x4710 <main+0x2792>
    4714:	fe 01       	movw	r30, r28
    4716:	e5 55       	subi	r30, 0x55	; 85
    4718:	ff 4f       	sbci	r31, 0xFF	; 255
    471a:	91 83       	std	Z+1, r25	; 0x01
    471c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    471e:	de 01       	movw	r26, r28
    4720:	a3 55       	subi	r26, 0x53	; 83
    4722:	bf 4f       	sbci	r27, 0xFF	; 255
    4724:	fe 01       	movw	r30, r28
    4726:	e3 55       	subi	r30, 0x53	; 83
    4728:	ff 4f       	sbci	r31, 0xFF	; 255
    472a:	80 81       	ld	r24, Z
    472c:	91 81       	ldd	r25, Z+1	; 0x01
    472e:	01 97       	sbiw	r24, 0x01	; 1
    4730:	11 96       	adiw	r26, 0x01	; 1
    4732:	9c 93       	st	X, r25
    4734:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4736:	fe 01       	movw	r30, r28
    4738:	e3 55       	subi	r30, 0x53	; 83
    473a:	ff 4f       	sbci	r31, 0xFF	; 255
    473c:	80 81       	ld	r24, Z
    473e:	91 81       	ldd	r25, Z+1	; 0x01
    4740:	00 97       	sbiw	r24, 0x00	; 0
    4742:	d1 f6       	brne	.-76     	; 0x46f8 <main+0x277a>
    4744:	28 c0       	rjmp	.+80     	; 0x4796 <main+0x2818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4746:	8e 01       	movw	r16, r28
    4748:	03 55       	subi	r16, 0x53	; 83
    474a:	1f 4f       	sbci	r17, 0xFF	; 255
    474c:	fe 01       	movw	r30, r28
    474e:	e1 55       	subi	r30, 0x51	; 81
    4750:	ff 4f       	sbci	r31, 0xFF	; 255
    4752:	60 81       	ld	r22, Z
    4754:	71 81       	ldd	r23, Z+1	; 0x01
    4756:	82 81       	ldd	r24, Z+2	; 0x02
    4758:	93 81       	ldd	r25, Z+3	; 0x03
    475a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    475e:	dc 01       	movw	r26, r24
    4760:	cb 01       	movw	r24, r22
    4762:	f8 01       	movw	r30, r16
    4764:	91 83       	std	Z+1, r25	; 0x01
    4766:	80 83       	st	Z, r24
    4768:	de 01       	movw	r26, r28
    476a:	a7 55       	subi	r26, 0x57	; 87
    476c:	bf 4f       	sbci	r27, 0xFF	; 255
    476e:	fe 01       	movw	r30, r28
    4770:	e3 55       	subi	r30, 0x53	; 83
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	80 81       	ld	r24, Z
    4776:	91 81       	ldd	r25, Z+1	; 0x01
    4778:	11 96       	adiw	r26, 0x01	; 1
    477a:	9c 93       	st	X, r25
    477c:	8e 93       	st	-X, r24
    477e:	fe 01       	movw	r30, r28
    4780:	e7 55       	subi	r30, 0x57	; 87
    4782:	ff 4f       	sbci	r31, 0xFF	; 255
    4784:	80 81       	ld	r24, Z
    4786:	91 81       	ldd	r25, Z+1	; 0x01
    4788:	01 97       	sbiw	r24, 0x01	; 1
    478a:	f1 f7       	brne	.-4      	; 0x4788 <main+0x280a>
    478c:	fe 01       	movw	r30, r28
    478e:	e7 55       	subi	r30, 0x57	; 87
    4790:	ff 4f       	sbci	r31, 0xFF	; 255
    4792:	91 83       	std	Z+1, r25	; 0x01
    4794:	80 83       	st	Z, r24
					_delay_ms(100);

					if (key_pressed == SELECT_ROOM1)
    4796:	fe 01       	movw	r30, r28
    4798:	ef 51       	subi	r30, 0x1F	; 31
    479a:	fe 4f       	sbci	r31, 0xFE	; 254
    479c:	80 81       	ld	r24, Z
    479e:	81 33       	cpi	r24, 0x31	; 49
    47a0:	31 f4       	brne	.+12     	; 0x47ae <main+0x2830>
					{
						show_menu = ROOM1_MENU;
    47a2:	fe 01       	movw	r30, r28
    47a4:	e2 52       	subi	r30, 0x22	; 34
    47a6:	fe 4f       	sbci	r31, 0xFE	; 254
    47a8:	83 e0       	ldi	r24, 0x03	; 3
    47aa:	80 83       	st	Z, r24
    47ac:	04 c1       	rjmp	.+520    	; 0x49b6 <main+0x2a38>
					}
					else if (key_pressed ==  SELECT_ROOM2)
    47ae:	fe 01       	movw	r30, r28
    47b0:	ef 51       	subi	r30, 0x1F	; 31
    47b2:	fe 4f       	sbci	r31, 0xFE	; 254
    47b4:	80 81       	ld	r24, Z
    47b6:	82 33       	cpi	r24, 0x32	; 50
    47b8:	31 f4       	brne	.+12     	; 0x47c6 <main+0x2848>
					{
						show_menu = ROOM2_MENU;
    47ba:	fe 01       	movw	r30, r28
    47bc:	e2 52       	subi	r30, 0x22	; 34
    47be:	fe 4f       	sbci	r31, 0xFE	; 254
    47c0:	84 e0       	ldi	r24, 0x04	; 4
    47c2:	80 83       	st	Z, r24
    47c4:	f8 c0       	rjmp	.+496    	; 0x49b6 <main+0x2a38>
					}
					else if(key_pressed == SELECT_ROOM3)
    47c6:	fe 01       	movw	r30, r28
    47c8:	ef 51       	subi	r30, 0x1F	; 31
    47ca:	fe 4f       	sbci	r31, 0xFE	; 254
    47cc:	80 81       	ld	r24, Z
    47ce:	83 33       	cpi	r24, 0x33	; 51
    47d0:	31 f4       	brne	.+12     	; 0x47de <main+0x2860>
					{
						show_menu = ROOM3_MENU;
    47d2:	fe 01       	movw	r30, r28
    47d4:	e2 52       	subi	r30, 0x22	; 34
    47d6:	fe 4f       	sbci	r31, 0xFE	; 254
    47d8:	85 e0       	ldi	r24, 0x05	; 5
    47da:	80 83       	st	Z, r24
    47dc:	ec c0       	rjmp	.+472    	; 0x49b6 <main+0x2a38>
					}
					else if ((key_pressed == SELECT_ROOM4) && (login_mode == GUEST))
    47de:	fe 01       	movw	r30, r28
    47e0:	ef 51       	subi	r30, 0x1F	; 31
    47e2:	fe 4f       	sbci	r31, 0xFE	; 254
    47e4:	80 81       	ld	r24, Z
    47e6:	84 33       	cpi	r24, 0x34	; 52
    47e8:	61 f4       	brne	.+24     	; 0x4802 <main+0x2884>
    47ea:	fe 01       	movw	r30, r28
    47ec:	ed 51       	subi	r30, 0x1D	; 29
    47ee:	fe 4f       	sbci	r31, 0xFE	; 254
    47f0:	80 81       	ld	r24, Z
    47f2:	82 30       	cpi	r24, 0x02	; 2
    47f4:	31 f4       	brne	.+12     	; 0x4802 <main+0x2884>
					{
						show_menu =ROOM4_MENU;
    47f6:	fe 01       	movw	r30, r28
    47f8:	e2 52       	subi	r30, 0x22	; 34
    47fa:	fe 4f       	sbci	r31, 0xFE	; 254
    47fc:	86 e0       	ldi	r24, 0x06	; 6
    47fe:	80 83       	st	Z, r24
    4800:	da c0       	rjmp	.+436    	; 0x49b6 <main+0x2a38>
					}
					else if ((key_pressed == ADMIN_MORE_OPTION) && (login_mode == ADMIN))
    4802:	fe 01       	movw	r30, r28
    4804:	ef 51       	subi	r30, 0x1F	; 31
    4806:	fe 4f       	sbci	r31, 0xFE	; 254
    4808:	80 81       	ld	r24, Z
    480a:	84 33       	cpi	r24, 0x34	; 52
    480c:	61 f4       	brne	.+24     	; 0x4826 <main+0x28a8>
    480e:	fe 01       	movw	r30, r28
    4810:	ed 51       	subi	r30, 0x1D	; 29
    4812:	fe 4f       	sbci	r31, 0xFE	; 254
    4814:	80 81       	ld	r24, Z
    4816:	81 30       	cpi	r24, 0x01	; 1
    4818:	31 f4       	brne	.+12     	; 0x4826 <main+0x28a8>
					{
						show_menu = MORE_MENU;
    481a:	fe 01       	movw	r30, r28
    481c:	e2 52       	subi	r30, 0x22	; 34
    481e:	fe 4f       	sbci	r31, 0xFE	; 254
    4820:	82 e0       	ldi	r24, 0x02	; 2
    4822:	80 83       	st	Z, r24
    4824:	c8 c0       	rjmp	.+400    	; 0x49b6 <main+0x2a38>
					}
					else if (key_pressed != NOT_PRESSED && key_pressed != '0')
    4826:	fe 01       	movw	r30, r28
    4828:	ef 51       	subi	r30, 0x1F	; 31
    482a:	fe 4f       	sbci	r31, 0xFE	; 254
    482c:	80 81       	ld	r24, Z
    482e:	8f 3f       	cpi	r24, 0xFF	; 255
    4830:	09 f4       	brne	.+2      	; 0x4834 <main+0x28b6>
    4832:	c1 c0       	rjmp	.+386    	; 0x49b6 <main+0x2a38>
    4834:	fe 01       	movw	r30, r28
    4836:	ef 51       	subi	r30, 0x1F	; 31
    4838:	fe 4f       	sbci	r31, 0xFE	; 254
    483a:	80 81       	ld	r24, Z
    483c:	80 33       	cpi	r24, 0x30	; 48
    483e:	09 f4       	brne	.+2      	; 0x4842 <main+0x28c4>
    4840:	ba c0       	rjmp	.+372    	; 0x49b6 <main+0x2a38>
										{
											LCD_CLEAR_SCREEN();
    4842:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
											LCD_WriteString("wrong input");
    4846:	83 ea       	ldi	r24, 0xA3	; 163
    4848:	91 e0       	ldi	r25, 0x01	; 1
    484a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    484e:	fe 01       	movw	r30, r28
    4850:	eb 55       	subi	r30, 0x5B	; 91
    4852:	ff 4f       	sbci	r31, 0xFF	; 255
    4854:	80 e0       	ldi	r24, 0x00	; 0
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	aa ef       	ldi	r26, 0xFA	; 250
    485a:	b3 e4       	ldi	r27, 0x43	; 67
    485c:	80 83       	st	Z, r24
    485e:	91 83       	std	Z+1, r25	; 0x01
    4860:	a2 83       	std	Z+2, r26	; 0x02
    4862:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4864:	8e 01       	movw	r16, r28
    4866:	0f 55       	subi	r16, 0x5F	; 95
    4868:	1f 4f       	sbci	r17, 0xFF	; 255
    486a:	fe 01       	movw	r30, r28
    486c:	eb 55       	subi	r30, 0x5B	; 91
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	60 81       	ld	r22, Z
    4872:	71 81       	ldd	r23, Z+1	; 0x01
    4874:	82 81       	ldd	r24, Z+2	; 0x02
    4876:	93 81       	ldd	r25, Z+3	; 0x03
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	4a e7       	ldi	r20, 0x7A	; 122
    487e:	55 e4       	ldi	r21, 0x45	; 69
    4880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	f8 01       	movw	r30, r16
    488a:	80 83       	st	Z, r24
    488c:	91 83       	std	Z+1, r25	; 0x01
    488e:	a2 83       	std	Z+2, r26	; 0x02
    4890:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4892:	fe 01       	movw	r30, r28
    4894:	ef 55       	subi	r30, 0x5F	; 95
    4896:	ff 4f       	sbci	r31, 0xFF	; 255
    4898:	60 81       	ld	r22, Z
    489a:	71 81       	ldd	r23, Z+1	; 0x01
    489c:	82 81       	ldd	r24, Z+2	; 0x02
    489e:	93 81       	ldd	r25, Z+3	; 0x03
    48a0:	20 e0       	ldi	r18, 0x00	; 0
    48a2:	30 e0       	ldi	r19, 0x00	; 0
    48a4:	40 e8       	ldi	r20, 0x80	; 128
    48a6:	5f e3       	ldi	r21, 0x3F	; 63
    48a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48ac:	88 23       	and	r24, r24
    48ae:	44 f4       	brge	.+16     	; 0x48c0 <main+0x2942>
		__ticks = 1;
    48b0:	fe 01       	movw	r30, r28
    48b2:	e1 56       	subi	r30, 0x61	; 97
    48b4:	ff 4f       	sbci	r31, 0xFF	; 255
    48b6:	81 e0       	ldi	r24, 0x01	; 1
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	91 83       	std	Z+1, r25	; 0x01
    48bc:	80 83       	st	Z, r24
    48be:	64 c0       	rjmp	.+200    	; 0x4988 <main+0x2a0a>
	else if (__tmp > 65535)
    48c0:	fe 01       	movw	r30, r28
    48c2:	ef 55       	subi	r30, 0x5F	; 95
    48c4:	ff 4f       	sbci	r31, 0xFF	; 255
    48c6:	60 81       	ld	r22, Z
    48c8:	71 81       	ldd	r23, Z+1	; 0x01
    48ca:	82 81       	ldd	r24, Z+2	; 0x02
    48cc:	93 81       	ldd	r25, Z+3	; 0x03
    48ce:	20 e0       	ldi	r18, 0x00	; 0
    48d0:	3f ef       	ldi	r19, 0xFF	; 255
    48d2:	4f e7       	ldi	r20, 0x7F	; 127
    48d4:	57 e4       	ldi	r21, 0x47	; 71
    48d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48da:	18 16       	cp	r1, r24
    48dc:	0c f0       	brlt	.+2      	; 0x48e0 <main+0x2962>
    48de:	43 c0       	rjmp	.+134    	; 0x4966 <main+0x29e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48e0:	fe 01       	movw	r30, r28
    48e2:	eb 55       	subi	r30, 0x5B	; 91
    48e4:	ff 4f       	sbci	r31, 0xFF	; 255
    48e6:	60 81       	ld	r22, Z
    48e8:	71 81       	ldd	r23, Z+1	; 0x01
    48ea:	82 81       	ldd	r24, Z+2	; 0x02
    48ec:	93 81       	ldd	r25, Z+3	; 0x03
    48ee:	20 e0       	ldi	r18, 0x00	; 0
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	40 e2       	ldi	r20, 0x20	; 32
    48f4:	51 e4       	ldi	r21, 0x41	; 65
    48f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48fa:	dc 01       	movw	r26, r24
    48fc:	cb 01       	movw	r24, r22
    48fe:	8e 01       	movw	r16, r28
    4900:	01 56       	subi	r16, 0x61	; 97
    4902:	1f 4f       	sbci	r17, 0xFF	; 255
    4904:	bc 01       	movw	r22, r24
    4906:	cd 01       	movw	r24, r26
    4908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    490c:	dc 01       	movw	r26, r24
    490e:	cb 01       	movw	r24, r22
    4910:	f8 01       	movw	r30, r16
    4912:	91 83       	std	Z+1, r25	; 0x01
    4914:	80 83       	st	Z, r24
    4916:	1f c0       	rjmp	.+62     	; 0x4956 <main+0x29d8>
    4918:	fe 01       	movw	r30, r28
    491a:	e3 56       	subi	r30, 0x63	; 99
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	80 e9       	ldi	r24, 0x90	; 144
    4920:	91 e0       	ldi	r25, 0x01	; 1
    4922:	91 83       	std	Z+1, r25	; 0x01
    4924:	80 83       	st	Z, r24
    4926:	fe 01       	movw	r30, r28
    4928:	e3 56       	subi	r30, 0x63	; 99
    492a:	ff 4f       	sbci	r31, 0xFF	; 255
    492c:	80 81       	ld	r24, Z
    492e:	91 81       	ldd	r25, Z+1	; 0x01
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	f1 f7       	brne	.-4      	; 0x4930 <main+0x29b2>
    4934:	fe 01       	movw	r30, r28
    4936:	e3 56       	subi	r30, 0x63	; 99
    4938:	ff 4f       	sbci	r31, 0xFF	; 255
    493a:	91 83       	std	Z+1, r25	; 0x01
    493c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    493e:	de 01       	movw	r26, r28
    4940:	a1 56       	subi	r26, 0x61	; 97
    4942:	bf 4f       	sbci	r27, 0xFF	; 255
    4944:	fe 01       	movw	r30, r28
    4946:	e1 56       	subi	r30, 0x61	; 97
    4948:	ff 4f       	sbci	r31, 0xFF	; 255
    494a:	80 81       	ld	r24, Z
    494c:	91 81       	ldd	r25, Z+1	; 0x01
    494e:	01 97       	sbiw	r24, 0x01	; 1
    4950:	11 96       	adiw	r26, 0x01	; 1
    4952:	9c 93       	st	X, r25
    4954:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4956:	fe 01       	movw	r30, r28
    4958:	e1 56       	subi	r30, 0x61	; 97
    495a:	ff 4f       	sbci	r31, 0xFF	; 255
    495c:	80 81       	ld	r24, Z
    495e:	91 81       	ldd	r25, Z+1	; 0x01
    4960:	00 97       	sbiw	r24, 0x00	; 0
    4962:	d1 f6       	brne	.-76     	; 0x4918 <main+0x299a>
    4964:	28 c0       	rjmp	.+80     	; 0x49b6 <main+0x2a38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4966:	8e 01       	movw	r16, r28
    4968:	01 56       	subi	r16, 0x61	; 97
    496a:	1f 4f       	sbci	r17, 0xFF	; 255
    496c:	fe 01       	movw	r30, r28
    496e:	ef 55       	subi	r30, 0x5F	; 95
    4970:	ff 4f       	sbci	r31, 0xFF	; 255
    4972:	60 81       	ld	r22, Z
    4974:	71 81       	ldd	r23, Z+1	; 0x01
    4976:	82 81       	ldd	r24, Z+2	; 0x02
    4978:	93 81       	ldd	r25, Z+3	; 0x03
    497a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    497e:	dc 01       	movw	r26, r24
    4980:	cb 01       	movw	r24, r22
    4982:	f8 01       	movw	r30, r16
    4984:	91 83       	std	Z+1, r25	; 0x01
    4986:	80 83       	st	Z, r24
    4988:	de 01       	movw	r26, r28
    498a:	a5 56       	subi	r26, 0x65	; 101
    498c:	bf 4f       	sbci	r27, 0xFF	; 255
    498e:	fe 01       	movw	r30, r28
    4990:	e1 56       	subi	r30, 0x61	; 97
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	80 81       	ld	r24, Z
    4996:	91 81       	ldd	r25, Z+1	; 0x01
    4998:	11 96       	adiw	r26, 0x01	; 1
    499a:	9c 93       	st	X, r25
    499c:	8e 93       	st	-X, r24
    499e:	fe 01       	movw	r30, r28
    49a0:	e5 56       	subi	r30, 0x65	; 101
    49a2:	ff 4f       	sbci	r31, 0xFF	; 255
    49a4:	80 81       	ld	r24, Z
    49a6:	91 81       	ldd	r25, Z+1	; 0x01
    49a8:	01 97       	sbiw	r24, 0x01	; 1
    49aa:	f1 f7       	brne	.-4      	; 0x49a8 <main+0x2a2a>
    49ac:	fe 01       	movw	r30, r28
    49ae:	e5 56       	subi	r30, 0x65	; 101
    49b0:	ff 4f       	sbci	r31, 0xFF	; 255
    49b2:	91 83       	std	Z+1, r25	; 0x01
    49b4:	80 83       	st	Z, r24
											_delay_ms(500);
										}

				}while ( ((key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE) );//break the loop in case of valid key or time is out
    49b6:	fe 01       	movw	r30, r28
    49b8:	ef 51       	subi	r30, 0x1F	; 31
    49ba:	fe 4f       	sbci	r31, 0xFE	; 254
    49bc:	80 81       	ld	r24, Z
    49be:	81 33       	cpi	r24, 0x31	; 49
    49c0:	40 f0       	brcs	.+16     	; 0x49d2 <main+0x2a54>
    49c2:	fe 01       	movw	r30, r28
    49c4:	ef 51       	subi	r30, 0x1F	; 31
    49c6:	fe 4f       	sbci	r31, 0xFE	; 254
    49c8:	80 81       	ld	r24, Z
    49ca:	85 33       	cpi	r24, 0x35	; 53
    49cc:	10 f4       	brcc	.+4      	; 0x49d2 <main+0x2a54>
    49ce:	0c 94 61 2d 	jmp	0x5ac2	; 0x5ac2 <main+0x3b44>
    49d2:	80 91 8c 02 	lds	r24, 0x028C
    49d6:	88 23       	and	r24, r24
    49d8:	09 f4       	brne	.+2      	; 0x49dc <main+0x2a5e>
    49da:	00 ce       	rjmp	.-1024   	; 0x45dc <main+0x265e>
    49dc:	0c 94 61 2d 	jmp	0x5ac2	; 0x5ac2 <main+0x3b44>
				break; // end of MAIN_MENU case

			case MORE_MENU :
				do
				{
					LCD_CLEAR_SCREEN();
    49e0:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
					LCD_WriteString("1:Room4    2:TV   ");
    49e4:	8f ea       	ldi	r24, 0xAF	; 175
    49e6:	91 e0       	ldi	r25, 0x01	; 1
    49e8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
					LCD_MOVE_CURSOR(2,1);
    49ec:	82 e0       	ldi	r24, 0x02	; 2
    49ee:	61 e0       	ldi	r22, 0x01	; 1
    49f0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
					LCD_WriteString("3:Air Cond.4:RET");
    49f4:	82 ec       	ldi	r24, 0xC2	; 194
    49f6:	91 e0       	ldi	r25, 0x01	; 1
    49f8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>

					key_pressed = GetKeyPressed(login_mode);
    49fc:	fe 01       	movw	r30, r28
    49fe:	ed 51       	subi	r30, 0x1D	; 29
    4a00:	fe 4f       	sbci	r31, 0xFE	; 254
    4a02:	80 81       	ld	r24, Z
    4a04:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <GetKeyPressed>
    4a08:	fe 01       	movw	r30, r28
    4a0a:	ef 51       	subi	r30, 0x1F	; 31
    4a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a0e:	80 83       	st	Z, r24
    4a10:	fe 01       	movw	r30, r28
    4a12:	e9 56       	subi	r30, 0x69	; 105
    4a14:	ff 4f       	sbci	r31, 0xFF	; 255
    4a16:	80 e0       	ldi	r24, 0x00	; 0
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	a8 ec       	ldi	r26, 0xC8	; 200
    4a1c:	b2 e4       	ldi	r27, 0x42	; 66
    4a1e:	80 83       	st	Z, r24
    4a20:	91 83       	std	Z+1, r25	; 0x01
    4a22:	a2 83       	std	Z+2, r26	; 0x02
    4a24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a26:	8e 01       	movw	r16, r28
    4a28:	0d 56       	subi	r16, 0x6D	; 109
    4a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e9 56       	subi	r30, 0x69	; 105
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	60 81       	ld	r22, Z
    4a34:	71 81       	ldd	r23, Z+1	; 0x01
    4a36:	82 81       	ldd	r24, Z+2	; 0x02
    4a38:	93 81       	ldd	r25, Z+3	; 0x03
    4a3a:	20 e0       	ldi	r18, 0x00	; 0
    4a3c:	30 e0       	ldi	r19, 0x00	; 0
    4a3e:	4a e7       	ldi	r20, 0x7A	; 122
    4a40:	55 e4       	ldi	r21, 0x45	; 69
    4a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a46:	dc 01       	movw	r26, r24
    4a48:	cb 01       	movw	r24, r22
    4a4a:	f8 01       	movw	r30, r16
    4a4c:	80 83       	st	Z, r24
    4a4e:	91 83       	std	Z+1, r25	; 0x01
    4a50:	a2 83       	std	Z+2, r26	; 0x02
    4a52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a54:	fe 01       	movw	r30, r28
    4a56:	ed 56       	subi	r30, 0x6D	; 109
    4a58:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5a:	60 81       	ld	r22, Z
    4a5c:	71 81       	ldd	r23, Z+1	; 0x01
    4a5e:	82 81       	ldd	r24, Z+2	; 0x02
    4a60:	93 81       	ldd	r25, Z+3	; 0x03
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	40 e8       	ldi	r20, 0x80	; 128
    4a68:	5f e3       	ldi	r21, 0x3F	; 63
    4a6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a6e:	88 23       	and	r24, r24
    4a70:	44 f4       	brge	.+16     	; 0x4a82 <main+0x2b04>
		__ticks = 1;
    4a72:	fe 01       	movw	r30, r28
    4a74:	ef 56       	subi	r30, 0x6F	; 111
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	91 83       	std	Z+1, r25	; 0x01
    4a7e:	80 83       	st	Z, r24
    4a80:	64 c0       	rjmp	.+200    	; 0x4b4a <main+0x2bcc>
	else if (__tmp > 65535)
    4a82:	fe 01       	movw	r30, r28
    4a84:	ed 56       	subi	r30, 0x6D	; 109
    4a86:	ff 4f       	sbci	r31, 0xFF	; 255
    4a88:	60 81       	ld	r22, Z
    4a8a:	71 81       	ldd	r23, Z+1	; 0x01
    4a8c:	82 81       	ldd	r24, Z+2	; 0x02
    4a8e:	93 81       	ldd	r25, Z+3	; 0x03
    4a90:	20 e0       	ldi	r18, 0x00	; 0
    4a92:	3f ef       	ldi	r19, 0xFF	; 255
    4a94:	4f e7       	ldi	r20, 0x7F	; 127
    4a96:	57 e4       	ldi	r21, 0x47	; 71
    4a98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a9c:	18 16       	cp	r1, r24
    4a9e:	0c f0       	brlt	.+2      	; 0x4aa2 <main+0x2b24>
    4aa0:	43 c0       	rjmp	.+134    	; 0x4b28 <main+0x2baa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa2:	fe 01       	movw	r30, r28
    4aa4:	e9 56       	subi	r30, 0x69	; 105
    4aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa8:	60 81       	ld	r22, Z
    4aaa:	71 81       	ldd	r23, Z+1	; 0x01
    4aac:	82 81       	ldd	r24, Z+2	; 0x02
    4aae:	93 81       	ldd	r25, Z+3	; 0x03
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	40 e2       	ldi	r20, 0x20	; 32
    4ab6:	51 e4       	ldi	r21, 0x41	; 65
    4ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	8e 01       	movw	r16, r28
    4ac2:	0f 56       	subi	r16, 0x6F	; 111
    4ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac6:	bc 01       	movw	r22, r24
    4ac8:	cd 01       	movw	r24, r26
    4aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ace:	dc 01       	movw	r26, r24
    4ad0:	cb 01       	movw	r24, r22
    4ad2:	f8 01       	movw	r30, r16
    4ad4:	91 83       	std	Z+1, r25	; 0x01
    4ad6:	80 83       	st	Z, r24
    4ad8:	1f c0       	rjmp	.+62     	; 0x4b18 <main+0x2b9a>
    4ada:	fe 01       	movw	r30, r28
    4adc:	e1 57       	subi	r30, 0x71	; 113
    4ade:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae0:	80 e9       	ldi	r24, 0x90	; 144
    4ae2:	91 e0       	ldi	r25, 0x01	; 1
    4ae4:	91 83       	std	Z+1, r25	; 0x01
    4ae6:	80 83       	st	Z, r24
    4ae8:	fe 01       	movw	r30, r28
    4aea:	e1 57       	subi	r30, 0x71	; 113
    4aec:	ff 4f       	sbci	r31, 0xFF	; 255
    4aee:	80 81       	ld	r24, Z
    4af0:	91 81       	ldd	r25, Z+1	; 0x01
    4af2:	01 97       	sbiw	r24, 0x01	; 1
    4af4:	f1 f7       	brne	.-4      	; 0x4af2 <main+0x2b74>
    4af6:	fe 01       	movw	r30, r28
    4af8:	e1 57       	subi	r30, 0x71	; 113
    4afa:	ff 4f       	sbci	r31, 0xFF	; 255
    4afc:	91 83       	std	Z+1, r25	; 0x01
    4afe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b00:	de 01       	movw	r26, r28
    4b02:	af 56       	subi	r26, 0x6F	; 111
    4b04:	bf 4f       	sbci	r27, 0xFF	; 255
    4b06:	fe 01       	movw	r30, r28
    4b08:	ef 56       	subi	r30, 0x6F	; 111
    4b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0c:	80 81       	ld	r24, Z
    4b0e:	91 81       	ldd	r25, Z+1	; 0x01
    4b10:	01 97       	sbiw	r24, 0x01	; 1
    4b12:	11 96       	adiw	r26, 0x01	; 1
    4b14:	9c 93       	st	X, r25
    4b16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b18:	fe 01       	movw	r30, r28
    4b1a:	ef 56       	subi	r30, 0x6F	; 111
    4b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1e:	80 81       	ld	r24, Z
    4b20:	91 81       	ldd	r25, Z+1	; 0x01
    4b22:	00 97       	sbiw	r24, 0x00	; 0
    4b24:	d1 f6       	brne	.-76     	; 0x4ada <main+0x2b5c>
    4b26:	28 c0       	rjmp	.+80     	; 0x4b78 <main+0x2bfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b28:	8e 01       	movw	r16, r28
    4b2a:	0f 56       	subi	r16, 0x6F	; 111
    4b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b2e:	fe 01       	movw	r30, r28
    4b30:	ed 56       	subi	r30, 0x6D	; 109
    4b32:	ff 4f       	sbci	r31, 0xFF	; 255
    4b34:	60 81       	ld	r22, Z
    4b36:	71 81       	ldd	r23, Z+1	; 0x01
    4b38:	82 81       	ldd	r24, Z+2	; 0x02
    4b3a:	93 81       	ldd	r25, Z+3	; 0x03
    4b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b40:	dc 01       	movw	r26, r24
    4b42:	cb 01       	movw	r24, r22
    4b44:	f8 01       	movw	r30, r16
    4b46:	91 83       	std	Z+1, r25	; 0x01
    4b48:	80 83       	st	Z, r24
    4b4a:	de 01       	movw	r26, r28
    4b4c:	a3 57       	subi	r26, 0x73	; 115
    4b4e:	bf 4f       	sbci	r27, 0xFF	; 255
    4b50:	fe 01       	movw	r30, r28
    4b52:	ef 56       	subi	r30, 0x6F	; 111
    4b54:	ff 4f       	sbci	r31, 0xFF	; 255
    4b56:	80 81       	ld	r24, Z
    4b58:	91 81       	ldd	r25, Z+1	; 0x01
    4b5a:	11 96       	adiw	r26, 0x01	; 1
    4b5c:	9c 93       	st	X, r25
    4b5e:	8e 93       	st	-X, r24
    4b60:	fe 01       	movw	r30, r28
    4b62:	e3 57       	subi	r30, 0x73	; 115
    4b64:	ff 4f       	sbci	r31, 0xFF	; 255
    4b66:	80 81       	ld	r24, Z
    4b68:	91 81       	ldd	r25, Z+1	; 0x01
    4b6a:	01 97       	sbiw	r24, 0x01	; 1
    4b6c:	f1 f7       	brne	.-4      	; 0x4b6a <main+0x2bec>
    4b6e:	fe 01       	movw	r30, r28
    4b70:	e3 57       	subi	r30, 0x73	; 115
    4b72:	ff 4f       	sbci	r31, 0xFF	; 255
    4b74:	91 83       	std	Z+1, r25	; 0x01
    4b76:	80 83       	st	Z, r24
					_delay_ms(100);

					if (key_pressed == SELECT_ROOM4_ADMIN)
    4b78:	fe 01       	movw	r30, r28
    4b7a:	ef 51       	subi	r30, 0x1F	; 31
    4b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    4b7e:	80 81       	ld	r24, Z
    4b80:	81 33       	cpi	r24, 0x31	; 49
    4b82:	31 f4       	brne	.+12     	; 0x4b90 <main+0x2c12>
					{
						show_menu = ROOM4_MENU;
    4b84:	fe 01       	movw	r30, r28
    4b86:	e2 52       	subi	r30, 0x22	; 34
    4b88:	fe 4f       	sbci	r31, 0xFE	; 254
    4b8a:	86 e0       	ldi	r24, 0x06	; 6
    4b8c:	80 83       	st	Z, r24
    4b8e:	ec c0       	rjmp	.+472    	; 0x4d68 <main+0x2dea>
					}
					else if (key_pressed == SELECT_TV)
    4b90:	fe 01       	movw	r30, r28
    4b92:	ef 51       	subi	r30, 0x1F	; 31
    4b94:	fe 4f       	sbci	r31, 0xFE	; 254
    4b96:	80 81       	ld	r24, Z
    4b98:	82 33       	cpi	r24, 0x32	; 50
    4b9a:	31 f4       	brne	.+12     	; 0x4ba8 <main+0x2c2a>
					{
						show_menu = TV_MENU;
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	e2 52       	subi	r30, 0x22	; 34
    4ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba2:	87 e0       	ldi	r24, 0x07	; 7
    4ba4:	80 83       	st	Z, r24
    4ba6:	e0 c0       	rjmp	.+448    	; 0x4d68 <main+0x2dea>
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)
    4ba8:	fe 01       	movw	r30, r28
    4baa:	ef 51       	subi	r30, 0x1F	; 31
    4bac:	fe 4f       	sbci	r31, 0xFE	; 254
    4bae:	80 81       	ld	r24, Z
    4bb0:	83 33       	cpi	r24, 0x33	; 51
    4bb2:	31 f4       	brne	.+12     	; 0x4bc0 <main+0x2c42>
					{
						show_menu = AIRCONDITIONING_MENU;
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	e2 52       	subi	r30, 0x22	; 34
    4bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    4bba:	88 e0       	ldi	r24, 0x08	; 8
    4bbc:	80 83       	st	Z, r24
    4bbe:	d4 c0       	rjmp	.+424    	; 0x4d68 <main+0x2dea>
					}
					else if (key_pressed == ADMIN_RET_OPTION)
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	ef 51       	subi	r30, 0x1F	; 31
    4bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    4bc6:	80 81       	ld	r24, Z
    4bc8:	84 33       	cpi	r24, 0x34	; 52
    4bca:	31 f4       	brne	.+12     	; 0x4bd8 <main+0x2c5a>
					{
						show_menu = MAIN_MENU;
    4bcc:	fe 01       	movw	r30, r28
    4bce:	e2 52       	subi	r30, 0x22	; 34
    4bd0:	fe 4f       	sbci	r31, 0xFE	; 254
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	80 83       	st	Z, r24
    4bd6:	c8 c0       	rjmp	.+400    	; 0x4d68 <main+0x2dea>
					}
					else if (key_pressed != NOT_PRESSED && key_pressed != '0')
    4bd8:	fe 01       	movw	r30, r28
    4bda:	ef 51       	subi	r30, 0x1F	; 31
    4bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    4bde:	80 81       	ld	r24, Z
    4be0:	8f 3f       	cpi	r24, 0xFF	; 255
    4be2:	09 f4       	brne	.+2      	; 0x4be6 <main+0x2c68>
    4be4:	c1 c0       	rjmp	.+386    	; 0x4d68 <main+0x2dea>
    4be6:	fe 01       	movw	r30, r28
    4be8:	ef 51       	subi	r30, 0x1F	; 31
    4bea:	fe 4f       	sbci	r31, 0xFE	; 254
    4bec:	80 81       	ld	r24, Z
    4bee:	80 33       	cpi	r24, 0x30	; 48
    4bf0:	09 f4       	brne	.+2      	; 0x4bf4 <main+0x2c76>
    4bf2:	ba c0       	rjmp	.+372    	; 0x4d68 <main+0x2dea>
										{
											LCD_CLEAR_SCREEN();
    4bf4:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
											LCD_WriteString("wrong input");
    4bf8:	83 ea       	ldi	r24, 0xA3	; 163
    4bfa:	91 e0       	ldi	r25, 0x01	; 1
    4bfc:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    4c00:	fe 01       	movw	r30, r28
    4c02:	e7 57       	subi	r30, 0x77	; 119
    4c04:	ff 4f       	sbci	r31, 0xFF	; 255
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	aa ef       	ldi	r26, 0xFA	; 250
    4c0c:	b3 e4       	ldi	r27, 0x43	; 67
    4c0e:	80 83       	st	Z, r24
    4c10:	91 83       	std	Z+1, r25	; 0x01
    4c12:	a2 83       	std	Z+2, r26	; 0x02
    4c14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c16:	8e 01       	movw	r16, r28
    4c18:	0b 57       	subi	r16, 0x7B	; 123
    4c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c1c:	fe 01       	movw	r30, r28
    4c1e:	e7 57       	subi	r30, 0x77	; 119
    4c20:	ff 4f       	sbci	r31, 0xFF	; 255
    4c22:	60 81       	ld	r22, Z
    4c24:	71 81       	ldd	r23, Z+1	; 0x01
    4c26:	82 81       	ldd	r24, Z+2	; 0x02
    4c28:	93 81       	ldd	r25, Z+3	; 0x03
    4c2a:	20 e0       	ldi	r18, 0x00	; 0
    4c2c:	30 e0       	ldi	r19, 0x00	; 0
    4c2e:	4a e7       	ldi	r20, 0x7A	; 122
    4c30:	55 e4       	ldi	r21, 0x45	; 69
    4c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c36:	dc 01       	movw	r26, r24
    4c38:	cb 01       	movw	r24, r22
    4c3a:	f8 01       	movw	r30, r16
    4c3c:	80 83       	st	Z, r24
    4c3e:	91 83       	std	Z+1, r25	; 0x01
    4c40:	a2 83       	std	Z+2, r26	; 0x02
    4c42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c44:	fe 01       	movw	r30, r28
    4c46:	eb 57       	subi	r30, 0x7B	; 123
    4c48:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4a:	60 81       	ld	r22, Z
    4c4c:	71 81       	ldd	r23, Z+1	; 0x01
    4c4e:	82 81       	ldd	r24, Z+2	; 0x02
    4c50:	93 81       	ldd	r25, Z+3	; 0x03
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	40 e8       	ldi	r20, 0x80	; 128
    4c58:	5f e3       	ldi	r21, 0x3F	; 63
    4c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c5e:	88 23       	and	r24, r24
    4c60:	44 f4       	brge	.+16     	; 0x4c72 <main+0x2cf4>
		__ticks = 1;
    4c62:	fe 01       	movw	r30, r28
    4c64:	ed 57       	subi	r30, 0x7D	; 125
    4c66:	ff 4f       	sbci	r31, 0xFF	; 255
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	91 83       	std	Z+1, r25	; 0x01
    4c6e:	80 83       	st	Z, r24
    4c70:	64 c0       	rjmp	.+200    	; 0x4d3a <main+0x2dbc>
	else if (__tmp > 65535)
    4c72:	fe 01       	movw	r30, r28
    4c74:	eb 57       	subi	r30, 0x7B	; 123
    4c76:	ff 4f       	sbci	r31, 0xFF	; 255
    4c78:	60 81       	ld	r22, Z
    4c7a:	71 81       	ldd	r23, Z+1	; 0x01
    4c7c:	82 81       	ldd	r24, Z+2	; 0x02
    4c7e:	93 81       	ldd	r25, Z+3	; 0x03
    4c80:	20 e0       	ldi	r18, 0x00	; 0
    4c82:	3f ef       	ldi	r19, 0xFF	; 255
    4c84:	4f e7       	ldi	r20, 0x7F	; 127
    4c86:	57 e4       	ldi	r21, 0x47	; 71
    4c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c8c:	18 16       	cp	r1, r24
    4c8e:	0c f0       	brlt	.+2      	; 0x4c92 <main+0x2d14>
    4c90:	43 c0       	rjmp	.+134    	; 0x4d18 <main+0x2d9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c92:	fe 01       	movw	r30, r28
    4c94:	e7 57       	subi	r30, 0x77	; 119
    4c96:	ff 4f       	sbci	r31, 0xFF	; 255
    4c98:	60 81       	ld	r22, Z
    4c9a:	71 81       	ldd	r23, Z+1	; 0x01
    4c9c:	82 81       	ldd	r24, Z+2	; 0x02
    4c9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ca0:	20 e0       	ldi	r18, 0x00	; 0
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
    4ca4:	40 e2       	ldi	r20, 0x20	; 32
    4ca6:	51 e4       	ldi	r21, 0x41	; 65
    4ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cac:	dc 01       	movw	r26, r24
    4cae:	cb 01       	movw	r24, r22
    4cb0:	8e 01       	movw	r16, r28
    4cb2:	0d 57       	subi	r16, 0x7D	; 125
    4cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    4cb6:	bc 01       	movw	r22, r24
    4cb8:	cd 01       	movw	r24, r26
    4cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cbe:	dc 01       	movw	r26, r24
    4cc0:	cb 01       	movw	r24, r22
    4cc2:	f8 01       	movw	r30, r16
    4cc4:	91 83       	std	Z+1, r25	; 0x01
    4cc6:	80 83       	st	Z, r24
    4cc8:	1f c0       	rjmp	.+62     	; 0x4d08 <main+0x2d8a>
    4cca:	fe 01       	movw	r30, r28
    4ccc:	ef 57       	subi	r30, 0x7F	; 127
    4cce:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd0:	80 e9       	ldi	r24, 0x90	; 144
    4cd2:	91 e0       	ldi	r25, 0x01	; 1
    4cd4:	91 83       	std	Z+1, r25	; 0x01
    4cd6:	80 83       	st	Z, r24
    4cd8:	fe 01       	movw	r30, r28
    4cda:	ef 57       	subi	r30, 0x7F	; 127
    4cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cde:	80 81       	ld	r24, Z
    4ce0:	91 81       	ldd	r25, Z+1	; 0x01
    4ce2:	01 97       	sbiw	r24, 0x01	; 1
    4ce4:	f1 f7       	brne	.-4      	; 0x4ce2 <main+0x2d64>
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	ef 57       	subi	r30, 0x7F	; 127
    4cea:	ff 4f       	sbci	r31, 0xFF	; 255
    4cec:	91 83       	std	Z+1, r25	; 0x01
    4cee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cf0:	de 01       	movw	r26, r28
    4cf2:	ad 57       	subi	r26, 0x7D	; 125
    4cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    4cf6:	fe 01       	movw	r30, r28
    4cf8:	ed 57       	subi	r30, 0x7D	; 125
    4cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfc:	80 81       	ld	r24, Z
    4cfe:	91 81       	ldd	r25, Z+1	; 0x01
    4d00:	01 97       	sbiw	r24, 0x01	; 1
    4d02:	11 96       	adiw	r26, 0x01	; 1
    4d04:	9c 93       	st	X, r25
    4d06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d08:	fe 01       	movw	r30, r28
    4d0a:	ed 57       	subi	r30, 0x7D	; 125
    4d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0e:	80 81       	ld	r24, Z
    4d10:	91 81       	ldd	r25, Z+1	; 0x01
    4d12:	00 97       	sbiw	r24, 0x00	; 0
    4d14:	d1 f6       	brne	.-76     	; 0x4cca <main+0x2d4c>
    4d16:	28 c0       	rjmp	.+80     	; 0x4d68 <main+0x2dea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d18:	8e 01       	movw	r16, r28
    4d1a:	0d 57       	subi	r16, 0x7D	; 125
    4d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d1e:	fe 01       	movw	r30, r28
    4d20:	eb 57       	subi	r30, 0x7B	; 123
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	60 81       	ld	r22, Z
    4d26:	71 81       	ldd	r23, Z+1	; 0x01
    4d28:	82 81       	ldd	r24, Z+2	; 0x02
    4d2a:	93 81       	ldd	r25, Z+3	; 0x03
    4d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d30:	dc 01       	movw	r26, r24
    4d32:	cb 01       	movw	r24, r22
    4d34:	f8 01       	movw	r30, r16
    4d36:	91 83       	std	Z+1, r25	; 0x01
    4d38:	80 83       	st	Z, r24
    4d3a:	de 01       	movw	r26, r28
    4d3c:	a1 58       	subi	r26, 0x81	; 129
    4d3e:	bf 4f       	sbci	r27, 0xFF	; 255
    4d40:	fe 01       	movw	r30, r28
    4d42:	ed 57       	subi	r30, 0x7D	; 125
    4d44:	ff 4f       	sbci	r31, 0xFF	; 255
    4d46:	80 81       	ld	r24, Z
    4d48:	91 81       	ldd	r25, Z+1	; 0x01
    4d4a:	11 96       	adiw	r26, 0x01	; 1
    4d4c:	9c 93       	st	X, r25
    4d4e:	8e 93       	st	-X, r24
    4d50:	fe 01       	movw	r30, r28
    4d52:	e1 58       	subi	r30, 0x81	; 129
    4d54:	ff 4f       	sbci	r31, 0xFF	; 255
    4d56:	80 81       	ld	r24, Z
    4d58:	91 81       	ldd	r25, Z+1	; 0x01
    4d5a:	01 97       	sbiw	r24, 0x01	; 1
    4d5c:	f1 f7       	brne	.-4      	; 0x4d5a <main+0x2ddc>
    4d5e:	fe 01       	movw	r30, r28
    4d60:	e1 58       	subi	r30, 0x81	; 129
    4d62:	ff 4f       	sbci	r31, 0xFF	; 255
    4d64:	91 83       	std	Z+1, r25	; 0x01
    4d66:	80 83       	st	Z, r24
											_delay_ms(500);
										}

				}while (( (key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    4d68:	fe 01       	movw	r30, r28
    4d6a:	ef 51       	subi	r30, 0x1F	; 31
    4d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d6e:	80 81       	ld	r24, Z
    4d70:	81 33       	cpi	r24, 0x31	; 49
    4d72:	38 f0       	brcs	.+14     	; 0x4d82 <main+0x2e04>
    4d74:	fe 01       	movw	r30, r28
    4d76:	ef 51       	subi	r30, 0x1F	; 31
    4d78:	fe 4f       	sbci	r31, 0xFE	; 254
    4d7a:	80 81       	ld	r24, Z
    4d7c:	85 33       	cpi	r24, 0x35	; 53
    4d7e:	08 f4       	brcc	.+2      	; 0x4d82 <main+0x2e04>
    4d80:	a0 c6       	rjmp	.+3392   	; 0x5ac2 <main+0x3b44>
    4d82:	80 91 8c 02 	lds	r24, 0x028C
    4d86:	88 23       	and	r24, r24
    4d88:	09 f4       	brne	.+2      	; 0x4d8c <main+0x2e0e>
    4d8a:	2a ce       	rjmp	.-940    	; 0x49e0 <main+0x2a62>
    4d8c:	9a c6       	rjmp	.+3380   	; 0x5ac2 <main+0x3b44>

				break;//End of MORE_MENU case

			case AIRCONDITIONING_MENU:
				do {
					LCD_CLEAR_SCREEN();
    4d8e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
					LCD_WriteString("1:Set temperature ");
    4d92:	83 ed       	ldi	r24, 0xD3	; 211
    4d94:	91 e0       	ldi	r25, 0x01	; 1
    4d96:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
					LCD_MOVE_CURSOR(2,1);
    4d9a:	82 e0       	ldi	r24, 0x02	; 2
    4d9c:	61 e0       	ldi	r22, 0x01	; 1
    4d9e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
					LCD_WriteString("2:Control  0:RET");
    4da2:	86 ee       	ldi	r24, 0xE6	; 230
    4da4:	91 e0       	ldi	r25, 0x01	; 1
    4da6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
					key_pressed = GetKeyPressed(login_mode);
    4daa:	fe 01       	movw	r30, r28
    4dac:	ed 51       	subi	r30, 0x1D	; 29
    4dae:	fe 4f       	sbci	r31, 0xFE	; 254
    4db0:	80 81       	ld	r24, Z
    4db2:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <GetKeyPressed>
    4db6:	fe 01       	movw	r30, r28
    4db8:	ef 51       	subi	r30, 0x1F	; 31
    4dba:	fe 4f       	sbci	r31, 0xFE	; 254
    4dbc:	80 83       	st	Z, r24
    4dbe:	fe 01       	movw	r30, r28
    4dc0:	e5 58       	subi	r30, 0x85	; 133
    4dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc4:	80 e0       	ldi	r24, 0x00	; 0
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	a8 ec       	ldi	r26, 0xC8	; 200
    4dca:	b2 e4       	ldi	r27, 0x42	; 66
    4dcc:	80 83       	st	Z, r24
    4dce:	91 83       	std	Z+1, r25	; 0x01
    4dd0:	a2 83       	std	Z+2, r26	; 0x02
    4dd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dd4:	8e 01       	movw	r16, r28
    4dd6:	09 58       	subi	r16, 0x89	; 137
    4dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dda:	fe 01       	movw	r30, r28
    4ddc:	e5 58       	subi	r30, 0x85	; 133
    4dde:	ff 4f       	sbci	r31, 0xFF	; 255
    4de0:	60 81       	ld	r22, Z
    4de2:	71 81       	ldd	r23, Z+1	; 0x01
    4de4:	82 81       	ldd	r24, Z+2	; 0x02
    4de6:	93 81       	ldd	r25, Z+3	; 0x03
    4de8:	20 e0       	ldi	r18, 0x00	; 0
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	4a e7       	ldi	r20, 0x7A	; 122
    4dee:	55 e4       	ldi	r21, 0x45	; 69
    4df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df4:	dc 01       	movw	r26, r24
    4df6:	cb 01       	movw	r24, r22
    4df8:	f8 01       	movw	r30, r16
    4dfa:	80 83       	st	Z, r24
    4dfc:	91 83       	std	Z+1, r25	; 0x01
    4dfe:	a2 83       	std	Z+2, r26	; 0x02
    4e00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e02:	fe 01       	movw	r30, r28
    4e04:	e9 58       	subi	r30, 0x89	; 137
    4e06:	ff 4f       	sbci	r31, 0xFF	; 255
    4e08:	60 81       	ld	r22, Z
    4e0a:	71 81       	ldd	r23, Z+1	; 0x01
    4e0c:	82 81       	ldd	r24, Z+2	; 0x02
    4e0e:	93 81       	ldd	r25, Z+3	; 0x03
    4e10:	20 e0       	ldi	r18, 0x00	; 0
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	40 e8       	ldi	r20, 0x80	; 128
    4e16:	5f e3       	ldi	r21, 0x3F	; 63
    4e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e1c:	88 23       	and	r24, r24
    4e1e:	44 f4       	brge	.+16     	; 0x4e30 <main+0x2eb2>
		__ticks = 1;
    4e20:	fe 01       	movw	r30, r28
    4e22:	eb 58       	subi	r30, 0x8B	; 139
    4e24:	ff 4f       	sbci	r31, 0xFF	; 255
    4e26:	81 e0       	ldi	r24, 0x01	; 1
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	91 83       	std	Z+1, r25	; 0x01
    4e2c:	80 83       	st	Z, r24
    4e2e:	64 c0       	rjmp	.+200    	; 0x4ef8 <main+0x2f7a>
	else if (__tmp > 65535)
    4e30:	fe 01       	movw	r30, r28
    4e32:	e9 58       	subi	r30, 0x89	; 137
    4e34:	ff 4f       	sbci	r31, 0xFF	; 255
    4e36:	60 81       	ld	r22, Z
    4e38:	71 81       	ldd	r23, Z+1	; 0x01
    4e3a:	82 81       	ldd	r24, Z+2	; 0x02
    4e3c:	93 81       	ldd	r25, Z+3	; 0x03
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	3f ef       	ldi	r19, 0xFF	; 255
    4e42:	4f e7       	ldi	r20, 0x7F	; 127
    4e44:	57 e4       	ldi	r21, 0x47	; 71
    4e46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e4a:	18 16       	cp	r1, r24
    4e4c:	0c f0       	brlt	.+2      	; 0x4e50 <main+0x2ed2>
    4e4e:	43 c0       	rjmp	.+134    	; 0x4ed6 <main+0x2f58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e50:	fe 01       	movw	r30, r28
    4e52:	e5 58       	subi	r30, 0x85	; 133
    4e54:	ff 4f       	sbci	r31, 0xFF	; 255
    4e56:	60 81       	ld	r22, Z
    4e58:	71 81       	ldd	r23, Z+1	; 0x01
    4e5a:	82 81       	ldd	r24, Z+2	; 0x02
    4e5c:	93 81       	ldd	r25, Z+3	; 0x03
    4e5e:	20 e0       	ldi	r18, 0x00	; 0
    4e60:	30 e0       	ldi	r19, 0x00	; 0
    4e62:	40 e2       	ldi	r20, 0x20	; 32
    4e64:	51 e4       	ldi	r21, 0x41	; 65
    4e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e6a:	dc 01       	movw	r26, r24
    4e6c:	cb 01       	movw	r24, r22
    4e6e:	8e 01       	movw	r16, r28
    4e70:	0b 58       	subi	r16, 0x8B	; 139
    4e72:	1f 4f       	sbci	r17, 0xFF	; 255
    4e74:	bc 01       	movw	r22, r24
    4e76:	cd 01       	movw	r24, r26
    4e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7c:	dc 01       	movw	r26, r24
    4e7e:	cb 01       	movw	r24, r22
    4e80:	f8 01       	movw	r30, r16
    4e82:	91 83       	std	Z+1, r25	; 0x01
    4e84:	80 83       	st	Z, r24
    4e86:	1f c0       	rjmp	.+62     	; 0x4ec6 <main+0x2f48>
    4e88:	fe 01       	movw	r30, r28
    4e8a:	ed 58       	subi	r30, 0x8D	; 141
    4e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8e:	80 e9       	ldi	r24, 0x90	; 144
    4e90:	91 e0       	ldi	r25, 0x01	; 1
    4e92:	91 83       	std	Z+1, r25	; 0x01
    4e94:	80 83       	st	Z, r24
    4e96:	fe 01       	movw	r30, r28
    4e98:	ed 58       	subi	r30, 0x8D	; 141
    4e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9c:	80 81       	ld	r24, Z
    4e9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ea0:	01 97       	sbiw	r24, 0x01	; 1
    4ea2:	f1 f7       	brne	.-4      	; 0x4ea0 <main+0x2f22>
    4ea4:	fe 01       	movw	r30, r28
    4ea6:	ed 58       	subi	r30, 0x8D	; 141
    4ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eaa:	91 83       	std	Z+1, r25	; 0x01
    4eac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eae:	de 01       	movw	r26, r28
    4eb0:	ab 58       	subi	r26, 0x8B	; 139
    4eb2:	bf 4f       	sbci	r27, 0xFF	; 255
    4eb4:	fe 01       	movw	r30, r28
    4eb6:	eb 58       	subi	r30, 0x8B	; 139
    4eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eba:	80 81       	ld	r24, Z
    4ebc:	91 81       	ldd	r25, Z+1	; 0x01
    4ebe:	01 97       	sbiw	r24, 0x01	; 1
    4ec0:	11 96       	adiw	r26, 0x01	; 1
    4ec2:	9c 93       	st	X, r25
    4ec4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ec6:	fe 01       	movw	r30, r28
    4ec8:	eb 58       	subi	r30, 0x8B	; 139
    4eca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ecc:	80 81       	ld	r24, Z
    4ece:	91 81       	ldd	r25, Z+1	; 0x01
    4ed0:	00 97       	sbiw	r24, 0x00	; 0
    4ed2:	d1 f6       	brne	.-76     	; 0x4e88 <main+0x2f0a>
    4ed4:	28 c0       	rjmp	.+80     	; 0x4f26 <main+0x2fa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ed6:	8e 01       	movw	r16, r28
    4ed8:	0b 58       	subi	r16, 0x8B	; 139
    4eda:	1f 4f       	sbci	r17, 0xFF	; 255
    4edc:	fe 01       	movw	r30, r28
    4ede:	e9 58       	subi	r30, 0x89	; 137
    4ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee2:	60 81       	ld	r22, Z
    4ee4:	71 81       	ldd	r23, Z+1	; 0x01
    4ee6:	82 81       	ldd	r24, Z+2	; 0x02
    4ee8:	93 81       	ldd	r25, Z+3	; 0x03
    4eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eee:	dc 01       	movw	r26, r24
    4ef0:	cb 01       	movw	r24, r22
    4ef2:	f8 01       	movw	r30, r16
    4ef4:	91 83       	std	Z+1, r25	; 0x01
    4ef6:	80 83       	st	Z, r24
    4ef8:	de 01       	movw	r26, r28
    4efa:	af 58       	subi	r26, 0x8F	; 143
    4efc:	bf 4f       	sbci	r27, 0xFF	; 255
    4efe:	fe 01       	movw	r30, r28
    4f00:	eb 58       	subi	r30, 0x8B	; 139
    4f02:	ff 4f       	sbci	r31, 0xFF	; 255
    4f04:	80 81       	ld	r24, Z
    4f06:	91 81       	ldd	r25, Z+1	; 0x01
    4f08:	11 96       	adiw	r26, 0x01	; 1
    4f0a:	9c 93       	st	X, r25
    4f0c:	8e 93       	st	-X, r24
    4f0e:	fe 01       	movw	r30, r28
    4f10:	ef 58       	subi	r30, 0x8F	; 143
    4f12:	ff 4f       	sbci	r31, 0xFF	; 255
    4f14:	80 81       	ld	r24, Z
    4f16:	91 81       	ldd	r25, Z+1	; 0x01
    4f18:	01 97       	sbiw	r24, 0x01	; 1
    4f1a:	f1 f7       	brne	.-4      	; 0x4f18 <main+0x2f9a>
    4f1c:	fe 01       	movw	r30, r28
    4f1e:	ef 58       	subi	r30, 0x8F	; 143
    4f20:	ff 4f       	sbci	r31, 0xFF	; 255
    4f22:	91 83       	std	Z+1, r25	; 0x01
    4f24:	80 83       	st	Z, r24
					_delay_ms(100);

					if (key_pressed == SELECT_SET_TEMPERATURE)
    4f26:	fe 01       	movw	r30, r28
    4f28:	ef 51       	subi	r30, 0x1F	; 31
    4f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f2c:	80 81       	ld	r24, Z
    4f2e:	81 33       	cpi	r24, 0x31	; 49
    4f30:	31 f4       	brne	.+12     	; 0x4f3e <main+0x2fc0>
					{
						show_menu = TEMPERATURE_MENU;
    4f32:	fe 01       	movw	r30, r28
    4f34:	e2 52       	subi	r30, 0x22	; 34
    4f36:	fe 4f       	sbci	r31, 0xFE	; 254
    4f38:	8a e0       	ldi	r24, 0x0A	; 10
    4f3a:	80 83       	st	Z, r24
    4f3c:	e0 c0       	rjmp	.+448    	; 0x50fe <main+0x3180>
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)
    4f3e:	fe 01       	movw	r30, r28
    4f40:	ef 51       	subi	r30, 0x1F	; 31
    4f42:	fe 4f       	sbci	r31, 0xFE	; 254
    4f44:	80 81       	ld	r24, Z
    4f46:	82 33       	cpi	r24, 0x32	; 50
    4f48:	31 f4       	brne	.+12     	; 0x4f56 <main+0x2fd8>
					{
						show_menu = AIRCOND_CTRL_MENU;
    4f4a:	fe 01       	movw	r30, r28
    4f4c:	e2 52       	subi	r30, 0x22	; 34
    4f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f50:	89 e0       	ldi	r24, 0x09	; 9
    4f52:	80 83       	st	Z, r24
    4f54:	d4 c0       	rjmp	.+424    	; 0x50fe <main+0x3180>
					}
					else if (key_pressed == SELECT_AIR_COND_RET)
    4f56:	fe 01       	movw	r30, r28
    4f58:	ef 51       	subi	r30, 0x1F	; 31
    4f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f5c:	80 81       	ld	r24, Z
    4f5e:	80 33       	cpi	r24, 0x30	; 48
    4f60:	31 f4       	brne	.+12     	; 0x4f6e <main+0x2ff0>
					{
						show_menu = MORE_MENU;
    4f62:	fe 01       	movw	r30, r28
    4f64:	e2 52       	subi	r30, 0x22	; 34
    4f66:	fe 4f       	sbci	r31, 0xFE	; 254
    4f68:	82 e0       	ldi	r24, 0x02	; 2
    4f6a:	80 83       	st	Z, r24
    4f6c:	c8 c0       	rjmp	.+400    	; 0x50fe <main+0x3180>
					}
					else if (key_pressed != NOT_PRESSED && key_pressed != '0')
    4f6e:	fe 01       	movw	r30, r28
    4f70:	ef 51       	subi	r30, 0x1F	; 31
    4f72:	fe 4f       	sbci	r31, 0xFE	; 254
    4f74:	80 81       	ld	r24, Z
    4f76:	8f 3f       	cpi	r24, 0xFF	; 255
    4f78:	09 f4       	brne	.+2      	; 0x4f7c <main+0x2ffe>
    4f7a:	c1 c0       	rjmp	.+386    	; 0x50fe <main+0x3180>
    4f7c:	fe 01       	movw	r30, r28
    4f7e:	ef 51       	subi	r30, 0x1F	; 31
    4f80:	fe 4f       	sbci	r31, 0xFE	; 254
    4f82:	80 81       	ld	r24, Z
    4f84:	80 33       	cpi	r24, 0x30	; 48
    4f86:	09 f4       	brne	.+2      	; 0x4f8a <main+0x300c>
    4f88:	ba c0       	rjmp	.+372    	; 0x50fe <main+0x3180>
					{
						LCD_CLEAR_SCREEN();
    4f8a:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
						LCD_WriteString("wrong input");
    4f8e:	83 ea       	ldi	r24, 0xA3	; 163
    4f90:	91 e0       	ldi	r25, 0x01	; 1
    4f92:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    4f96:	fe 01       	movw	r30, r28
    4f98:	e3 59       	subi	r30, 0x93	; 147
    4f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	aa ef       	ldi	r26, 0xFA	; 250
    4fa2:	b3 e4       	ldi	r27, 0x43	; 67
    4fa4:	80 83       	st	Z, r24
    4fa6:	91 83       	std	Z+1, r25	; 0x01
    4fa8:	a2 83       	std	Z+2, r26	; 0x02
    4faa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fac:	8e 01       	movw	r16, r28
    4fae:	07 59       	subi	r16, 0x97	; 151
    4fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    4fb2:	fe 01       	movw	r30, r28
    4fb4:	e3 59       	subi	r30, 0x93	; 147
    4fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb8:	60 81       	ld	r22, Z
    4fba:	71 81       	ldd	r23, Z+1	; 0x01
    4fbc:	82 81       	ldd	r24, Z+2	; 0x02
    4fbe:	93 81       	ldd	r25, Z+3	; 0x03
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	4a e7       	ldi	r20, 0x7A	; 122
    4fc6:	55 e4       	ldi	r21, 0x45	; 69
    4fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fcc:	dc 01       	movw	r26, r24
    4fce:	cb 01       	movw	r24, r22
    4fd0:	f8 01       	movw	r30, r16
    4fd2:	80 83       	st	Z, r24
    4fd4:	91 83       	std	Z+1, r25	; 0x01
    4fd6:	a2 83       	std	Z+2, r26	; 0x02
    4fd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fda:	fe 01       	movw	r30, r28
    4fdc:	e7 59       	subi	r30, 0x97	; 151
    4fde:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe0:	60 81       	ld	r22, Z
    4fe2:	71 81       	ldd	r23, Z+1	; 0x01
    4fe4:	82 81       	ldd	r24, Z+2	; 0x02
    4fe6:	93 81       	ldd	r25, Z+3	; 0x03
    4fe8:	20 e0       	ldi	r18, 0x00	; 0
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	40 e8       	ldi	r20, 0x80	; 128
    4fee:	5f e3       	ldi	r21, 0x3F	; 63
    4ff0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ff4:	88 23       	and	r24, r24
    4ff6:	44 f4       	brge	.+16     	; 0x5008 <main+0x308a>
		__ticks = 1;
    4ff8:	fe 01       	movw	r30, r28
    4ffa:	e9 59       	subi	r30, 0x99	; 153
    4ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffe:	81 e0       	ldi	r24, 0x01	; 1
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	91 83       	std	Z+1, r25	; 0x01
    5004:	80 83       	st	Z, r24
    5006:	64 c0       	rjmp	.+200    	; 0x50d0 <main+0x3152>
	else if (__tmp > 65535)
    5008:	fe 01       	movw	r30, r28
    500a:	e7 59       	subi	r30, 0x97	; 151
    500c:	ff 4f       	sbci	r31, 0xFF	; 255
    500e:	60 81       	ld	r22, Z
    5010:	71 81       	ldd	r23, Z+1	; 0x01
    5012:	82 81       	ldd	r24, Z+2	; 0x02
    5014:	93 81       	ldd	r25, Z+3	; 0x03
    5016:	20 e0       	ldi	r18, 0x00	; 0
    5018:	3f ef       	ldi	r19, 0xFF	; 255
    501a:	4f e7       	ldi	r20, 0x7F	; 127
    501c:	57 e4       	ldi	r21, 0x47	; 71
    501e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5022:	18 16       	cp	r1, r24
    5024:	0c f0       	brlt	.+2      	; 0x5028 <main+0x30aa>
    5026:	43 c0       	rjmp	.+134    	; 0x50ae <main+0x3130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5028:	fe 01       	movw	r30, r28
    502a:	e3 59       	subi	r30, 0x93	; 147
    502c:	ff 4f       	sbci	r31, 0xFF	; 255
    502e:	60 81       	ld	r22, Z
    5030:	71 81       	ldd	r23, Z+1	; 0x01
    5032:	82 81       	ldd	r24, Z+2	; 0x02
    5034:	93 81       	ldd	r25, Z+3	; 0x03
    5036:	20 e0       	ldi	r18, 0x00	; 0
    5038:	30 e0       	ldi	r19, 0x00	; 0
    503a:	40 e2       	ldi	r20, 0x20	; 32
    503c:	51 e4       	ldi	r21, 0x41	; 65
    503e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5042:	dc 01       	movw	r26, r24
    5044:	cb 01       	movw	r24, r22
    5046:	8e 01       	movw	r16, r28
    5048:	09 59       	subi	r16, 0x99	; 153
    504a:	1f 4f       	sbci	r17, 0xFF	; 255
    504c:	bc 01       	movw	r22, r24
    504e:	cd 01       	movw	r24, r26
    5050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5054:	dc 01       	movw	r26, r24
    5056:	cb 01       	movw	r24, r22
    5058:	f8 01       	movw	r30, r16
    505a:	91 83       	std	Z+1, r25	; 0x01
    505c:	80 83       	st	Z, r24
    505e:	1f c0       	rjmp	.+62     	; 0x509e <main+0x3120>
    5060:	fe 01       	movw	r30, r28
    5062:	eb 59       	subi	r30, 0x9B	; 155
    5064:	ff 4f       	sbci	r31, 0xFF	; 255
    5066:	80 e9       	ldi	r24, 0x90	; 144
    5068:	91 e0       	ldi	r25, 0x01	; 1
    506a:	91 83       	std	Z+1, r25	; 0x01
    506c:	80 83       	st	Z, r24
    506e:	fe 01       	movw	r30, r28
    5070:	eb 59       	subi	r30, 0x9B	; 155
    5072:	ff 4f       	sbci	r31, 0xFF	; 255
    5074:	80 81       	ld	r24, Z
    5076:	91 81       	ldd	r25, Z+1	; 0x01
    5078:	01 97       	sbiw	r24, 0x01	; 1
    507a:	f1 f7       	brne	.-4      	; 0x5078 <main+0x30fa>
    507c:	fe 01       	movw	r30, r28
    507e:	eb 59       	subi	r30, 0x9B	; 155
    5080:	ff 4f       	sbci	r31, 0xFF	; 255
    5082:	91 83       	std	Z+1, r25	; 0x01
    5084:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5086:	de 01       	movw	r26, r28
    5088:	a9 59       	subi	r26, 0x99	; 153
    508a:	bf 4f       	sbci	r27, 0xFF	; 255
    508c:	fe 01       	movw	r30, r28
    508e:	e9 59       	subi	r30, 0x99	; 153
    5090:	ff 4f       	sbci	r31, 0xFF	; 255
    5092:	80 81       	ld	r24, Z
    5094:	91 81       	ldd	r25, Z+1	; 0x01
    5096:	01 97       	sbiw	r24, 0x01	; 1
    5098:	11 96       	adiw	r26, 0x01	; 1
    509a:	9c 93       	st	X, r25
    509c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    509e:	fe 01       	movw	r30, r28
    50a0:	e9 59       	subi	r30, 0x99	; 153
    50a2:	ff 4f       	sbci	r31, 0xFF	; 255
    50a4:	80 81       	ld	r24, Z
    50a6:	91 81       	ldd	r25, Z+1	; 0x01
    50a8:	00 97       	sbiw	r24, 0x00	; 0
    50aa:	d1 f6       	brne	.-76     	; 0x5060 <main+0x30e2>
    50ac:	28 c0       	rjmp	.+80     	; 0x50fe <main+0x3180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50ae:	8e 01       	movw	r16, r28
    50b0:	09 59       	subi	r16, 0x99	; 153
    50b2:	1f 4f       	sbci	r17, 0xFF	; 255
    50b4:	fe 01       	movw	r30, r28
    50b6:	e7 59       	subi	r30, 0x97	; 151
    50b8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ba:	60 81       	ld	r22, Z
    50bc:	71 81       	ldd	r23, Z+1	; 0x01
    50be:	82 81       	ldd	r24, Z+2	; 0x02
    50c0:	93 81       	ldd	r25, Z+3	; 0x03
    50c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c6:	dc 01       	movw	r26, r24
    50c8:	cb 01       	movw	r24, r22
    50ca:	f8 01       	movw	r30, r16
    50cc:	91 83       	std	Z+1, r25	; 0x01
    50ce:	80 83       	st	Z, r24
    50d0:	de 01       	movw	r26, r28
    50d2:	ad 59       	subi	r26, 0x9D	; 157
    50d4:	bf 4f       	sbci	r27, 0xFF	; 255
    50d6:	fe 01       	movw	r30, r28
    50d8:	e9 59       	subi	r30, 0x99	; 153
    50da:	ff 4f       	sbci	r31, 0xFF	; 255
    50dc:	80 81       	ld	r24, Z
    50de:	91 81       	ldd	r25, Z+1	; 0x01
    50e0:	11 96       	adiw	r26, 0x01	; 1
    50e2:	9c 93       	st	X, r25
    50e4:	8e 93       	st	-X, r24
    50e6:	fe 01       	movw	r30, r28
    50e8:	ed 59       	subi	r30, 0x9D	; 157
    50ea:	ff 4f       	sbci	r31, 0xFF	; 255
    50ec:	80 81       	ld	r24, Z
    50ee:	91 81       	ldd	r25, Z+1	; 0x01
    50f0:	01 97       	sbiw	r24, 0x01	; 1
    50f2:	f1 f7       	brne	.-4      	; 0x50f0 <main+0x3172>
    50f4:	fe 01       	movw	r30, r28
    50f6:	ed 59       	subi	r30, 0x9D	; 157
    50f8:	ff 4f       	sbci	r31, 0xFF	; 255
    50fa:	91 83       	std	Z+1, r25	; 0x01
    50fc:	80 83       	st	Z, r24
						_delay_ms(500);
					}

				}while (( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    50fe:	fe 01       	movw	r30, r28
    5100:	ef 51       	subi	r30, 0x1F	; 31
    5102:	fe 4f       	sbci	r31, 0xFE	; 254
    5104:	80 81       	ld	r24, Z
    5106:	80 33       	cpi	r24, 0x30	; 48
    5108:	38 f0       	brcs	.+14     	; 0x5118 <main+0x319a>
    510a:	fe 01       	movw	r30, r28
    510c:	ef 51       	subi	r30, 0x1F	; 31
    510e:	fe 4f       	sbci	r31, 0xFE	; 254
    5110:	80 81       	ld	r24, Z
    5112:	83 33       	cpi	r24, 0x33	; 51
    5114:	08 f4       	brcc	.+2      	; 0x5118 <main+0x319a>
    5116:	d5 c4       	rjmp	.+2474   	; 0x5ac2 <main+0x3b44>
    5118:	80 91 8c 02 	lds	r24, 0x028C
    511c:	88 23       	and	r24, r24
    511e:	09 f4       	brne	.+2      	; 0x5122 <main+0x31a4>
    5120:	36 ce       	rjmp	.-916    	; 0x4d8e <main+0x2e10>
    5122:	cf c4       	rjmp	.+2462   	; 0x5ac2 <main+0x3b44>
				break;//End of air conditioning menu case

			case ROOM1_MENU:
				menuOption(ROOM1_MENU, login_mode);
    5124:	fe 01       	movw	r30, r28
    5126:	ed 51       	subi	r30, 0x1D	; 29
    5128:	fe 4f       	sbci	r31, 0xFE	; 254
    512a:	83 e0       	ldi	r24, 0x03	; 3
    512c:	60 81       	ld	r22, Z
    512e:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <menuOption>
				show_menu = MAIN_MENU;
    5132:	fe 01       	movw	r30, r28
    5134:	e2 52       	subi	r30, 0x22	; 34
    5136:	fe 4f       	sbci	r31, 0xFE	; 254
    5138:	81 e0       	ldi	r24, 0x01	; 1
    513a:	80 83       	st	Z, r24
    513c:	c2 c4       	rjmp	.+2436   	; 0x5ac2 <main+0x3b44>
				break;

			case ROOM2_MENU:
				menuOption(ROOM2_MENU, login_mode);
    513e:	fe 01       	movw	r30, r28
    5140:	ed 51       	subi	r30, 0x1D	; 29
    5142:	fe 4f       	sbci	r31, 0xFE	; 254
    5144:	84 e0       	ldi	r24, 0x04	; 4
    5146:	60 81       	ld	r22, Z
    5148:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <menuOption>
				show_menu = MAIN_MENU;
    514c:	fe 01       	movw	r30, r28
    514e:	e2 52       	subi	r30, 0x22	; 34
    5150:	fe 4f       	sbci	r31, 0xFE	; 254
    5152:	81 e0       	ldi	r24, 0x01	; 1
    5154:	80 83       	st	Z, r24
    5156:	b5 c4       	rjmp	.+2410   	; 0x5ac2 <main+0x3b44>
				break;

			case ROOM3_MENU:
				menuOption(ROOM3_MENU, login_mode);
    5158:	fe 01       	movw	r30, r28
    515a:	ed 51       	subi	r30, 0x1D	; 29
    515c:	fe 4f       	sbci	r31, 0xFE	; 254
    515e:	85 e0       	ldi	r24, 0x05	; 5
    5160:	60 81       	ld	r22, Z
    5162:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <menuOption>
				show_menu = MAIN_MENU;
    5166:	fe 01       	movw	r30, r28
    5168:	e2 52       	subi	r30, 0x22	; 34
    516a:	fe 4f       	sbci	r31, 0xFE	; 254
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	80 83       	st	Z, r24
    5170:	a8 c4       	rjmp	.+2384   	; 0x5ac2 <main+0x3b44>
				break;

			case ROOM4_MENU:
				menuOption(ROOM4_MENU, login_mode);
    5172:	fe 01       	movw	r30, r28
    5174:	ed 51       	subi	r30, 0x1D	; 29
    5176:	fe 4f       	sbci	r31, 0xFE	; 254
    5178:	86 e0       	ldi	r24, 0x06	; 6
    517a:	60 81       	ld	r22, Z
    517c:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <menuOption>
				if (login_mode == ADMIN)
    5180:	fe 01       	movw	r30, r28
    5182:	ed 51       	subi	r30, 0x1D	; 29
    5184:	fe 4f       	sbci	r31, 0xFE	; 254
    5186:	80 81       	ld	r24, Z
    5188:	81 30       	cpi	r24, 0x01	; 1
    518a:	31 f4       	brne	.+12     	; 0x5198 <main+0x321a>
				{
					show_menu = MORE_MENU;
    518c:	fe 01       	movw	r30, r28
    518e:	e2 52       	subi	r30, 0x22	; 34
    5190:	fe 4f       	sbci	r31, 0xFE	; 254
    5192:	82 e0       	ldi	r24, 0x02	; 2
    5194:	80 83       	st	Z, r24
    5196:	95 c4       	rjmp	.+2346   	; 0x5ac2 <main+0x3b44>
				}
				else
				{
					show_menu = MAIN_MENU;
    5198:	fe 01       	movw	r30, r28
    519a:	e2 52       	subi	r30, 0x22	; 34
    519c:	fe 4f       	sbci	r31, 0xFE	; 254
    519e:	81 e0       	ldi	r24, 0x01	; 1
    51a0:	80 83       	st	Z, r24
    51a2:	8f c4       	rjmp	.+2334   	; 0x5ac2 <main+0x3b44>
				}

				break;

			case TV_MENU :
				menuOption(TV_MENU, login_mode);
    51a4:	fe 01       	movw	r30, r28
    51a6:	ed 51       	subi	r30, 0x1D	; 29
    51a8:	fe 4f       	sbci	r31, 0xFE	; 254
    51aa:	87 e0       	ldi	r24, 0x07	; 7
    51ac:	60 81       	ld	r22, Z
    51ae:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <menuOption>
				show_menu = MAIN_MENU;
    51b2:	fe 01       	movw	r30, r28
    51b4:	e2 52       	subi	r30, 0x22	; 34
    51b6:	fe 4f       	sbci	r31, 0xFE	; 254
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	80 83       	st	Z, r24
    51bc:	82 c4       	rjmp	.+2308   	; 0x5ac2 <main+0x3b44>
				break;

			case AIRCOND_CTRL_MENU:
				menuOption(AIRCONDITIONING_MENU, login_mode);
    51be:	fe 01       	movw	r30, r28
    51c0:	ed 51       	subi	r30, 0x1D	; 29
    51c2:	fe 4f       	sbci	r31, 0xFE	; 254
    51c4:	88 e0       	ldi	r24, 0x08	; 8
    51c6:	60 81       	ld	r22, Z
    51c8:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <menuOption>
				show_menu = AIRCONDITIONING_MENU;
    51cc:	fe 01       	movw	r30, r28
    51ce:	e2 52       	subi	r30, 0x22	; 34
    51d0:	fe 4f       	sbci	r31, 0xFE	; 254
    51d2:	88 e0       	ldi	r24, 0x08	; 8
    51d4:	80 83       	st	Z, r24
    51d6:	75 c4       	rjmp	.+2282   	; 0x5ac2 <main+0x3b44>
				break;

			case TEMPERATURE_MENU:
				temperatue = 0;
    51d8:	fe 01       	movw	r30, r28
    51da:	ea 51       	subi	r30, 0x1A	; 26
    51dc:	fe 4f       	sbci	r31, 0xFE	; 254
    51de:	10 82       	st	Z, r1
    51e0:	60 c4       	rjmp	.+2240   	; 0x5aa2 <main+0x3b24>

				while(temperatue == 0 && timeout_flag == FALSE)
				{
					key_pressed = NOT_PRESSED;
    51e2:	fe 01       	movw	r30, r28
    51e4:	ef 51       	subi	r30, 0x1F	; 31
    51e6:	fe 4f       	sbci	r31, 0xFE	; 254
    51e8:	8f ef       	ldi	r24, 0xFF	; 255
    51ea:	80 83       	st	Z, r24
					LCD_CLEAR_SCREEN();
    51ec:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
					LCD_WriteString("Set temp :__ ");
    51f0:	87 ef       	ldi	r24, 0xF7	; 247
    51f2:	91 e0       	ldi	r25, 0x01	; 1
    51f4:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
					LCD_WriteChar(DEGREES_SYMBOL);
    51f8:	8f ed       	ldi	r24, 0xDF	; 223
    51fa:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
					LCD_WriteChar('C');
    51fe:	83 e4       	ldi	r24, 0x43	; 67
    5200:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
					LCD_MOVE_CURSOR(1,11);
    5204:	81 e0       	ldi	r24, 0x01	; 1
    5206:	6b e0       	ldi	r22, 0x0B	; 11
    5208:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>
    520c:	fe 01       	movw	r30, r28
    520e:	e1 5a       	subi	r30, 0xA1	; 161
    5210:	ff 4f       	sbci	r31, 0xFF	; 255
    5212:	80 e0       	ldi	r24, 0x00	; 0
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	a8 e4       	ldi	r26, 0x48	; 72
    5218:	b3 e4       	ldi	r27, 0x43	; 67
    521a:	80 83       	st	Z, r24
    521c:	91 83       	std	Z+1, r25	; 0x01
    521e:	a2 83       	std	Z+2, r26	; 0x02
    5220:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5222:	8e 01       	movw	r16, r28
    5224:	05 5a       	subi	r16, 0xA5	; 165
    5226:	1f 4f       	sbci	r17, 0xFF	; 255
    5228:	fe 01       	movw	r30, r28
    522a:	e1 5a       	subi	r30, 0xA1	; 161
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	60 81       	ld	r22, Z
    5230:	71 81       	ldd	r23, Z+1	; 0x01
    5232:	82 81       	ldd	r24, Z+2	; 0x02
    5234:	93 81       	ldd	r25, Z+3	; 0x03
    5236:	20 e0       	ldi	r18, 0x00	; 0
    5238:	30 e0       	ldi	r19, 0x00	; 0
    523a:	4a e7       	ldi	r20, 0x7A	; 122
    523c:	55 e4       	ldi	r21, 0x45	; 69
    523e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5242:	dc 01       	movw	r26, r24
    5244:	cb 01       	movw	r24, r22
    5246:	f8 01       	movw	r30, r16
    5248:	80 83       	st	Z, r24
    524a:	91 83       	std	Z+1, r25	; 0x01
    524c:	a2 83       	std	Z+2, r26	; 0x02
    524e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5250:	fe 01       	movw	r30, r28
    5252:	e5 5a       	subi	r30, 0xA5	; 165
    5254:	ff 4f       	sbci	r31, 0xFF	; 255
    5256:	60 81       	ld	r22, Z
    5258:	71 81       	ldd	r23, Z+1	; 0x01
    525a:	82 81       	ldd	r24, Z+2	; 0x02
    525c:	93 81       	ldd	r25, Z+3	; 0x03
    525e:	20 e0       	ldi	r18, 0x00	; 0
    5260:	30 e0       	ldi	r19, 0x00	; 0
    5262:	40 e8       	ldi	r20, 0x80	; 128
    5264:	5f e3       	ldi	r21, 0x3F	; 63
    5266:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    526a:	88 23       	and	r24, r24
    526c:	44 f4       	brge	.+16     	; 0x527e <main+0x3300>
		__ticks = 1;
    526e:	fe 01       	movw	r30, r28
    5270:	e7 5a       	subi	r30, 0xA7	; 167
    5272:	ff 4f       	sbci	r31, 0xFF	; 255
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	91 83       	std	Z+1, r25	; 0x01
    527a:	80 83       	st	Z, r24
    527c:	64 c0       	rjmp	.+200    	; 0x5346 <main+0x33c8>
	else if (__tmp > 65535)
    527e:	fe 01       	movw	r30, r28
    5280:	e5 5a       	subi	r30, 0xA5	; 165
    5282:	ff 4f       	sbci	r31, 0xFF	; 255
    5284:	60 81       	ld	r22, Z
    5286:	71 81       	ldd	r23, Z+1	; 0x01
    5288:	82 81       	ldd	r24, Z+2	; 0x02
    528a:	93 81       	ldd	r25, Z+3	; 0x03
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	3f ef       	ldi	r19, 0xFF	; 255
    5290:	4f e7       	ldi	r20, 0x7F	; 127
    5292:	57 e4       	ldi	r21, 0x47	; 71
    5294:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5298:	18 16       	cp	r1, r24
    529a:	0c f0       	brlt	.+2      	; 0x529e <main+0x3320>
    529c:	43 c0       	rjmp	.+134    	; 0x5324 <main+0x33a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    529e:	fe 01       	movw	r30, r28
    52a0:	e1 5a       	subi	r30, 0xA1	; 161
    52a2:	ff 4f       	sbci	r31, 0xFF	; 255
    52a4:	60 81       	ld	r22, Z
    52a6:	71 81       	ldd	r23, Z+1	; 0x01
    52a8:	82 81       	ldd	r24, Z+2	; 0x02
    52aa:	93 81       	ldd	r25, Z+3	; 0x03
    52ac:	20 e0       	ldi	r18, 0x00	; 0
    52ae:	30 e0       	ldi	r19, 0x00	; 0
    52b0:	40 e2       	ldi	r20, 0x20	; 32
    52b2:	51 e4       	ldi	r21, 0x41	; 65
    52b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52b8:	dc 01       	movw	r26, r24
    52ba:	cb 01       	movw	r24, r22
    52bc:	8e 01       	movw	r16, r28
    52be:	07 5a       	subi	r16, 0xA7	; 167
    52c0:	1f 4f       	sbci	r17, 0xFF	; 255
    52c2:	bc 01       	movw	r22, r24
    52c4:	cd 01       	movw	r24, r26
    52c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ca:	dc 01       	movw	r26, r24
    52cc:	cb 01       	movw	r24, r22
    52ce:	f8 01       	movw	r30, r16
    52d0:	91 83       	std	Z+1, r25	; 0x01
    52d2:	80 83       	st	Z, r24
    52d4:	1f c0       	rjmp	.+62     	; 0x5314 <main+0x3396>
    52d6:	fe 01       	movw	r30, r28
    52d8:	e9 5a       	subi	r30, 0xA9	; 169
    52da:	ff 4f       	sbci	r31, 0xFF	; 255
    52dc:	80 e9       	ldi	r24, 0x90	; 144
    52de:	91 e0       	ldi	r25, 0x01	; 1
    52e0:	91 83       	std	Z+1, r25	; 0x01
    52e2:	80 83       	st	Z, r24
    52e4:	fe 01       	movw	r30, r28
    52e6:	e9 5a       	subi	r30, 0xA9	; 169
    52e8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ea:	80 81       	ld	r24, Z
    52ec:	91 81       	ldd	r25, Z+1	; 0x01
    52ee:	01 97       	sbiw	r24, 0x01	; 1
    52f0:	f1 f7       	brne	.-4      	; 0x52ee <main+0x3370>
    52f2:	fe 01       	movw	r30, r28
    52f4:	e9 5a       	subi	r30, 0xA9	; 169
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	91 83       	std	Z+1, r25	; 0x01
    52fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52fc:	de 01       	movw	r26, r28
    52fe:	a7 5a       	subi	r26, 0xA7	; 167
    5300:	bf 4f       	sbci	r27, 0xFF	; 255
    5302:	fe 01       	movw	r30, r28
    5304:	e7 5a       	subi	r30, 0xA7	; 167
    5306:	ff 4f       	sbci	r31, 0xFF	; 255
    5308:	80 81       	ld	r24, Z
    530a:	91 81       	ldd	r25, Z+1	; 0x01
    530c:	01 97       	sbiw	r24, 0x01	; 1
    530e:	11 96       	adiw	r26, 0x01	; 1
    5310:	9c 93       	st	X, r25
    5312:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5314:	fe 01       	movw	r30, r28
    5316:	e7 5a       	subi	r30, 0xA7	; 167
    5318:	ff 4f       	sbci	r31, 0xFF	; 255
    531a:	80 81       	ld	r24, Z
    531c:	91 81       	ldd	r25, Z+1	; 0x01
    531e:	00 97       	sbiw	r24, 0x00	; 0
    5320:	d1 f6       	brne	.-76     	; 0x52d6 <main+0x3358>
    5322:	27 c0       	rjmp	.+78     	; 0x5372 <main+0x33f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5324:	8e 01       	movw	r16, r28
    5326:	07 5a       	subi	r16, 0xA7	; 167
    5328:	1f 4f       	sbci	r17, 0xFF	; 255
    532a:	fe 01       	movw	r30, r28
    532c:	e5 5a       	subi	r30, 0xA5	; 165
    532e:	ff 4f       	sbci	r31, 0xFF	; 255
    5330:	60 81       	ld	r22, Z
    5332:	71 81       	ldd	r23, Z+1	; 0x01
    5334:	82 81       	ldd	r24, Z+2	; 0x02
    5336:	93 81       	ldd	r25, Z+3	; 0x03
    5338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    533c:	dc 01       	movw	r26, r24
    533e:	cb 01       	movw	r24, r22
    5340:	f8 01       	movw	r30, r16
    5342:	91 83       	std	Z+1, r25	; 0x01
    5344:	80 83       	st	Z, r24
    5346:	de 01       	movw	r26, r28
    5348:	ab 5a       	subi	r26, 0xAB	; 171
    534a:	bf 4f       	sbci	r27, 0xFF	; 255
    534c:	fe 01       	movw	r30, r28
    534e:	e7 5a       	subi	r30, 0xA7	; 167
    5350:	ff 4f       	sbci	r31, 0xFF	; 255
    5352:	80 81       	ld	r24, Z
    5354:	91 81       	ldd	r25, Z+1	; 0x01
    5356:	8d 93       	st	X+, r24
    5358:	9c 93       	st	X, r25
    535a:	fe 01       	movw	r30, r28
    535c:	eb 5a       	subi	r30, 0xAB	; 171
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	80 81       	ld	r24, Z
    5362:	91 81       	ldd	r25, Z+1	; 0x01
    5364:	01 97       	sbiw	r24, 0x01	; 1
    5366:	f1 f7       	brne	.-4      	; 0x5364 <main+0x33e6>
    5368:	fe 01       	movw	r30, r28
    536a:	eb 5a       	subi	r30, 0xAB	; 171
    536c:	ff 4f       	sbci	r31, 0xFF	; 255
    536e:	91 83       	std	Z+1, r25	; 0x01
    5370:	80 83       	st	Z, r24
					_delay_ms(200);

					key_pressed = GetKeyPressed(login_mode);
    5372:	fe 01       	movw	r30, r28
    5374:	ed 51       	subi	r30, 0x1D	; 29
    5376:	fe 4f       	sbci	r31, 0xFE	; 254
    5378:	80 81       	ld	r24, Z
    537a:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <GetKeyPressed>
    537e:	fe 01       	movw	r30, r28
    5380:	ef 51       	subi	r30, 0x1F	; 31
    5382:	fe 4f       	sbci	r31, 0xFE	; 254
    5384:	80 83       	st	Z, r24
    5386:	fe 01       	movw	r30, r28
    5388:	ef 5a       	subi	r30, 0xAF	; 175
    538a:	ff 4f       	sbci	r31, 0xFF	; 255
    538c:	80 e0       	ldi	r24, 0x00	; 0
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	aa e7       	ldi	r26, 0x7A	; 122
    5392:	b3 e4       	ldi	r27, 0x43	; 67
    5394:	80 83       	st	Z, r24
    5396:	91 83       	std	Z+1, r25	; 0x01
    5398:	a2 83       	std	Z+2, r26	; 0x02
    539a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    539c:	8e 01       	movw	r16, r28
    539e:	03 5b       	subi	r16, 0xB3	; 179
    53a0:	1f 4f       	sbci	r17, 0xFF	; 255
    53a2:	fe 01       	movw	r30, r28
    53a4:	ef 5a       	subi	r30, 0xAF	; 175
    53a6:	ff 4f       	sbci	r31, 0xFF	; 255
    53a8:	60 81       	ld	r22, Z
    53aa:	71 81       	ldd	r23, Z+1	; 0x01
    53ac:	82 81       	ldd	r24, Z+2	; 0x02
    53ae:	93 81       	ldd	r25, Z+3	; 0x03
    53b0:	20 e0       	ldi	r18, 0x00	; 0
    53b2:	30 e0       	ldi	r19, 0x00	; 0
    53b4:	4a e7       	ldi	r20, 0x7A	; 122
    53b6:	55 e4       	ldi	r21, 0x45	; 69
    53b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53bc:	dc 01       	movw	r26, r24
    53be:	cb 01       	movw	r24, r22
    53c0:	f8 01       	movw	r30, r16
    53c2:	80 83       	st	Z, r24
    53c4:	91 83       	std	Z+1, r25	; 0x01
    53c6:	a2 83       	std	Z+2, r26	; 0x02
    53c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53ca:	fe 01       	movw	r30, r28
    53cc:	e3 5b       	subi	r30, 0xB3	; 179
    53ce:	ff 4f       	sbci	r31, 0xFF	; 255
    53d0:	60 81       	ld	r22, Z
    53d2:	71 81       	ldd	r23, Z+1	; 0x01
    53d4:	82 81       	ldd	r24, Z+2	; 0x02
    53d6:	93 81       	ldd	r25, Z+3	; 0x03
    53d8:	20 e0       	ldi	r18, 0x00	; 0
    53da:	30 e0       	ldi	r19, 0x00	; 0
    53dc:	40 e8       	ldi	r20, 0x80	; 128
    53de:	5f e3       	ldi	r21, 0x3F	; 63
    53e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53e4:	88 23       	and	r24, r24
    53e6:	44 f4       	brge	.+16     	; 0x53f8 <main+0x347a>
		__ticks = 1;
    53e8:	fe 01       	movw	r30, r28
    53ea:	e5 5b       	subi	r30, 0xB5	; 181
    53ec:	ff 4f       	sbci	r31, 0xFF	; 255
    53ee:	81 e0       	ldi	r24, 0x01	; 1
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	91 83       	std	Z+1, r25	; 0x01
    53f4:	80 83       	st	Z, r24
    53f6:	64 c0       	rjmp	.+200    	; 0x54c0 <main+0x3542>
	else if (__tmp > 65535)
    53f8:	fe 01       	movw	r30, r28
    53fa:	e3 5b       	subi	r30, 0xB3	; 179
    53fc:	ff 4f       	sbci	r31, 0xFF	; 255
    53fe:	60 81       	ld	r22, Z
    5400:	71 81       	ldd	r23, Z+1	; 0x01
    5402:	82 81       	ldd	r24, Z+2	; 0x02
    5404:	93 81       	ldd	r25, Z+3	; 0x03
    5406:	20 e0       	ldi	r18, 0x00	; 0
    5408:	3f ef       	ldi	r19, 0xFF	; 255
    540a:	4f e7       	ldi	r20, 0x7F	; 127
    540c:	57 e4       	ldi	r21, 0x47	; 71
    540e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5412:	18 16       	cp	r1, r24
    5414:	0c f0       	brlt	.+2      	; 0x5418 <main+0x349a>
    5416:	43 c0       	rjmp	.+134    	; 0x549e <main+0x3520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5418:	fe 01       	movw	r30, r28
    541a:	ef 5a       	subi	r30, 0xAF	; 175
    541c:	ff 4f       	sbci	r31, 0xFF	; 255
    541e:	60 81       	ld	r22, Z
    5420:	71 81       	ldd	r23, Z+1	; 0x01
    5422:	82 81       	ldd	r24, Z+2	; 0x02
    5424:	93 81       	ldd	r25, Z+3	; 0x03
    5426:	20 e0       	ldi	r18, 0x00	; 0
    5428:	30 e0       	ldi	r19, 0x00	; 0
    542a:	40 e2       	ldi	r20, 0x20	; 32
    542c:	51 e4       	ldi	r21, 0x41	; 65
    542e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5432:	dc 01       	movw	r26, r24
    5434:	cb 01       	movw	r24, r22
    5436:	8e 01       	movw	r16, r28
    5438:	05 5b       	subi	r16, 0xB5	; 181
    543a:	1f 4f       	sbci	r17, 0xFF	; 255
    543c:	bc 01       	movw	r22, r24
    543e:	cd 01       	movw	r24, r26
    5440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5444:	dc 01       	movw	r26, r24
    5446:	cb 01       	movw	r24, r22
    5448:	f8 01       	movw	r30, r16
    544a:	91 83       	std	Z+1, r25	; 0x01
    544c:	80 83       	st	Z, r24
    544e:	1f c0       	rjmp	.+62     	; 0x548e <main+0x3510>
    5450:	fe 01       	movw	r30, r28
    5452:	e7 5b       	subi	r30, 0xB7	; 183
    5454:	ff 4f       	sbci	r31, 0xFF	; 255
    5456:	80 e9       	ldi	r24, 0x90	; 144
    5458:	91 e0       	ldi	r25, 0x01	; 1
    545a:	91 83       	std	Z+1, r25	; 0x01
    545c:	80 83       	st	Z, r24
    545e:	fe 01       	movw	r30, r28
    5460:	e7 5b       	subi	r30, 0xB7	; 183
    5462:	ff 4f       	sbci	r31, 0xFF	; 255
    5464:	80 81       	ld	r24, Z
    5466:	91 81       	ldd	r25, Z+1	; 0x01
    5468:	01 97       	sbiw	r24, 0x01	; 1
    546a:	f1 f7       	brne	.-4      	; 0x5468 <main+0x34ea>
    546c:	fe 01       	movw	r30, r28
    546e:	e7 5b       	subi	r30, 0xB7	; 183
    5470:	ff 4f       	sbci	r31, 0xFF	; 255
    5472:	91 83       	std	Z+1, r25	; 0x01
    5474:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5476:	de 01       	movw	r26, r28
    5478:	a5 5b       	subi	r26, 0xB5	; 181
    547a:	bf 4f       	sbci	r27, 0xFF	; 255
    547c:	fe 01       	movw	r30, r28
    547e:	e5 5b       	subi	r30, 0xB5	; 181
    5480:	ff 4f       	sbci	r31, 0xFF	; 255
    5482:	80 81       	ld	r24, Z
    5484:	91 81       	ldd	r25, Z+1	; 0x01
    5486:	01 97       	sbiw	r24, 0x01	; 1
    5488:	11 96       	adiw	r26, 0x01	; 1
    548a:	9c 93       	st	X, r25
    548c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    548e:	fe 01       	movw	r30, r28
    5490:	e5 5b       	subi	r30, 0xB5	; 181
    5492:	ff 4f       	sbci	r31, 0xFF	; 255
    5494:	80 81       	ld	r24, Z
    5496:	91 81       	ldd	r25, Z+1	; 0x01
    5498:	00 97       	sbiw	r24, 0x00	; 0
    549a:	d1 f6       	brne	.-76     	; 0x5450 <main+0x34d2>
    549c:	28 c0       	rjmp	.+80     	; 0x54ee <main+0x3570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    549e:	8e 01       	movw	r16, r28
    54a0:	05 5b       	subi	r16, 0xB5	; 181
    54a2:	1f 4f       	sbci	r17, 0xFF	; 255
    54a4:	fe 01       	movw	r30, r28
    54a6:	e3 5b       	subi	r30, 0xB3	; 179
    54a8:	ff 4f       	sbci	r31, 0xFF	; 255
    54aa:	60 81       	ld	r22, Z
    54ac:	71 81       	ldd	r23, Z+1	; 0x01
    54ae:	82 81       	ldd	r24, Z+2	; 0x02
    54b0:	93 81       	ldd	r25, Z+3	; 0x03
    54b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54b6:	dc 01       	movw	r26, r24
    54b8:	cb 01       	movw	r24, r22
    54ba:	f8 01       	movw	r30, r16
    54bc:	91 83       	std	Z+1, r25	; 0x01
    54be:	80 83       	st	Z, r24
    54c0:	de 01       	movw	r26, r28
    54c2:	a9 5b       	subi	r26, 0xB9	; 185
    54c4:	bf 4f       	sbci	r27, 0xFF	; 255
    54c6:	fe 01       	movw	r30, r28
    54c8:	e5 5b       	subi	r30, 0xB5	; 181
    54ca:	ff 4f       	sbci	r31, 0xFF	; 255
    54cc:	80 81       	ld	r24, Z
    54ce:	91 81       	ldd	r25, Z+1	; 0x01
    54d0:	11 96       	adiw	r26, 0x01	; 1
    54d2:	9c 93       	st	X, r25
    54d4:	8e 93       	st	-X, r24
    54d6:	fe 01       	movw	r30, r28
    54d8:	e9 5b       	subi	r30, 0xB9	; 185
    54da:	ff 4f       	sbci	r31, 0xFF	; 255
    54dc:	80 81       	ld	r24, Z
    54de:	91 81       	ldd	r25, Z+1	; 0x01
    54e0:	01 97       	sbiw	r24, 0x01	; 1
    54e2:	f1 f7       	brne	.-4      	; 0x54e0 <main+0x3562>
    54e4:	fe 01       	movw	r30, r28
    54e6:	e9 5b       	subi	r30, 0xB9	; 185
    54e8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ea:	91 83       	std	Z+1, r25	; 0x01
    54ec:	80 83       	st	Z, r24
					_delay_ms(250);

					if (timeout_flag == TRUE)
    54ee:	80 91 8c 02 	lds	r24, 0x028C
    54f2:	81 30       	cpi	r24, 0x01	; 1
    54f4:	09 f4       	brne	.+2      	; 0x54f8 <main+0x357a>
    54f6:	e0 c2       	rjmp	.+1472   	; 0x5ab8 <main+0x3b3a>
					{
						break;
					}
					if (key_pressed < '0' || key_pressed > '9')
    54f8:	fe 01       	movw	r30, r28
    54fa:	ef 51       	subi	r30, 0x1F	; 31
    54fc:	fe 4f       	sbci	r31, 0xFE	; 254
    54fe:	80 81       	ld	r24, Z
    5500:	80 33       	cpi	r24, 0x30	; 48
    5502:	38 f0       	brcs	.+14     	; 0x5512 <main+0x3594>
    5504:	fe 01       	movw	r30, r28
    5506:	ef 51       	subi	r30, 0x1F	; 31
    5508:	fe 4f       	sbci	r31, 0xFE	; 254
    550a:	80 81       	ld	r24, Z
    550c:	8a 33       	cpi	r24, 0x3A	; 58
    550e:	08 f4       	brcc	.+2      	; 0x5512 <main+0x3594>
    5510:	8c c0       	rjmp	.+280    	; 0x562a <main+0x36ac>
					{
						LCD_CLEAR_SCREEN();
    5512:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
						LCD_WriteString("wrong input");
    5516:	83 ea       	ldi	r24, 0xA3	; 163
    5518:	91 e0       	ldi	r25, 0x01	; 1
    551a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    551e:	fe 01       	movw	r30, r28
    5520:	ed 5b       	subi	r30, 0xBD	; 189
    5522:	ff 4f       	sbci	r31, 0xFF	; 255
    5524:	80 e0       	ldi	r24, 0x00	; 0
    5526:	90 e0       	ldi	r25, 0x00	; 0
    5528:	aa ef       	ldi	r26, 0xFA	; 250
    552a:	b3 e4       	ldi	r27, 0x43	; 67
    552c:	80 83       	st	Z, r24
    552e:	91 83       	std	Z+1, r25	; 0x01
    5530:	a2 83       	std	Z+2, r26	; 0x02
    5532:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5534:	8e 01       	movw	r16, r28
    5536:	01 5c       	subi	r16, 0xC1	; 193
    5538:	1f 4f       	sbci	r17, 0xFF	; 255
    553a:	fe 01       	movw	r30, r28
    553c:	ed 5b       	subi	r30, 0xBD	; 189
    553e:	ff 4f       	sbci	r31, 0xFF	; 255
    5540:	60 81       	ld	r22, Z
    5542:	71 81       	ldd	r23, Z+1	; 0x01
    5544:	82 81       	ldd	r24, Z+2	; 0x02
    5546:	93 81       	ldd	r25, Z+3	; 0x03
    5548:	20 e0       	ldi	r18, 0x00	; 0
    554a:	30 e0       	ldi	r19, 0x00	; 0
    554c:	4a e7       	ldi	r20, 0x7A	; 122
    554e:	55 e4       	ldi	r21, 0x45	; 69
    5550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5554:	dc 01       	movw	r26, r24
    5556:	cb 01       	movw	r24, r22
    5558:	f8 01       	movw	r30, r16
    555a:	80 83       	st	Z, r24
    555c:	91 83       	std	Z+1, r25	; 0x01
    555e:	a2 83       	std	Z+2, r26	; 0x02
    5560:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5562:	fe 01       	movw	r30, r28
    5564:	ff 96       	adiw	r30, 0x3f	; 63
    5566:	60 81       	ld	r22, Z
    5568:	71 81       	ldd	r23, Z+1	; 0x01
    556a:	82 81       	ldd	r24, Z+2	; 0x02
    556c:	93 81       	ldd	r25, Z+3	; 0x03
    556e:	20 e0       	ldi	r18, 0x00	; 0
    5570:	30 e0       	ldi	r19, 0x00	; 0
    5572:	40 e8       	ldi	r20, 0x80	; 128
    5574:	5f e3       	ldi	r21, 0x3F	; 63
    5576:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    557a:	88 23       	and	r24, r24
    557c:	2c f4       	brge	.+10     	; 0x5588 <main+0x360a>
		__ticks = 1;
    557e:	81 e0       	ldi	r24, 0x01	; 1
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	9e af       	std	Y+62, r25	; 0x3e
    5584:	8d af       	std	Y+61, r24	; 0x3d
    5586:	46 c0       	rjmp	.+140    	; 0x5614 <main+0x3696>
	else if (__tmp > 65535)
    5588:	fe 01       	movw	r30, r28
    558a:	ff 96       	adiw	r30, 0x3f	; 63
    558c:	60 81       	ld	r22, Z
    558e:	71 81       	ldd	r23, Z+1	; 0x01
    5590:	82 81       	ldd	r24, Z+2	; 0x02
    5592:	93 81       	ldd	r25, Z+3	; 0x03
    5594:	20 e0       	ldi	r18, 0x00	; 0
    5596:	3f ef       	ldi	r19, 0xFF	; 255
    5598:	4f e7       	ldi	r20, 0x7F	; 127
    559a:	57 e4       	ldi	r21, 0x47	; 71
    559c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55a0:	18 16       	cp	r1, r24
    55a2:	64 f5       	brge	.+88     	; 0x55fc <main+0x367e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55a4:	fe 01       	movw	r30, r28
    55a6:	ed 5b       	subi	r30, 0xBD	; 189
    55a8:	ff 4f       	sbci	r31, 0xFF	; 255
    55aa:	60 81       	ld	r22, Z
    55ac:	71 81       	ldd	r23, Z+1	; 0x01
    55ae:	82 81       	ldd	r24, Z+2	; 0x02
    55b0:	93 81       	ldd	r25, Z+3	; 0x03
    55b2:	20 e0       	ldi	r18, 0x00	; 0
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	40 e2       	ldi	r20, 0x20	; 32
    55b8:	51 e4       	ldi	r21, 0x41	; 65
    55ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55be:	dc 01       	movw	r26, r24
    55c0:	cb 01       	movw	r24, r22
    55c2:	bc 01       	movw	r22, r24
    55c4:	cd 01       	movw	r24, r26
    55c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ca:	dc 01       	movw	r26, r24
    55cc:	cb 01       	movw	r24, r22
    55ce:	9e af       	std	Y+62, r25	; 0x3e
    55d0:	8d af       	std	Y+61, r24	; 0x3d
    55d2:	0f c0       	rjmp	.+30     	; 0x55f2 <main+0x3674>
    55d4:	80 e9       	ldi	r24, 0x90	; 144
    55d6:	91 e0       	ldi	r25, 0x01	; 1
    55d8:	9c af       	std	Y+60, r25	; 0x3c
    55da:	8b af       	std	Y+59, r24	; 0x3b
    55dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    55de:	9c ad       	ldd	r25, Y+60	; 0x3c
    55e0:	01 97       	sbiw	r24, 0x01	; 1
    55e2:	f1 f7       	brne	.-4      	; 0x55e0 <main+0x3662>
    55e4:	9c af       	std	Y+60, r25	; 0x3c
    55e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    55ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    55ec:	01 97       	sbiw	r24, 0x01	; 1
    55ee:	9e af       	std	Y+62, r25	; 0x3e
    55f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    55f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    55f6:	00 97       	sbiw	r24, 0x00	; 0
    55f8:	69 f7       	brne	.-38     	; 0x55d4 <main+0x3656>
    55fa:	53 c2       	rjmp	.+1190   	; 0x5aa2 <main+0x3b24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55fc:	fe 01       	movw	r30, r28
    55fe:	ff 96       	adiw	r30, 0x3f	; 63
    5600:	60 81       	ld	r22, Z
    5602:	71 81       	ldd	r23, Z+1	; 0x01
    5604:	82 81       	ldd	r24, Z+2	; 0x02
    5606:	93 81       	ldd	r25, Z+3	; 0x03
    5608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22
    5610:	9e af       	std	Y+62, r25	; 0x3e
    5612:	8d af       	std	Y+61, r24	; 0x3d
    5614:	8d ad       	ldd	r24, Y+61	; 0x3d
    5616:	9e ad       	ldd	r25, Y+62	; 0x3e
    5618:	9a af       	std	Y+58, r25	; 0x3a
    561a:	89 af       	std	Y+57, r24	; 0x39
    561c:	89 ad       	ldd	r24, Y+57	; 0x39
    561e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5620:	01 97       	sbiw	r24, 0x01	; 1
    5622:	f1 f7       	brne	.-4      	; 0x5620 <main+0x36a2>
    5624:	9a af       	std	Y+58, r25	; 0x3a
    5626:	89 af       	std	Y+57, r24	; 0x39
    5628:	3c c2       	rjmp	.+1144   	; 0x5aa2 <main+0x3b24>
						_delay_ms(500);
						continue;
					}
					else
					{
						LCD_WriteChar(key_pressed);
    562a:	fe 01       	movw	r30, r28
    562c:	ef 51       	subi	r30, 0x1F	; 31
    562e:	fe 4f       	sbci	r31, 0xFE	; 254
    5630:	80 81       	ld	r24, Z
    5632:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
						temp_tens = key_pressed -ASCII_ZERO;
    5636:	de 01       	movw	r26, r28
    5638:	ac 51       	subi	r26, 0x1C	; 28
    563a:	be 4f       	sbci	r27, 0xFE	; 254
    563c:	fe 01       	movw	r30, r28
    563e:	ef 51       	subi	r30, 0x1F	; 31
    5640:	fe 4f       	sbci	r31, 0xFE	; 254
    5642:	80 81       	ld	r24, Z
    5644:	80 53       	subi	r24, 0x30	; 48
    5646:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;
    5648:	fe 01       	movw	r30, r28
    564a:	ef 51       	subi	r30, 0x1F	; 31
    564c:	fe 4f       	sbci	r31, 0xFE	; 254
    564e:	8f ef       	ldi	r24, 0xFF	; 255
    5650:	80 83       	st	Z, r24
					}
					key_pressed = GetKeyPressed(login_mode);
    5652:	fe 01       	movw	r30, r28
    5654:	ed 51       	subi	r30, 0x1D	; 29
    5656:	fe 4f       	sbci	r31, 0xFE	; 254
    5658:	80 81       	ld	r24, Z
    565a:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <GetKeyPressed>
    565e:	fe 01       	movw	r30, r28
    5660:	ef 51       	subi	r30, 0x1F	; 31
    5662:	fe 4f       	sbci	r31, 0xFE	; 254
    5664:	80 83       	st	Z, r24
    5666:	80 e0       	ldi	r24, 0x00	; 0
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	aa e7       	ldi	r26, 0x7A	; 122
    566c:	b3 e4       	ldi	r27, 0x43	; 67
    566e:	8d ab       	std	Y+53, r24	; 0x35
    5670:	9e ab       	std	Y+54, r25	; 0x36
    5672:	af ab       	std	Y+55, r26	; 0x37
    5674:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5676:	6d a9       	ldd	r22, Y+53	; 0x35
    5678:	7e a9       	ldd	r23, Y+54	; 0x36
    567a:	8f a9       	ldd	r24, Y+55	; 0x37
    567c:	98 ad       	ldd	r25, Y+56	; 0x38
    567e:	20 e0       	ldi	r18, 0x00	; 0
    5680:	30 e0       	ldi	r19, 0x00	; 0
    5682:	4a e7       	ldi	r20, 0x7A	; 122
    5684:	55 e4       	ldi	r21, 0x45	; 69
    5686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    568a:	dc 01       	movw	r26, r24
    568c:	cb 01       	movw	r24, r22
    568e:	89 ab       	std	Y+49, r24	; 0x31
    5690:	9a ab       	std	Y+50, r25	; 0x32
    5692:	ab ab       	std	Y+51, r26	; 0x33
    5694:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5696:	69 a9       	ldd	r22, Y+49	; 0x31
    5698:	7a a9       	ldd	r23, Y+50	; 0x32
    569a:	8b a9       	ldd	r24, Y+51	; 0x33
    569c:	9c a9       	ldd	r25, Y+52	; 0x34
    569e:	20 e0       	ldi	r18, 0x00	; 0
    56a0:	30 e0       	ldi	r19, 0x00	; 0
    56a2:	40 e8       	ldi	r20, 0x80	; 128
    56a4:	5f e3       	ldi	r21, 0x3F	; 63
    56a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56aa:	88 23       	and	r24, r24
    56ac:	2c f4       	brge	.+10     	; 0x56b8 <main+0x373a>
		__ticks = 1;
    56ae:	81 e0       	ldi	r24, 0x01	; 1
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	98 ab       	std	Y+48, r25	; 0x30
    56b4:	8f a7       	std	Y+47, r24	; 0x2f
    56b6:	3f c0       	rjmp	.+126    	; 0x5736 <main+0x37b8>
	else if (__tmp > 65535)
    56b8:	69 a9       	ldd	r22, Y+49	; 0x31
    56ba:	7a a9       	ldd	r23, Y+50	; 0x32
    56bc:	8b a9       	ldd	r24, Y+51	; 0x33
    56be:	9c a9       	ldd	r25, Y+52	; 0x34
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	3f ef       	ldi	r19, 0xFF	; 255
    56c4:	4f e7       	ldi	r20, 0x7F	; 127
    56c6:	57 e4       	ldi	r21, 0x47	; 71
    56c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56cc:	18 16       	cp	r1, r24
    56ce:	4c f5       	brge	.+82     	; 0x5722 <main+0x37a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56d0:	6d a9       	ldd	r22, Y+53	; 0x35
    56d2:	7e a9       	ldd	r23, Y+54	; 0x36
    56d4:	8f a9       	ldd	r24, Y+55	; 0x37
    56d6:	98 ad       	ldd	r25, Y+56	; 0x38
    56d8:	20 e0       	ldi	r18, 0x00	; 0
    56da:	30 e0       	ldi	r19, 0x00	; 0
    56dc:	40 e2       	ldi	r20, 0x20	; 32
    56de:	51 e4       	ldi	r21, 0x41	; 65
    56e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56e4:	dc 01       	movw	r26, r24
    56e6:	cb 01       	movw	r24, r22
    56e8:	bc 01       	movw	r22, r24
    56ea:	cd 01       	movw	r24, r26
    56ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56f0:	dc 01       	movw	r26, r24
    56f2:	cb 01       	movw	r24, r22
    56f4:	98 ab       	std	Y+48, r25	; 0x30
    56f6:	8f a7       	std	Y+47, r24	; 0x2f
    56f8:	0f c0       	rjmp	.+30     	; 0x5718 <main+0x379a>
    56fa:	80 e9       	ldi	r24, 0x90	; 144
    56fc:	91 e0       	ldi	r25, 0x01	; 1
    56fe:	9e a7       	std	Y+46, r25	; 0x2e
    5700:	8d a7       	std	Y+45, r24	; 0x2d
    5702:	8d a5       	ldd	r24, Y+45	; 0x2d
    5704:	9e a5       	ldd	r25, Y+46	; 0x2e
    5706:	01 97       	sbiw	r24, 0x01	; 1
    5708:	f1 f7       	brne	.-4      	; 0x5706 <main+0x3788>
    570a:	9e a7       	std	Y+46, r25	; 0x2e
    570c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    570e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5710:	98 a9       	ldd	r25, Y+48	; 0x30
    5712:	01 97       	sbiw	r24, 0x01	; 1
    5714:	98 ab       	std	Y+48, r25	; 0x30
    5716:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5718:	8f a5       	ldd	r24, Y+47	; 0x2f
    571a:	98 a9       	ldd	r25, Y+48	; 0x30
    571c:	00 97       	sbiw	r24, 0x00	; 0
    571e:	69 f7       	brne	.-38     	; 0x56fa <main+0x377c>
    5720:	14 c0       	rjmp	.+40     	; 0x574a <main+0x37cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5722:	69 a9       	ldd	r22, Y+49	; 0x31
    5724:	7a a9       	ldd	r23, Y+50	; 0x32
    5726:	8b a9       	ldd	r24, Y+51	; 0x33
    5728:	9c a9       	ldd	r25, Y+52	; 0x34
    572a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    572e:	dc 01       	movw	r26, r24
    5730:	cb 01       	movw	r24, r22
    5732:	98 ab       	std	Y+48, r25	; 0x30
    5734:	8f a7       	std	Y+47, r24	; 0x2f
    5736:	8f a5       	ldd	r24, Y+47	; 0x2f
    5738:	98 a9       	ldd	r25, Y+48	; 0x30
    573a:	9c a7       	std	Y+44, r25	; 0x2c
    573c:	8b a7       	std	Y+43, r24	; 0x2b
    573e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5740:	9c a5       	ldd	r25, Y+44	; 0x2c
    5742:	01 97       	sbiw	r24, 0x01	; 1
    5744:	f1 f7       	brne	.-4      	; 0x5742 <main+0x37c4>
    5746:	9c a7       	std	Y+44, r25	; 0x2c
    5748:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(250);

					if (timeout_flag == TRUE)
    574a:	80 91 8c 02 	lds	r24, 0x028C
    574e:	81 30       	cpi	r24, 0x01	; 1
    5750:	09 f4       	brne	.+2      	; 0x5754 <main+0x37d6>
    5752:	b2 c1       	rjmp	.+868    	; 0x5ab8 <main+0x3b3a>
					{
						break;
					}
					if (key_pressed < '0' || key_pressed > '9')
    5754:	fe 01       	movw	r30, r28
    5756:	ef 51       	subi	r30, 0x1F	; 31
    5758:	fe 4f       	sbci	r31, 0xFE	; 254
    575a:	80 81       	ld	r24, Z
    575c:	80 33       	cpi	r24, 0x30	; 48
    575e:	38 f0       	brcs	.+14     	; 0x576e <main+0x37f0>
    5760:	fe 01       	movw	r30, r28
    5762:	ef 51       	subi	r30, 0x1F	; 31
    5764:	fe 4f       	sbci	r31, 0xFE	; 254
    5766:	80 81       	ld	r24, Z
    5768:	8a 33       	cpi	r24, 0x3A	; 58
    576a:	08 f4       	brcc	.+2      	; 0x576e <main+0x37f0>
    576c:	79 c0       	rjmp	.+242    	; 0x5860 <main+0x38e2>
					{
						LCD_CLEAR_SCREEN();
    576e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
						LCD_WriteString("wrong input");
    5772:	83 ea       	ldi	r24, 0xA3	; 163
    5774:	91 e0       	ldi	r25, 0x01	; 1
    5776:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    577a:	80 e0       	ldi	r24, 0x00	; 0
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	aa ef       	ldi	r26, 0xFA	; 250
    5780:	b3 e4       	ldi	r27, 0x43	; 67
    5782:	8f a3       	std	Y+39, r24	; 0x27
    5784:	98 a7       	std	Y+40, r25	; 0x28
    5786:	a9 a7       	std	Y+41, r26	; 0x29
    5788:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    578a:	6f a1       	ldd	r22, Y+39	; 0x27
    578c:	78 a5       	ldd	r23, Y+40	; 0x28
    578e:	89 a5       	ldd	r24, Y+41	; 0x29
    5790:	9a a5       	ldd	r25, Y+42	; 0x2a
    5792:	20 e0       	ldi	r18, 0x00	; 0
    5794:	30 e0       	ldi	r19, 0x00	; 0
    5796:	4a e7       	ldi	r20, 0x7A	; 122
    5798:	55 e4       	ldi	r21, 0x45	; 69
    579a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    579e:	dc 01       	movw	r26, r24
    57a0:	cb 01       	movw	r24, r22
    57a2:	8b a3       	std	Y+35, r24	; 0x23
    57a4:	9c a3       	std	Y+36, r25	; 0x24
    57a6:	ad a3       	std	Y+37, r26	; 0x25
    57a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    57aa:	6b a1       	ldd	r22, Y+35	; 0x23
    57ac:	7c a1       	ldd	r23, Y+36	; 0x24
    57ae:	8d a1       	ldd	r24, Y+37	; 0x25
    57b0:	9e a1       	ldd	r25, Y+38	; 0x26
    57b2:	20 e0       	ldi	r18, 0x00	; 0
    57b4:	30 e0       	ldi	r19, 0x00	; 0
    57b6:	40 e8       	ldi	r20, 0x80	; 128
    57b8:	5f e3       	ldi	r21, 0x3F	; 63
    57ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57be:	88 23       	and	r24, r24
    57c0:	2c f4       	brge	.+10     	; 0x57cc <main+0x384e>
		__ticks = 1;
    57c2:	81 e0       	ldi	r24, 0x01	; 1
    57c4:	90 e0       	ldi	r25, 0x00	; 0
    57c6:	9a a3       	std	Y+34, r25	; 0x22
    57c8:	89 a3       	std	Y+33, r24	; 0x21
    57ca:	3f c0       	rjmp	.+126    	; 0x584a <main+0x38cc>
	else if (__tmp > 65535)
    57cc:	6b a1       	ldd	r22, Y+35	; 0x23
    57ce:	7c a1       	ldd	r23, Y+36	; 0x24
    57d0:	8d a1       	ldd	r24, Y+37	; 0x25
    57d2:	9e a1       	ldd	r25, Y+38	; 0x26
    57d4:	20 e0       	ldi	r18, 0x00	; 0
    57d6:	3f ef       	ldi	r19, 0xFF	; 255
    57d8:	4f e7       	ldi	r20, 0x7F	; 127
    57da:	57 e4       	ldi	r21, 0x47	; 71
    57dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57e0:	18 16       	cp	r1, r24
    57e2:	4c f5       	brge	.+82     	; 0x5836 <main+0x38b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57e4:	6f a1       	ldd	r22, Y+39	; 0x27
    57e6:	78 a5       	ldd	r23, Y+40	; 0x28
    57e8:	89 a5       	ldd	r24, Y+41	; 0x29
    57ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    57ec:	20 e0       	ldi	r18, 0x00	; 0
    57ee:	30 e0       	ldi	r19, 0x00	; 0
    57f0:	40 e2       	ldi	r20, 0x20	; 32
    57f2:	51 e4       	ldi	r21, 0x41	; 65
    57f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57f8:	dc 01       	movw	r26, r24
    57fa:	cb 01       	movw	r24, r22
    57fc:	bc 01       	movw	r22, r24
    57fe:	cd 01       	movw	r24, r26
    5800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5804:	dc 01       	movw	r26, r24
    5806:	cb 01       	movw	r24, r22
    5808:	9a a3       	std	Y+34, r25	; 0x22
    580a:	89 a3       	std	Y+33, r24	; 0x21
    580c:	0f c0       	rjmp	.+30     	; 0x582c <main+0x38ae>
    580e:	80 e9       	ldi	r24, 0x90	; 144
    5810:	91 e0       	ldi	r25, 0x01	; 1
    5812:	98 a3       	std	Y+32, r25	; 0x20
    5814:	8f 8f       	std	Y+31, r24	; 0x1f
    5816:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5818:	98 a1       	ldd	r25, Y+32	; 0x20
    581a:	01 97       	sbiw	r24, 0x01	; 1
    581c:	f1 f7       	brne	.-4      	; 0x581a <main+0x389c>
    581e:	98 a3       	std	Y+32, r25	; 0x20
    5820:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5822:	89 a1       	ldd	r24, Y+33	; 0x21
    5824:	9a a1       	ldd	r25, Y+34	; 0x22
    5826:	01 97       	sbiw	r24, 0x01	; 1
    5828:	9a a3       	std	Y+34, r25	; 0x22
    582a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    582c:	89 a1       	ldd	r24, Y+33	; 0x21
    582e:	9a a1       	ldd	r25, Y+34	; 0x22
    5830:	00 97       	sbiw	r24, 0x00	; 0
    5832:	69 f7       	brne	.-38     	; 0x580e <main+0x3890>
    5834:	36 c1       	rjmp	.+620    	; 0x5aa2 <main+0x3b24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5836:	6b a1       	ldd	r22, Y+35	; 0x23
    5838:	7c a1       	ldd	r23, Y+36	; 0x24
    583a:	8d a1       	ldd	r24, Y+37	; 0x25
    583c:	9e a1       	ldd	r25, Y+38	; 0x26
    583e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5842:	dc 01       	movw	r26, r24
    5844:	cb 01       	movw	r24, r22
    5846:	9a a3       	std	Y+34, r25	; 0x22
    5848:	89 a3       	std	Y+33, r24	; 0x21
    584a:	89 a1       	ldd	r24, Y+33	; 0x21
    584c:	9a a1       	ldd	r25, Y+34	; 0x22
    584e:	9e 8f       	std	Y+30, r25	; 0x1e
    5850:	8d 8f       	std	Y+29, r24	; 0x1d
    5852:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5854:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5856:	01 97       	sbiw	r24, 0x01	; 1
    5858:	f1 f7       	brne	.-4      	; 0x5856 <main+0x38d8>
    585a:	9e 8f       	std	Y+30, r25	; 0x1e
    585c:	8d 8f       	std	Y+29, r24	; 0x1d
    585e:	21 c1       	rjmp	.+578    	; 0x5aa2 <main+0x3b24>
						_delay_ms(500);
						continue;
					}
					else
					{
						LCD_WriteChar(key_pressed);
    5860:	fe 01       	movw	r30, r28
    5862:	ef 51       	subi	r30, 0x1F	; 31
    5864:	fe 4f       	sbci	r31, 0xFE	; 254
    5866:	80 81       	ld	r24, Z
    5868:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_WriteChar>
						temp_ones = key_pressed -ASCII_ZERO;
    586c:	de 01       	movw	r26, r28
    586e:	ab 51       	subi	r26, 0x1B	; 27
    5870:	be 4f       	sbci	r27, 0xFE	; 254
    5872:	fe 01       	movw	r30, r28
    5874:	ef 51       	subi	r30, 0x1F	; 31
    5876:	fe 4f       	sbci	r31, 0xFE	; 254
    5878:	80 81       	ld	r24, Z
    587a:	80 53       	subi	r24, 0x30	; 48
    587c:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;
    587e:	fe 01       	movw	r30, r28
    5880:	ef 51       	subi	r30, 0x1F	; 31
    5882:	fe 4f       	sbci	r31, 0xFE	; 254
    5884:	8f ef       	ldi	r24, 0xFF	; 255
    5886:	80 83       	st	Z, r24
					}
					temperatue = (temp_tens*10) + temp_ones;
    5888:	fe 01       	movw	r30, r28
    588a:	ec 51       	subi	r30, 0x1C	; 28
    588c:	fe 4f       	sbci	r31, 0xFE	; 254
    588e:	80 81       	ld	r24, Z
    5890:	88 2f       	mov	r24, r24
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	9c 01       	movw	r18, r24
    5896:	22 0f       	add	r18, r18
    5898:	33 1f       	adc	r19, r19
    589a:	c9 01       	movw	r24, r18
    589c:	88 0f       	add	r24, r24
    589e:	99 1f       	adc	r25, r25
    58a0:	88 0f       	add	r24, r24
    58a2:	99 1f       	adc	r25, r25
    58a4:	82 0f       	add	r24, r18
    58a6:	93 1f       	adc	r25, r19
    58a8:	98 2f       	mov	r25, r24
    58aa:	de 01       	movw	r26, r28
    58ac:	aa 51       	subi	r26, 0x1A	; 26
    58ae:	be 4f       	sbci	r27, 0xFE	; 254
    58b0:	fe 01       	movw	r30, r28
    58b2:	eb 51       	subi	r30, 0x1B	; 27
    58b4:	fe 4f       	sbci	r31, 0xFE	; 254
    58b6:	80 81       	ld	r24, Z
    58b8:	89 0f       	add	r24, r25
    58ba:	8c 93       	st	X, r24
					SPI_SEND_RECEIVE_DATA(SET_TEMPERATURE);
    58bc:	80 e4       	ldi	r24, 0x40	; 64
    58be:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <SPI_SEND_RECEIVE_DATA>
    58c2:	80 e0       	ldi	r24, 0x00	; 0
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	a8 e4       	ldi	r26, 0x48	; 72
    58c8:	b3 e4       	ldi	r27, 0x43	; 67
    58ca:	89 8f       	std	Y+25, r24	; 0x19
    58cc:	9a 8f       	std	Y+26, r25	; 0x1a
    58ce:	ab 8f       	std	Y+27, r26	; 0x1b
    58d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58d2:	69 8d       	ldd	r22, Y+25	; 0x19
    58d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    58d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    58da:	20 e0       	ldi	r18, 0x00	; 0
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	4a e7       	ldi	r20, 0x7A	; 122
    58e0:	55 e4       	ldi	r21, 0x45	; 69
    58e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58e6:	dc 01       	movw	r26, r24
    58e8:	cb 01       	movw	r24, r22
    58ea:	8d 8b       	std	Y+21, r24	; 0x15
    58ec:	9e 8b       	std	Y+22, r25	; 0x16
    58ee:	af 8b       	std	Y+23, r26	; 0x17
    58f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    58f2:	6d 89       	ldd	r22, Y+21	; 0x15
    58f4:	7e 89       	ldd	r23, Y+22	; 0x16
    58f6:	8f 89       	ldd	r24, Y+23	; 0x17
    58f8:	98 8d       	ldd	r25, Y+24	; 0x18
    58fa:	20 e0       	ldi	r18, 0x00	; 0
    58fc:	30 e0       	ldi	r19, 0x00	; 0
    58fe:	40 e8       	ldi	r20, 0x80	; 128
    5900:	5f e3       	ldi	r21, 0x3F	; 63
    5902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5906:	88 23       	and	r24, r24
    5908:	2c f4       	brge	.+10     	; 0x5914 <main+0x3996>
		__ticks = 1;
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	9c 8b       	std	Y+20, r25	; 0x14
    5910:	8b 8b       	std	Y+19, r24	; 0x13
    5912:	3f c0       	rjmp	.+126    	; 0x5992 <main+0x3a14>
	else if (__tmp > 65535)
    5914:	6d 89       	ldd	r22, Y+21	; 0x15
    5916:	7e 89       	ldd	r23, Y+22	; 0x16
    5918:	8f 89       	ldd	r24, Y+23	; 0x17
    591a:	98 8d       	ldd	r25, Y+24	; 0x18
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	3f ef       	ldi	r19, 0xFF	; 255
    5920:	4f e7       	ldi	r20, 0x7F	; 127
    5922:	57 e4       	ldi	r21, 0x47	; 71
    5924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5928:	18 16       	cp	r1, r24
    592a:	4c f5       	brge	.+82     	; 0x597e <main+0x3a00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    592c:	69 8d       	ldd	r22, Y+25	; 0x19
    592e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5930:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5932:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5934:	20 e0       	ldi	r18, 0x00	; 0
    5936:	30 e0       	ldi	r19, 0x00	; 0
    5938:	40 e2       	ldi	r20, 0x20	; 32
    593a:	51 e4       	ldi	r21, 0x41	; 65
    593c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5940:	dc 01       	movw	r26, r24
    5942:	cb 01       	movw	r24, r22
    5944:	bc 01       	movw	r22, r24
    5946:	cd 01       	movw	r24, r26
    5948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    594c:	dc 01       	movw	r26, r24
    594e:	cb 01       	movw	r24, r22
    5950:	9c 8b       	std	Y+20, r25	; 0x14
    5952:	8b 8b       	std	Y+19, r24	; 0x13
    5954:	0f c0       	rjmp	.+30     	; 0x5974 <main+0x39f6>
    5956:	80 e9       	ldi	r24, 0x90	; 144
    5958:	91 e0       	ldi	r25, 0x01	; 1
    595a:	9a 8b       	std	Y+18, r25	; 0x12
    595c:	89 8b       	std	Y+17, r24	; 0x11
    595e:	89 89       	ldd	r24, Y+17	; 0x11
    5960:	9a 89       	ldd	r25, Y+18	; 0x12
    5962:	01 97       	sbiw	r24, 0x01	; 1
    5964:	f1 f7       	brne	.-4      	; 0x5962 <main+0x39e4>
    5966:	9a 8b       	std	Y+18, r25	; 0x12
    5968:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    596a:	8b 89       	ldd	r24, Y+19	; 0x13
    596c:	9c 89       	ldd	r25, Y+20	; 0x14
    596e:	01 97       	sbiw	r24, 0x01	; 1
    5970:	9c 8b       	std	Y+20, r25	; 0x14
    5972:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5974:	8b 89       	ldd	r24, Y+19	; 0x13
    5976:	9c 89       	ldd	r25, Y+20	; 0x14
    5978:	00 97       	sbiw	r24, 0x00	; 0
    597a:	69 f7       	brne	.-38     	; 0x5956 <main+0x39d8>
    597c:	14 c0       	rjmp	.+40     	; 0x59a6 <main+0x3a28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    597e:	6d 89       	ldd	r22, Y+21	; 0x15
    5980:	7e 89       	ldd	r23, Y+22	; 0x16
    5982:	8f 89       	ldd	r24, Y+23	; 0x17
    5984:	98 8d       	ldd	r25, Y+24	; 0x18
    5986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    598a:	dc 01       	movw	r26, r24
    598c:	cb 01       	movw	r24, r22
    598e:	9c 8b       	std	Y+20, r25	; 0x14
    5990:	8b 8b       	std	Y+19, r24	; 0x13
    5992:	8b 89       	ldd	r24, Y+19	; 0x13
    5994:	9c 89       	ldd	r25, Y+20	; 0x14
    5996:	98 8b       	std	Y+16, r25	; 0x10
    5998:	8f 87       	std	Y+15, r24	; 0x0f
    599a:	8f 85       	ldd	r24, Y+15	; 0x0f
    599c:	98 89       	ldd	r25, Y+16	; 0x10
    599e:	01 97       	sbiw	r24, 0x01	; 1
    59a0:	f1 f7       	brne	.-4      	; 0x599e <main+0x3a20>
    59a2:	98 8b       	std	Y+16, r25	; 0x10
    59a4:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(200);
					SPI_SEND_RECEIVE_DATA(temperatue);
    59a6:	fe 01       	movw	r30, r28
    59a8:	ea 51       	subi	r30, 0x1A	; 26
    59aa:	fe 4f       	sbci	r31, 0xFE	; 254
    59ac:	80 81       	ld	r24, Z
    59ae:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <SPI_SEND_RECEIVE_DATA>
					LCD_CLEAR_SCREEN();
    59b2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
					LCD_WriteString("temperature sent");
    59b6:	85 e0       	ldi	r24, 0x05	; 5
    59b8:	92 e0       	ldi	r25, 0x02	; 2
    59ba:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    59be:	80 e0       	ldi	r24, 0x00	; 0
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	aa ef       	ldi	r26, 0xFA	; 250
    59c4:	b3 e4       	ldi	r27, 0x43	; 67
    59c6:	8b 87       	std	Y+11, r24	; 0x0b
    59c8:	9c 87       	std	Y+12, r25	; 0x0c
    59ca:	ad 87       	std	Y+13, r26	; 0x0d
    59cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    59d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    59d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    59d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    59d6:	20 e0       	ldi	r18, 0x00	; 0
    59d8:	30 e0       	ldi	r19, 0x00	; 0
    59da:	4a e7       	ldi	r20, 0x7A	; 122
    59dc:	55 e4       	ldi	r21, 0x45	; 69
    59de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59e2:	dc 01       	movw	r26, r24
    59e4:	cb 01       	movw	r24, r22
    59e6:	8f 83       	std	Y+7, r24	; 0x07
    59e8:	98 87       	std	Y+8, r25	; 0x08
    59ea:	a9 87       	std	Y+9, r26	; 0x09
    59ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    59ee:	6f 81       	ldd	r22, Y+7	; 0x07
    59f0:	78 85       	ldd	r23, Y+8	; 0x08
    59f2:	89 85       	ldd	r24, Y+9	; 0x09
    59f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    59f6:	20 e0       	ldi	r18, 0x00	; 0
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	40 e8       	ldi	r20, 0x80	; 128
    59fc:	5f e3       	ldi	r21, 0x3F	; 63
    59fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a02:	88 23       	and	r24, r24
    5a04:	2c f4       	brge	.+10     	; 0x5a10 <main+0x3a92>
		__ticks = 1;
    5a06:	81 e0       	ldi	r24, 0x01	; 1
    5a08:	90 e0       	ldi	r25, 0x00	; 0
    5a0a:	9e 83       	std	Y+6, r25	; 0x06
    5a0c:	8d 83       	std	Y+5, r24	; 0x05
    5a0e:	3f c0       	rjmp	.+126    	; 0x5a8e <main+0x3b10>
	else if (__tmp > 65535)
    5a10:	6f 81       	ldd	r22, Y+7	; 0x07
    5a12:	78 85       	ldd	r23, Y+8	; 0x08
    5a14:	89 85       	ldd	r24, Y+9	; 0x09
    5a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a18:	20 e0       	ldi	r18, 0x00	; 0
    5a1a:	3f ef       	ldi	r19, 0xFF	; 255
    5a1c:	4f e7       	ldi	r20, 0x7F	; 127
    5a1e:	57 e4       	ldi	r21, 0x47	; 71
    5a20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a24:	18 16       	cp	r1, r24
    5a26:	4c f5       	brge	.+82     	; 0x5a7a <main+0x3afc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a30:	20 e0       	ldi	r18, 0x00	; 0
    5a32:	30 e0       	ldi	r19, 0x00	; 0
    5a34:	40 e2       	ldi	r20, 0x20	; 32
    5a36:	51 e4       	ldi	r21, 0x41	; 65
    5a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a3c:	dc 01       	movw	r26, r24
    5a3e:	cb 01       	movw	r24, r22
    5a40:	bc 01       	movw	r22, r24
    5a42:	cd 01       	movw	r24, r26
    5a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a48:	dc 01       	movw	r26, r24
    5a4a:	cb 01       	movw	r24, r22
    5a4c:	9e 83       	std	Y+6, r25	; 0x06
    5a4e:	8d 83       	std	Y+5, r24	; 0x05
    5a50:	0f c0       	rjmp	.+30     	; 0x5a70 <main+0x3af2>
    5a52:	80 e9       	ldi	r24, 0x90	; 144
    5a54:	91 e0       	ldi	r25, 0x01	; 1
    5a56:	9c 83       	std	Y+4, r25	; 0x04
    5a58:	8b 83       	std	Y+3, r24	; 0x03
    5a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    5a5e:	01 97       	sbiw	r24, 0x01	; 1
    5a60:	f1 f7       	brne	.-4      	; 0x5a5e <main+0x3ae0>
    5a62:	9c 83       	std	Y+4, r25	; 0x04
    5a64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a66:	8d 81       	ldd	r24, Y+5	; 0x05
    5a68:	9e 81       	ldd	r25, Y+6	; 0x06
    5a6a:	01 97       	sbiw	r24, 0x01	; 1
    5a6c:	9e 83       	std	Y+6, r25	; 0x06
    5a6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a70:	8d 81       	ldd	r24, Y+5	; 0x05
    5a72:	9e 81       	ldd	r25, Y+6	; 0x06
    5a74:	00 97       	sbiw	r24, 0x00	; 0
    5a76:	69 f7       	brne	.-38     	; 0x5a52 <main+0x3ad4>
    5a78:	14 c0       	rjmp	.+40     	; 0x5aa2 <main+0x3b24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    5a7c:	78 85       	ldd	r23, Y+8	; 0x08
    5a7e:	89 85       	ldd	r24, Y+9	; 0x09
    5a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a86:	dc 01       	movw	r26, r24
    5a88:	cb 01       	movw	r24, r22
    5a8a:	9e 83       	std	Y+6, r25	; 0x06
    5a8c:	8d 83       	std	Y+5, r24	; 0x05
    5a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a90:	9e 81       	ldd	r25, Y+6	; 0x06
    5a92:	9a 83       	std	Y+2, r25	; 0x02
    5a94:	89 83       	std	Y+1, r24	; 0x01
    5a96:	89 81       	ldd	r24, Y+1	; 0x01
    5a98:	9a 81       	ldd	r25, Y+2	; 0x02
    5a9a:	01 97       	sbiw	r24, 0x01	; 1
    5a9c:	f1 f7       	brne	.-4      	; 0x5a9a <main+0x3b1c>
    5a9e:	9a 83       	std	Y+2, r25	; 0x02
    5aa0:	89 83       	std	Y+1, r24	; 0x01
				break;

			case TEMPERATURE_MENU:
				temperatue = 0;

				while(temperatue == 0 && timeout_flag == FALSE)
    5aa2:	fe 01       	movw	r30, r28
    5aa4:	ea 51       	subi	r30, 0x1A	; 26
    5aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    5aa8:	80 81       	ld	r24, Z
    5aaa:	88 23       	and	r24, r24
    5aac:	29 f4       	brne	.+10     	; 0x5ab8 <main+0x3b3a>
    5aae:	80 91 8c 02 	lds	r24, 0x028C
    5ab2:	88 23       	and	r24, r24
    5ab4:	09 f4       	brne	.+2      	; 0x5ab8 <main+0x3b3a>
    5ab6:	95 cb       	rjmp	.-2262   	; 0x51e2 <main+0x3264>
					SPI_SEND_RECEIVE_DATA(temperatue);
					LCD_CLEAR_SCREEN();
					LCD_WriteString("temperature sent");
					_delay_ms(500);
				}
				show_menu = AIRCONDITIONING_MENU;
    5ab8:	fe 01       	movw	r30, r28
    5aba:	e2 52       	subi	r30, 0x22	; 34
    5abc:	fe 4f       	sbci	r31, 0xFE	; 254
    5abe:	88 e0       	ldi	r24, 0x08	; 8
    5ac0:	80 83       	st	Z, r24

			}
		}

		u8 show_menu = MAIN_MENU;
		while (timeout_flag != TRUE)
    5ac2:	80 91 8c 02 	lds	r24, 0x028C
    5ac6:	81 30       	cpi	r24, 0x01	; 1
    5ac8:	11 f0       	breq	.+4      	; 0x5ace <main+0x3b50>
    5aca:	0c 94 56 22 	jmp	0x44ac	; 0x44ac <main+0x252e>
    5ace:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <main+0xde0>

00005ad2 <__vector_10>:
		}
	}
}

ISR(TIMER0_COMP_vect)
{
    5ad2:	1f 92       	push	r1
    5ad4:	0f 92       	push	r0
    5ad6:	0f b6       	in	r0, 0x3f	; 63
    5ad8:	0f 92       	push	r0
    5ada:	11 24       	eor	r1, r1
    5adc:	8f 93       	push	r24
    5ade:	9f 93       	push	r25
    5ae0:	df 93       	push	r29
    5ae2:	cf 93       	push	r28
    5ae4:	cd b7       	in	r28, 0x3d	; 61
    5ae6:	de b7       	in	r29, 0x3e	; 62
	session_counter++;
    5ae8:	80 91 8a 02 	lds	r24, 0x028A
    5aec:	90 91 8b 02 	lds	r25, 0x028B
    5af0:	01 96       	adiw	r24, 0x01	; 1
    5af2:	90 93 8b 02 	sts	0x028B, r25
    5af6:	80 93 8a 02 	sts	0x028A, r24
}
    5afa:	cf 91       	pop	r28
    5afc:	df 91       	pop	r29
    5afe:	9f 91       	pop	r25
    5b00:	8f 91       	pop	r24
    5b02:	0f 90       	pop	r0
    5b04:	0f be       	out	0x3f, r0	; 63
    5b06:	0f 90       	pop	r0
    5b08:	1f 90       	pop	r1
    5b0a:	18 95       	reti

00005b0c <ComparePass>:

extern volatile u16 session_counter;
extern          u8  timeout_flag;


u8 ComparePass( u8* pass1, u8* pass2, u8 size){
    5b0c:	df 93       	push	r29
    5b0e:	cf 93       	push	r28
    5b10:	cd b7       	in	r28, 0x3d	; 61
    5b12:	de b7       	in	r29, 0x3e	; 62
    5b14:	27 97       	sbiw	r28, 0x07	; 7
    5b16:	0f b6       	in	r0, 0x3f	; 63
    5b18:	f8 94       	cli
    5b1a:	de bf       	out	0x3e, r29	; 62
    5b1c:	0f be       	out	0x3f, r0	; 63
    5b1e:	cd bf       	out	0x3d, r28	; 61
    5b20:	9c 83       	std	Y+4, r25	; 0x04
    5b22:	8b 83       	std	Y+3, r24	; 0x03
    5b24:	7e 83       	std	Y+6, r23	; 0x06
    5b26:	6d 83       	std	Y+5, r22	; 0x05
    5b28:	4f 83       	std	Y+7, r20	; 0x07
	u8 counter = 0;
    5b2a:	1a 82       	std	Y+2, r1	; 0x02
	u8 ret_value = TRUE;
    5b2c:	81 e0       	ldi	r24, 0x01	; 1
    5b2e:	89 83       	std	Y+1, r24	; 0x01
    5b30:	19 c0       	rjmp	.+50     	; 0x5b64 <ComparePass+0x58>

	while (counter < size )
	{
		if (*(pass1+counter) != *(pass2+counter))
    5b32:	8a 81       	ldd	r24, Y+2	; 0x02
    5b34:	28 2f       	mov	r18, r24
    5b36:	30 e0       	ldi	r19, 0x00	; 0
    5b38:	8b 81       	ldd	r24, Y+3	; 0x03
    5b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    5b3c:	fc 01       	movw	r30, r24
    5b3e:	e2 0f       	add	r30, r18
    5b40:	f3 1f       	adc	r31, r19
    5b42:	40 81       	ld	r20, Z
    5b44:	8a 81       	ldd	r24, Y+2	; 0x02
    5b46:	28 2f       	mov	r18, r24
    5b48:	30 e0       	ldi	r19, 0x00	; 0
    5b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b4e:	fc 01       	movw	r30, r24
    5b50:	e2 0f       	add	r30, r18
    5b52:	f3 1f       	adc	r31, r19
    5b54:	80 81       	ld	r24, Z
    5b56:	48 17       	cp	r20, r24
    5b58:	11 f0       	breq	.+4      	; 0x5b5e <ComparePass+0x52>
		{
			ret_value = FALSE;
    5b5a:	19 82       	std	Y+1, r1	; 0x01
    5b5c:	07 c0       	rjmp	.+14     	; 0x5b6c <ComparePass+0x60>
			break;
		}
		counter++;
    5b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b60:	8f 5f       	subi	r24, 0xFF	; 255
    5b62:	8a 83       	std	Y+2, r24	; 0x02

u8 ComparePass( u8* pass1, u8* pass2, u8 size){
	u8 counter = 0;
	u8 ret_value = TRUE;

	while (counter < size )
    5b64:	9a 81       	ldd	r25, Y+2	; 0x02
    5b66:	8f 81       	ldd	r24, Y+7	; 0x07
    5b68:	98 17       	cp	r25, r24
    5b6a:	18 f3       	brcs	.-58     	; 0x5b32 <ComparePass+0x26>
			ret_value = FALSE;
			break;
		}
		counter++;
	}
	return ret_value;
    5b6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    5b6e:	27 96       	adiw	r28, 0x07	; 7
    5b70:	0f b6       	in	r0, 0x3f	; 63
    5b72:	f8 94       	cli
    5b74:	de bf       	out	0x3e, r29	; 62
    5b76:	0f be       	out	0x3f, r0	; 63
    5b78:	cd bf       	out	0x3d, r28	; 61
    5b7a:	cf 91       	pop	r28
    5b7c:	df 91       	pop	r29
    5b7e:	08 95       	ret

00005b80 <menuOption>:
void menuOption(u8 SelectedRoom, u8 LoginMode){
    5b80:	df 93       	push	r29
    5b82:	cf 93       	push	r28
    5b84:	cd b7       	in	r28, 0x3d	; 61
    5b86:	de b7       	in	r29, 0x3e	; 62
    5b88:	e3 97       	sbiw	r28, 0x33	; 51
    5b8a:	0f b6       	in	r0, 0x3f	; 63
    5b8c:	f8 94       	cli
    5b8e:	de bf       	out	0x3e, r29	; 62
    5b90:	0f be       	out	0x3f, r0	; 63
    5b92:	cd bf       	out	0x3d, r28	; 61
    5b94:	88 ab       	std	Y+48, r24	; 0x30
    5b96:	69 ab       	std	Y+49, r22	; 0x31

	u8 StatusCode  = 0;
    5b98:	1f a6       	std	Y+47, r1	; 0x2f
	u8 TurnOnCode  = 0;
    5b9a:	1e a6       	std	Y+46, r1	; 0x2e
	u8 TurnOffCode = 0;
    5b9c:	1d a6       	std	Y+45, r1	; 0x2d
	u8 response    = DEFAULT_ACK;
    5b9e:	8f ef       	ldi	r24, 0xFF	; 255
    5ba0:	8c a7       	std	Y+44, r24	; 0x2c
	u8 key_pressed  = NOT_PRESSED;
    5ba2:	8f ef       	ldi	r24, 0xFF	; 255
    5ba4:	8b a7       	std	Y+43, r24	; 0x2b

	do
	{
		LCD_CLEAR_SCREEN();
    5ba6:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
		switch(SelectedRoom)
    5baa:	88 a9       	ldd	r24, Y+48	; 0x30
    5bac:	28 2f       	mov	r18, r24
    5bae:	30 e0       	ldi	r19, 0x00	; 0
    5bb0:	3b ab       	std	Y+51, r19	; 0x33
    5bb2:	2a ab       	std	Y+50, r18	; 0x32
    5bb4:	8a a9       	ldd	r24, Y+50	; 0x32
    5bb6:	9b a9       	ldd	r25, Y+51	; 0x33
    5bb8:	85 30       	cpi	r24, 0x05	; 5
    5bba:	91 05       	cpc	r25, r1
    5bbc:	b1 f1       	breq	.+108    	; 0x5c2a <menuOption+0xaa>
    5bbe:	2a a9       	ldd	r18, Y+50	; 0x32
    5bc0:	3b a9       	ldd	r19, Y+51	; 0x33
    5bc2:	26 30       	cpi	r18, 0x06	; 6
    5bc4:	31 05       	cpc	r19, r1
    5bc6:	5c f4       	brge	.+22     	; 0x5bde <menuOption+0x5e>
    5bc8:	8a a9       	ldd	r24, Y+50	; 0x32
    5bca:	9b a9       	ldd	r25, Y+51	; 0x33
    5bcc:	83 30       	cpi	r24, 0x03	; 3
    5bce:	91 05       	cpc	r25, r1
    5bd0:	b1 f0       	breq	.+44     	; 0x5bfe <menuOption+0x7e>
    5bd2:	2a a9       	ldd	r18, Y+50	; 0x32
    5bd4:	3b a9       	ldd	r19, Y+51	; 0x33
    5bd6:	24 30       	cpi	r18, 0x04	; 4
    5bd8:	31 05       	cpc	r19, r1
    5bda:	e1 f0       	breq	.+56     	; 0x5c14 <menuOption+0x94>
    5bdc:	51 c0       	rjmp	.+162    	; 0x5c80 <menuOption+0x100>
    5bde:	8a a9       	ldd	r24, Y+50	; 0x32
    5be0:	9b a9       	ldd	r25, Y+51	; 0x33
    5be2:	87 30       	cpi	r24, 0x07	; 7
    5be4:	91 05       	cpc	r25, r1
    5be6:	b9 f1       	breq	.+110    	; 0x5c56 <menuOption+0xd6>
    5be8:	2a a9       	ldd	r18, Y+50	; 0x32
    5bea:	3b a9       	ldd	r19, Y+51	; 0x33
    5bec:	27 30       	cpi	r18, 0x07	; 7
    5bee:	31 05       	cpc	r19, r1
    5bf0:	3c f1       	brlt	.+78     	; 0x5c40 <menuOption+0xc0>
    5bf2:	8a a9       	ldd	r24, Y+50	; 0x32
    5bf4:	9b a9       	ldd	r25, Y+51	; 0x33
    5bf6:	89 30       	cpi	r24, 0x09	; 9
    5bf8:	91 05       	cpc	r25, r1
    5bfa:	c1 f1       	breq	.+112    	; 0x5c6c <menuOption+0xec>
    5bfc:	41 c0       	rjmp	.+130    	; 0x5c80 <menuOption+0x100>
		{

		case ROOM1_MENU:
			 StatusCode  =  ROOM1_STATUS;
    5bfe:	81 e1       	ldi	r24, 0x11	; 17
    5c00:	8f a7       	std	Y+47, r24	; 0x2f
			 TurnOffCode =  ROOM1_TURN_OFF;
    5c02:	81 e3       	ldi	r24, 0x31	; 49
    5c04:	8d a7       	std	Y+45, r24	; 0x2d
			 TurnOnCode  =  ROOM1_TURN_ON;
    5c06:	81 e2       	ldi	r24, 0x21	; 33
    5c08:	8e a7       	std	Y+46, r24	; 0x2e

			LCD_WriteString("ROOM1 S:");
    5c0a:	86 e1       	ldi	r24, 0x16	; 22
    5c0c:	92 e0       	ldi	r25, 0x02	; 2
    5c0e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    5c12:	36 c0       	rjmp	.+108    	; 0x5c80 <menuOption+0x100>
			break;
		case ROOM2_MENU:
			 StatusCode  =  ROOM2_STATUS;
    5c14:	82 e1       	ldi	r24, 0x12	; 18
    5c16:	8f a7       	std	Y+47, r24	; 0x2f
			 TurnOffCode =  ROOM2_TURN_OFF;
    5c18:	82 e3       	ldi	r24, 0x32	; 50
    5c1a:	8d a7       	std	Y+45, r24	; 0x2d
			 TurnOnCode  =  ROOM2_TURN_ON;
    5c1c:	82 e2       	ldi	r24, 0x22	; 34
    5c1e:	8e a7       	std	Y+46, r24	; 0x2e

			LCD_WriteString("ROOM2 S:");
    5c20:	8f e1       	ldi	r24, 0x1F	; 31
    5c22:	92 e0       	ldi	r25, 0x02	; 2
    5c24:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    5c28:	2b c0       	rjmp	.+86     	; 0x5c80 <menuOption+0x100>
			break;

		case ROOM3_MENU:
			 StatusCode  =  ROOM3_STATUS;
    5c2a:	83 e1       	ldi	r24, 0x13	; 19
    5c2c:	8f a7       	std	Y+47, r24	; 0x2f
			 TurnOffCode =  ROOM3_TURN_OFF;
    5c2e:	83 e3       	ldi	r24, 0x33	; 51
    5c30:	8d a7       	std	Y+45, r24	; 0x2d
			 TurnOnCode  =  ROOM3_TURN_ON;
    5c32:	83 e2       	ldi	r24, 0x23	; 35
    5c34:	8e a7       	std	Y+46, r24	; 0x2e

			LCD_WriteString("ROOM3 S:");
    5c36:	88 e2       	ldi	r24, 0x28	; 40
    5c38:	92 e0       	ldi	r25, 0x02	; 2
    5c3a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    5c3e:	20 c0       	rjmp	.+64     	; 0x5c80 <menuOption+0x100>
			break;

		case ROOM4_MENU :
			 StatusCode  =  ROOM4_STATUS;
    5c40:	84 e1       	ldi	r24, 0x14	; 20
    5c42:	8f a7       	std	Y+47, r24	; 0x2f
			 TurnOffCode =  ROOM4_TURN_OFF;
    5c44:	84 e3       	ldi	r24, 0x34	; 52
    5c46:	8d a7       	std	Y+45, r24	; 0x2d
			 TurnOnCode  =  ROOM4_TURN_ON;
    5c48:	84 e2       	ldi	r24, 0x24	; 36
    5c4a:	8e a7       	std	Y+46, r24	; 0x2e

			LCD_WriteString("ROOM4 S:");
    5c4c:	81 e3       	ldi	r24, 0x31	; 49
    5c4e:	92 e0       	ldi	r25, 0x02	; 2
    5c50:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    5c54:	15 c0       	rjmp	.+42     	; 0x5c80 <menuOption+0x100>
			break;

		case TV_MENU :
			 StatusCode  =  TV_STATUS;
    5c56:	85 e1       	ldi	r24, 0x15	; 21
    5c58:	8f a7       	std	Y+47, r24	; 0x2f
			 TurnOffCode =  TV_TURN_OFF;
    5c5a:	85 e3       	ldi	r24, 0x35	; 53
    5c5c:	8d a7       	std	Y+45, r24	; 0x2d
			 TurnOnCode  =  TV_TURN_ON;
    5c5e:	85 e2       	ldi	r24, 0x25	; 37
    5c60:	8e a7       	std	Y+46, r24	; 0x2e

			LCD_WriteString("TV S:");
    5c62:	8a e3       	ldi	r24, 0x3A	; 58
    5c64:	92 e0       	ldi	r25, 0x02	; 2
    5c66:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    5c6a:	0a c0       	rjmp	.+20     	; 0x5c80 <menuOption+0x100>
			break;

		case AIRCOND_CTRL_MENU:
			 StatusCode  =  AIR_COND_STATUS;
    5c6c:	86 e1       	ldi	r24, 0x16	; 22
    5c6e:	8f a7       	std	Y+47, r24	; 0x2f
			 TurnOffCode =  AIR_COND_TURN_OFF;
    5c70:	86 e3       	ldi	r24, 0x36	; 54
    5c72:	8d a7       	std	Y+45, r24	; 0x2d
			 TurnOnCode  =  AIR_COND_TURN_ON;
    5c74:	86 e2       	ldi	r24, 0x26	; 38
    5c76:	8e a7       	std	Y+46, r24	; 0x2e

			LCD_WriteString("Air Cond. S:");
    5c78:	80 e4       	ldi	r24, 0x40	; 64
    5c7a:	92 e0       	ldi	r25, 0x02	; 2
    5c7c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
			break;

		}

		SPI_SEND_RECEIVE_DATA(StatusCode);
    5c80:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c82:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <SPI_SEND_RECEIVE_DATA>
    5c86:	80 e0       	ldi	r24, 0x00	; 0
    5c88:	90 e0       	ldi	r25, 0x00	; 0
    5c8a:	a8 ec       	ldi	r26, 0xC8	; 200
    5c8c:	b2 e4       	ldi	r27, 0x42	; 66
    5c8e:	8f a3       	std	Y+39, r24	; 0x27
    5c90:	98 a7       	std	Y+40, r25	; 0x28
    5c92:	a9 a7       	std	Y+41, r26	; 0x29
    5c94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c96:	6f a1       	ldd	r22, Y+39	; 0x27
    5c98:	78 a5       	ldd	r23, Y+40	; 0x28
    5c9a:	89 a5       	ldd	r24, Y+41	; 0x29
    5c9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c9e:	20 e0       	ldi	r18, 0x00	; 0
    5ca0:	30 e0       	ldi	r19, 0x00	; 0
    5ca2:	4a e7       	ldi	r20, 0x7A	; 122
    5ca4:	55 e4       	ldi	r21, 0x45	; 69
    5ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5caa:	dc 01       	movw	r26, r24
    5cac:	cb 01       	movw	r24, r22
    5cae:	8b a3       	std	Y+35, r24	; 0x23
    5cb0:	9c a3       	std	Y+36, r25	; 0x24
    5cb2:	ad a3       	std	Y+37, r26	; 0x25
    5cb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5cb6:	6b a1       	ldd	r22, Y+35	; 0x23
    5cb8:	7c a1       	ldd	r23, Y+36	; 0x24
    5cba:	8d a1       	ldd	r24, Y+37	; 0x25
    5cbc:	9e a1       	ldd	r25, Y+38	; 0x26
    5cbe:	20 e0       	ldi	r18, 0x00	; 0
    5cc0:	30 e0       	ldi	r19, 0x00	; 0
    5cc2:	40 e8       	ldi	r20, 0x80	; 128
    5cc4:	5f e3       	ldi	r21, 0x3F	; 63
    5cc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cca:	88 23       	and	r24, r24
    5ccc:	2c f4       	brge	.+10     	; 0x5cd8 <menuOption+0x158>
		__ticks = 1;
    5cce:	81 e0       	ldi	r24, 0x01	; 1
    5cd0:	90 e0       	ldi	r25, 0x00	; 0
    5cd2:	9a a3       	std	Y+34, r25	; 0x22
    5cd4:	89 a3       	std	Y+33, r24	; 0x21
    5cd6:	3f c0       	rjmp	.+126    	; 0x5d56 <menuOption+0x1d6>
	else if (__tmp > 65535)
    5cd8:	6b a1       	ldd	r22, Y+35	; 0x23
    5cda:	7c a1       	ldd	r23, Y+36	; 0x24
    5cdc:	8d a1       	ldd	r24, Y+37	; 0x25
    5cde:	9e a1       	ldd	r25, Y+38	; 0x26
    5ce0:	20 e0       	ldi	r18, 0x00	; 0
    5ce2:	3f ef       	ldi	r19, 0xFF	; 255
    5ce4:	4f e7       	ldi	r20, 0x7F	; 127
    5ce6:	57 e4       	ldi	r21, 0x47	; 71
    5ce8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cec:	18 16       	cp	r1, r24
    5cee:	4c f5       	brge	.+82     	; 0x5d42 <menuOption+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cf0:	6f a1       	ldd	r22, Y+39	; 0x27
    5cf2:	78 a5       	ldd	r23, Y+40	; 0x28
    5cf4:	89 a5       	ldd	r24, Y+41	; 0x29
    5cf6:	9a a5       	ldd	r25, Y+42	; 0x2a
    5cf8:	20 e0       	ldi	r18, 0x00	; 0
    5cfa:	30 e0       	ldi	r19, 0x00	; 0
    5cfc:	40 e2       	ldi	r20, 0x20	; 32
    5cfe:	51 e4       	ldi	r21, 0x41	; 65
    5d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d04:	dc 01       	movw	r26, r24
    5d06:	cb 01       	movw	r24, r22
    5d08:	bc 01       	movw	r22, r24
    5d0a:	cd 01       	movw	r24, r26
    5d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d10:	dc 01       	movw	r26, r24
    5d12:	cb 01       	movw	r24, r22
    5d14:	9a a3       	std	Y+34, r25	; 0x22
    5d16:	89 a3       	std	Y+33, r24	; 0x21
    5d18:	0f c0       	rjmp	.+30     	; 0x5d38 <menuOption+0x1b8>
    5d1a:	80 e9       	ldi	r24, 0x90	; 144
    5d1c:	91 e0       	ldi	r25, 0x01	; 1
    5d1e:	98 a3       	std	Y+32, r25	; 0x20
    5d20:	8f 8f       	std	Y+31, r24	; 0x1f
    5d22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5d24:	98 a1       	ldd	r25, Y+32	; 0x20
    5d26:	01 97       	sbiw	r24, 0x01	; 1
    5d28:	f1 f7       	brne	.-4      	; 0x5d26 <menuOption+0x1a6>
    5d2a:	98 a3       	std	Y+32, r25	; 0x20
    5d2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d2e:	89 a1       	ldd	r24, Y+33	; 0x21
    5d30:	9a a1       	ldd	r25, Y+34	; 0x22
    5d32:	01 97       	sbiw	r24, 0x01	; 1
    5d34:	9a a3       	std	Y+34, r25	; 0x22
    5d36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d38:	89 a1       	ldd	r24, Y+33	; 0x21
    5d3a:	9a a1       	ldd	r25, Y+34	; 0x22
    5d3c:	00 97       	sbiw	r24, 0x00	; 0
    5d3e:	69 f7       	brne	.-38     	; 0x5d1a <menuOption+0x19a>
    5d40:	14 c0       	rjmp	.+40     	; 0x5d6a <menuOption+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d42:	6b a1       	ldd	r22, Y+35	; 0x23
    5d44:	7c a1       	ldd	r23, Y+36	; 0x24
    5d46:	8d a1       	ldd	r24, Y+37	; 0x25
    5d48:	9e a1       	ldd	r25, Y+38	; 0x26
    5d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d4e:	dc 01       	movw	r26, r24
    5d50:	cb 01       	movw	r24, r22
    5d52:	9a a3       	std	Y+34, r25	; 0x22
    5d54:	89 a3       	std	Y+33, r24	; 0x21
    5d56:	89 a1       	ldd	r24, Y+33	; 0x21
    5d58:	9a a1       	ldd	r25, Y+34	; 0x22
    5d5a:	9e 8f       	std	Y+30, r25	; 0x1e
    5d5c:	8d 8f       	std	Y+29, r24	; 0x1d
    5d5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d62:	01 97       	sbiw	r24, 0x01	; 1
    5d64:	f1 f7       	brne	.-4      	; 0x5d62 <menuOption+0x1e2>
    5d66:	9e 8f       	std	Y+30, r25	; 0x1e
    5d68:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		response = SPI_SEND_RECEIVE_DATA(DEMAND_RESPONSE);
    5d6a:	8f ef       	ldi	r24, 0xFF	; 255
    5d6c:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <SPI_SEND_RECEIVE_DATA>
    5d70:	8c a7       	std	Y+44, r24	; 0x2c

		if (response == ON_STATUS)
    5d72:	8c a5       	ldd	r24, Y+44	; 0x2c
    5d74:	81 30       	cpi	r24, 0x01	; 1
    5d76:	29 f4       	brne	.+10     	; 0x5d82 <menuOption+0x202>
		{
			LCD_WriteString("ON");
    5d78:	8d e4       	ldi	r24, 0x4D	; 77
    5d7a:	92 e0       	ldi	r25, 0x02	; 2
    5d7c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    5d80:	04 c0       	rjmp	.+8      	; 0x5d8a <menuOption+0x20a>
		}
		else
		{
			LCD_WriteString("OFF");
    5d82:	80 e5       	ldi	r24, 0x50	; 80
    5d84:	92 e0       	ldi	r25, 0x02	; 2
    5d86:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
		}

		LCD_MOVE_CURSOR(2,1);
    5d8a:	82 e0       	ldi	r24, 0x02	; 2
    5d8c:	61 e0       	ldi	r22, 0x01	; 1
    5d8e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_MOVE_CURSOR>

		LCD_WriteString("1-On 2-Off 0-RET");
    5d92:	84 e5       	ldi	r24, 0x54	; 84
    5d94:	92 e0       	ldi	r25, 0x02	; 2
    5d96:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>

		key_pressed =GetKeyPressed(LoginMode);
    5d9a:	89 a9       	ldd	r24, Y+49	; 0x31
    5d9c:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <GetKeyPressed>
    5da0:	8b a7       	std	Y+43, r24	; 0x2b
    5da2:	80 e0       	ldi	r24, 0x00	; 0
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	a8 ec       	ldi	r26, 0xC8	; 200
    5da8:	b2 e4       	ldi	r27, 0x42	; 66
    5daa:	89 8f       	std	Y+25, r24	; 0x19
    5dac:	9a 8f       	std	Y+26, r25	; 0x1a
    5dae:	ab 8f       	std	Y+27, r26	; 0x1b
    5db0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5db2:	69 8d       	ldd	r22, Y+25	; 0x19
    5db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5dba:	20 e0       	ldi	r18, 0x00	; 0
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	4a e7       	ldi	r20, 0x7A	; 122
    5dc0:	55 e4       	ldi	r21, 0x45	; 69
    5dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dc6:	dc 01       	movw	r26, r24
    5dc8:	cb 01       	movw	r24, r22
    5dca:	8d 8b       	std	Y+21, r24	; 0x15
    5dcc:	9e 8b       	std	Y+22, r25	; 0x16
    5dce:	af 8b       	std	Y+23, r26	; 0x17
    5dd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    5dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    5dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    5dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    5dda:	20 e0       	ldi	r18, 0x00	; 0
    5ddc:	30 e0       	ldi	r19, 0x00	; 0
    5dde:	40 e8       	ldi	r20, 0x80	; 128
    5de0:	5f e3       	ldi	r21, 0x3F	; 63
    5de2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5de6:	88 23       	and	r24, r24
    5de8:	2c f4       	brge	.+10     	; 0x5df4 <menuOption+0x274>
		__ticks = 1;
    5dea:	81 e0       	ldi	r24, 0x01	; 1
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	9c 8b       	std	Y+20, r25	; 0x14
    5df0:	8b 8b       	std	Y+19, r24	; 0x13
    5df2:	3f c0       	rjmp	.+126    	; 0x5e72 <menuOption+0x2f2>
	else if (__tmp > 65535)
    5df4:	6d 89       	ldd	r22, Y+21	; 0x15
    5df6:	7e 89       	ldd	r23, Y+22	; 0x16
    5df8:	8f 89       	ldd	r24, Y+23	; 0x17
    5dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    5dfc:	20 e0       	ldi	r18, 0x00	; 0
    5dfe:	3f ef       	ldi	r19, 0xFF	; 255
    5e00:	4f e7       	ldi	r20, 0x7F	; 127
    5e02:	57 e4       	ldi	r21, 0x47	; 71
    5e04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e08:	18 16       	cp	r1, r24
    5e0a:	4c f5       	brge	.+82     	; 0x5e5e <menuOption+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e0c:	69 8d       	ldd	r22, Y+25	; 0x19
    5e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e14:	20 e0       	ldi	r18, 0x00	; 0
    5e16:	30 e0       	ldi	r19, 0x00	; 0
    5e18:	40 e2       	ldi	r20, 0x20	; 32
    5e1a:	51 e4       	ldi	r21, 0x41	; 65
    5e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e20:	dc 01       	movw	r26, r24
    5e22:	cb 01       	movw	r24, r22
    5e24:	bc 01       	movw	r22, r24
    5e26:	cd 01       	movw	r24, r26
    5e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e2c:	dc 01       	movw	r26, r24
    5e2e:	cb 01       	movw	r24, r22
    5e30:	9c 8b       	std	Y+20, r25	; 0x14
    5e32:	8b 8b       	std	Y+19, r24	; 0x13
    5e34:	0f c0       	rjmp	.+30     	; 0x5e54 <menuOption+0x2d4>
    5e36:	80 e9       	ldi	r24, 0x90	; 144
    5e38:	91 e0       	ldi	r25, 0x01	; 1
    5e3a:	9a 8b       	std	Y+18, r25	; 0x12
    5e3c:	89 8b       	std	Y+17, r24	; 0x11
    5e3e:	89 89       	ldd	r24, Y+17	; 0x11
    5e40:	9a 89       	ldd	r25, Y+18	; 0x12
    5e42:	01 97       	sbiw	r24, 0x01	; 1
    5e44:	f1 f7       	brne	.-4      	; 0x5e42 <menuOption+0x2c2>
    5e46:	9a 8b       	std	Y+18, r25	; 0x12
    5e48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    5e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    5e4e:	01 97       	sbiw	r24, 0x01	; 1
    5e50:	9c 8b       	std	Y+20, r25	; 0x14
    5e52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e54:	8b 89       	ldd	r24, Y+19	; 0x13
    5e56:	9c 89       	ldd	r25, Y+20	; 0x14
    5e58:	00 97       	sbiw	r24, 0x00	; 0
    5e5a:	69 f7       	brne	.-38     	; 0x5e36 <menuOption+0x2b6>
    5e5c:	14 c0       	rjmp	.+40     	; 0x5e86 <menuOption+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    5e60:	7e 89       	ldd	r23, Y+22	; 0x16
    5e62:	8f 89       	ldd	r24, Y+23	; 0x17
    5e64:	98 8d       	ldd	r25, Y+24	; 0x18
    5e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e6a:	dc 01       	movw	r26, r24
    5e6c:	cb 01       	movw	r24, r22
    5e6e:	9c 8b       	std	Y+20, r25	; 0x14
    5e70:	8b 8b       	std	Y+19, r24	; 0x13
    5e72:	8b 89       	ldd	r24, Y+19	; 0x13
    5e74:	9c 89       	ldd	r25, Y+20	; 0x14
    5e76:	98 8b       	std	Y+16, r25	; 0x10
    5e78:	8f 87       	std	Y+15, r24	; 0x0f
    5e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e7c:	98 89       	ldd	r25, Y+16	; 0x10
    5e7e:	01 97       	sbiw	r24, 0x01	; 1
    5e80:	f1 f7       	brne	.-4      	; 0x5e7e <menuOption+0x2fe>
    5e82:	98 8b       	std	Y+16, r25	; 0x10
    5e84:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		if (key_pressed == '1')
    5e86:	8b a5       	ldd	r24, Y+43	; 0x2b
    5e88:	81 33       	cpi	r24, 0x31	; 49
    5e8a:	21 f4       	brne	.+8      	; 0x5e94 <menuOption+0x314>
		{
			SPI_SEND_RECEIVE_DATA(TurnOnCode);
    5e8c:	8e a5       	ldd	r24, Y+46	; 0x2e
    5e8e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <SPI_SEND_RECEIVE_DATA>
    5e92:	87 c0       	rjmp	.+270    	; 0x5fa2 <menuOption+0x422>
		}
		else if (key_pressed == '2')
    5e94:	8b a5       	ldd	r24, Y+43	; 0x2b
    5e96:	82 33       	cpi	r24, 0x32	; 50
    5e98:	21 f4       	brne	.+8      	; 0x5ea2 <menuOption+0x322>
		{
			SPI_SEND_RECEIVE_DATA(TurnOffCode);
    5e9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    5e9c:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <SPI_SEND_RECEIVE_DATA>
    5ea0:	80 c0       	rjmp	.+256    	; 0x5fa2 <menuOption+0x422>

		}
		else if (key_pressed != NOT_PRESSED && key_pressed != '0')
    5ea2:	8b a5       	ldd	r24, Y+43	; 0x2b
    5ea4:	8f 3f       	cpi	r24, 0xFF	; 255
    5ea6:	09 f4       	brne	.+2      	; 0x5eaa <menuOption+0x32a>
    5ea8:	7c c0       	rjmp	.+248    	; 0x5fa2 <menuOption+0x422>
    5eaa:	8b a5       	ldd	r24, Y+43	; 0x2b
    5eac:	80 33       	cpi	r24, 0x30	; 48
    5eae:	09 f4       	brne	.+2      	; 0x5eb2 <menuOption+0x332>
    5eb0:	78 c0       	rjmp	.+240    	; 0x5fa2 <menuOption+0x422>
							{
								LCD_CLEAR_SCREEN();
    5eb2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_CLEAR_SCREEN>
								LCD_WriteString("wrong input");
    5eb6:	85 e6       	ldi	r24, 0x65	; 101
    5eb8:	92 e0       	ldi	r25, 0x02	; 2
    5eba:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_WriteString>
    5ebe:	80 e0       	ldi	r24, 0x00	; 0
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	aa ef       	ldi	r26, 0xFA	; 250
    5ec4:	b3 e4       	ldi	r27, 0x43	; 67
    5ec6:	8b 87       	std	Y+11, r24	; 0x0b
    5ec8:	9c 87       	std	Y+12, r25	; 0x0c
    5eca:	ad 87       	std	Y+13, r26	; 0x0d
    5ecc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ed6:	20 e0       	ldi	r18, 0x00	; 0
    5ed8:	30 e0       	ldi	r19, 0x00	; 0
    5eda:	4a e7       	ldi	r20, 0x7A	; 122
    5edc:	55 e4       	ldi	r21, 0x45	; 69
    5ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ee2:	dc 01       	movw	r26, r24
    5ee4:	cb 01       	movw	r24, r22
    5ee6:	8f 83       	std	Y+7, r24	; 0x07
    5ee8:	98 87       	std	Y+8, r25	; 0x08
    5eea:	a9 87       	std	Y+9, r26	; 0x09
    5eec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5eee:	6f 81       	ldd	r22, Y+7	; 0x07
    5ef0:	78 85       	ldd	r23, Y+8	; 0x08
    5ef2:	89 85       	ldd	r24, Y+9	; 0x09
    5ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ef6:	20 e0       	ldi	r18, 0x00	; 0
    5ef8:	30 e0       	ldi	r19, 0x00	; 0
    5efa:	40 e8       	ldi	r20, 0x80	; 128
    5efc:	5f e3       	ldi	r21, 0x3F	; 63
    5efe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f02:	88 23       	and	r24, r24
    5f04:	2c f4       	brge	.+10     	; 0x5f10 <menuOption+0x390>
		__ticks = 1;
    5f06:	81 e0       	ldi	r24, 0x01	; 1
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	9e 83       	std	Y+6, r25	; 0x06
    5f0c:	8d 83       	std	Y+5, r24	; 0x05
    5f0e:	3f c0       	rjmp	.+126    	; 0x5f8e <menuOption+0x40e>
	else if (__tmp > 65535)
    5f10:	6f 81       	ldd	r22, Y+7	; 0x07
    5f12:	78 85       	ldd	r23, Y+8	; 0x08
    5f14:	89 85       	ldd	r24, Y+9	; 0x09
    5f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f18:	20 e0       	ldi	r18, 0x00	; 0
    5f1a:	3f ef       	ldi	r19, 0xFF	; 255
    5f1c:	4f e7       	ldi	r20, 0x7F	; 127
    5f1e:	57 e4       	ldi	r21, 0x47	; 71
    5f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f24:	18 16       	cp	r1, r24
    5f26:	4c f5       	brge	.+82     	; 0x5f7a <menuOption+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f30:	20 e0       	ldi	r18, 0x00	; 0
    5f32:	30 e0       	ldi	r19, 0x00	; 0
    5f34:	40 e2       	ldi	r20, 0x20	; 32
    5f36:	51 e4       	ldi	r21, 0x41	; 65
    5f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f3c:	dc 01       	movw	r26, r24
    5f3e:	cb 01       	movw	r24, r22
    5f40:	bc 01       	movw	r22, r24
    5f42:	cd 01       	movw	r24, r26
    5f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f48:	dc 01       	movw	r26, r24
    5f4a:	cb 01       	movw	r24, r22
    5f4c:	9e 83       	std	Y+6, r25	; 0x06
    5f4e:	8d 83       	std	Y+5, r24	; 0x05
    5f50:	0f c0       	rjmp	.+30     	; 0x5f70 <menuOption+0x3f0>
    5f52:	80 e9       	ldi	r24, 0x90	; 144
    5f54:	91 e0       	ldi	r25, 0x01	; 1
    5f56:	9c 83       	std	Y+4, r25	; 0x04
    5f58:	8b 83       	std	Y+3, r24	; 0x03
    5f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    5f5e:	01 97       	sbiw	r24, 0x01	; 1
    5f60:	f1 f7       	brne	.-4      	; 0x5f5e <menuOption+0x3de>
    5f62:	9c 83       	std	Y+4, r25	; 0x04
    5f64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f66:	8d 81       	ldd	r24, Y+5	; 0x05
    5f68:	9e 81       	ldd	r25, Y+6	; 0x06
    5f6a:	01 97       	sbiw	r24, 0x01	; 1
    5f6c:	9e 83       	std	Y+6, r25	; 0x06
    5f6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f70:	8d 81       	ldd	r24, Y+5	; 0x05
    5f72:	9e 81       	ldd	r25, Y+6	; 0x06
    5f74:	00 97       	sbiw	r24, 0x00	; 0
    5f76:	69 f7       	brne	.-38     	; 0x5f52 <menuOption+0x3d2>
    5f78:	14 c0       	rjmp	.+40     	; 0x5fa2 <menuOption+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    5f7c:	78 85       	ldd	r23, Y+8	; 0x08
    5f7e:	89 85       	ldd	r24, Y+9	; 0x09
    5f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f86:	dc 01       	movw	r26, r24
    5f88:	cb 01       	movw	r24, r22
    5f8a:	9e 83       	std	Y+6, r25	; 0x06
    5f8c:	8d 83       	std	Y+5, r24	; 0x05
    5f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f90:	9e 81       	ldd	r25, Y+6	; 0x06
    5f92:	9a 83       	std	Y+2, r25	; 0x02
    5f94:	89 83       	std	Y+1, r24	; 0x01
    5f96:	89 81       	ldd	r24, Y+1	; 0x01
    5f98:	9a 81       	ldd	r25, Y+2	; 0x02
    5f9a:	01 97       	sbiw	r24, 0x01	; 1
    5f9c:	f1 f7       	brne	.-4      	; 0x5f9a <menuOption+0x41a>
    5f9e:	9a 83       	std	Y+2, r25	; 0x02
    5fa0:	89 83       	std	Y+1, r24	; 0x01
								_delay_ms(500);
							}

	}
	while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    5fa2:	8b a5       	ldd	r24, Y+43	; 0x2b
    5fa4:	80 33       	cpi	r24, 0x30	; 48
    5fa6:	18 f0       	brcs	.+6      	; 0x5fae <menuOption+0x42e>
    5fa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    5faa:	83 33       	cpi	r24, 0x33	; 51
    5fac:	28 f0       	brcs	.+10     	; 0x5fb8 <menuOption+0x438>
    5fae:	80 91 8c 02 	lds	r24, 0x028C
    5fb2:	88 23       	and	r24, r24
    5fb4:	09 f4       	brne	.+2      	; 0x5fb8 <menuOption+0x438>
    5fb6:	f7 cd       	rjmp	.-1042   	; 0x5ba6 <menuOption+0x26>


}
    5fb8:	e3 96       	adiw	r28, 0x33	; 51
    5fba:	0f b6       	in	r0, 0x3f	; 63
    5fbc:	f8 94       	cli
    5fbe:	de bf       	out	0x3e, r29	; 62
    5fc0:	0f be       	out	0x3f, r0	; 63
    5fc2:	cd bf       	out	0x3d, r28	; 61
    5fc4:	cf 91       	pop	r28
    5fc6:	df 91       	pop	r29
    5fc8:	08 95       	ret

00005fca <GetKeyPressed>:


u8 GetKeyPressed(u8 LoginMode){
    5fca:	df 93       	push	r29
    5fcc:	cf 93       	push	r28
    5fce:	00 d0       	rcall	.+0      	; 0x5fd0 <GetKeyPressed+0x6>
    5fd0:	cd b7       	in	r28, 0x3d	; 61
    5fd2:	de b7       	in	r29, 0x3e	; 62
    5fd4:	8a 83       	std	Y+2, r24	; 0x02

	u8 key_pressed = NOT_PRESSED;
    5fd6:	8f ef       	ldi	r24, 0xFF	; 255
    5fd8:	89 83       	std	Y+1, r24	; 0x01
    5fda:	1d c0       	rjmp	.+58     	; 0x6016 <GetKeyPressed+0x4c>

	while (key_pressed == NOT_PRESSED)
	{
		if ((session_counter >= ADMIN_TIMEOUT &&LoginMode == ADMIN) || (session_counter >= GUEST_TIMEOUT && LoginMode == GUEST) )
    5fdc:	80 91 8a 02 	lds	r24, 0x028A
    5fe0:	90 91 8b 02 	lds	r25, 0x028B
    5fe4:	23 e1       	ldi	r18, 0x13	; 19
    5fe6:	88 38       	cpi	r24, 0x88	; 136
    5fe8:	92 07       	cpc	r25, r18
    5fea:	18 f0       	brcs	.+6      	; 0x5ff2 <GetKeyPressed+0x28>
    5fec:	8a 81       	ldd	r24, Y+2	; 0x02
    5fee:	81 30       	cpi	r24, 0x01	; 1
    5ff0:	59 f0       	breq	.+22     	; 0x6008 <GetKeyPressed+0x3e>
    5ff2:	80 91 8a 02 	lds	r24, 0x028A
    5ff6:	90 91 8b 02 	lds	r25, 0x028B
    5ffa:	27 e0       	ldi	r18, 0x07	; 7
    5ffc:	80 3d       	cpi	r24, 0xD0	; 208
    5ffe:	92 07       	cpc	r25, r18
    6000:	38 f0       	brcs	.+14     	; 0x6010 <GetKeyPressed+0x46>
    6002:	8a 81       	ldd	r24, Y+2	; 0x02
    6004:	82 30       	cpi	r24, 0x02	; 2
    6006:	21 f4       	brne	.+8      	; 0x6010 <GetKeyPressed+0x46>
		{
			timeout_flag =TRUE;
    6008:	81 e0       	ldi	r24, 0x01	; 1
    600a:	80 93 8c 02 	sts	0x028C, r24
    600e:	06 c0       	rjmp	.+12     	; 0x601c <GetKeyPressed+0x52>
			break;
		}
		key_pressed = Keypad_GetPressedKey();
    6010:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <Keypad_GetPressedKey>
    6014:	89 83       	std	Y+1, r24	; 0x01

u8 GetKeyPressed(u8 LoginMode){

	u8 key_pressed = NOT_PRESSED;

	while (key_pressed == NOT_PRESSED)
    6016:	89 81       	ldd	r24, Y+1	; 0x01
    6018:	8f 3f       	cpi	r24, 0xFF	; 255
    601a:	01 f3       	breq	.-64     	; 0x5fdc <GetKeyPressed+0x12>
			timeout_flag =TRUE;
			break;
		}
		key_pressed = Keypad_GetPressedKey();
	}
	return key_pressed;
    601c:	89 81       	ldd	r24, Y+1	; 0x01
}
    601e:	0f 90       	pop	r0
    6020:	0f 90       	pop	r0
    6022:	cf 91       	pop	r28
    6024:	df 91       	pop	r29
    6026:	08 95       	ret

00006028 <timer0_initializeCTC>:

#include "timer0_driver.h"

void timer0_initializeCTC(void)
{
    6028:	df 93       	push	r29
    602a:	cf 93       	push	r28
    602c:	cd b7       	in	r28, 0x3d	; 61
    602e:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
    6030:	ec e5       	ldi	r30, 0x5C	; 92
    6032:	f0 e0       	ldi	r31, 0x00	; 0
    6034:	8e e4       	ldi	r24, 0x4E	; 78
    6036:	80 83       	st	Z, r24

	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
    6038:	a3 e5       	ldi	r26, 0x53	; 83
    603a:	b0 e0       	ldi	r27, 0x00	; 0
    603c:	e3 e5       	ldi	r30, 0x53	; 83
    603e:	f0 e0       	ldi	r31, 0x00	; 0
    6040:	80 81       	ld	r24, Z
    6042:	88 60       	ori	r24, 0x08	; 8
    6044:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    6046:	a3 e5       	ldi	r26, 0x53	; 83
    6048:	b0 e0       	ldi	r27, 0x00	; 0
    604a:	e3 e5       	ldi	r30, 0x53	; 83
    604c:	f0 e0       	ldi	r31, 0x00	; 0
    604e:	80 81       	ld	r24, Z
    6050:	8f 7b       	andi	r24, 0xBF	; 191
    6052:	8c 93       	st	X, r24

	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    6054:	a3 e5       	ldi	r26, 0x53	; 83
    6056:	b0 e0       	ldi	r27, 0x00	; 0
    6058:	e3 e5       	ldi	r30, 0x53	; 83
    605a:	f0 e0       	ldi	r31, 0x00	; 0
    605c:	80 81       	ld	r24, Z
    605e:	81 60       	ori	r24, 0x01	; 1
    6060:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    6062:	a3 e5       	ldi	r26, 0x53	; 83
    6064:	b0 e0       	ldi	r27, 0x00	; 0
    6066:	e3 e5       	ldi	r30, 0x53	; 83
    6068:	f0 e0       	ldi	r31, 0x00	; 0
    606a:	80 81       	ld	r24, Z
    606c:	8d 7f       	andi	r24, 0xFD	; 253
    606e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    6070:	a3 e5       	ldi	r26, 0x53	; 83
    6072:	b0 e0       	ldi	r27, 0x00	; 0
    6074:	e3 e5       	ldi	r30, 0x53	; 83
    6076:	f0 e0       	ldi	r31, 0x00	; 0
    6078:	80 81       	ld	r24, Z
    607a:	84 60       	ori	r24, 0x04	; 4
    607c:	8c 93       	st	X, r24

	//Enable global interrupts
	sei();
    607e:	78 94       	sei

	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
    6080:	a9 e5       	ldi	r26, 0x59	; 89
    6082:	b0 e0       	ldi	r27, 0x00	; 0
    6084:	e9 e5       	ldi	r30, 0x59	; 89
    6086:	f0 e0       	ldi	r31, 0x00	; 0
    6088:	80 81       	ld	r24, Z
    608a:	82 60       	ori	r24, 0x02	; 2
    608c:	8c 93       	st	X, r24
}
    608e:	cf 91       	pop	r28
    6090:	df 91       	pop	r29
    6092:	08 95       	ret

00006094 <timer0_stop>:

void timer0_stop(void)
{
    6094:	df 93       	push	r29
    6096:	cf 93       	push	r28
    6098:	cd b7       	in	r28, 0x3d	; 61
    609a:	de b7       	in	r29, 0x3e	; 62
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
    609c:	a3 e5       	ldi	r26, 0x53	; 83
    609e:	b0 e0       	ldi	r27, 0x00	; 0
    60a0:	e3 e5       	ldi	r30, 0x53	; 83
    60a2:	f0 e0       	ldi	r31, 0x00	; 0
    60a4:	80 81       	ld	r24, Z
    60a6:	8e 7f       	andi	r24, 0xFE	; 254
    60a8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    60aa:	a3 e5       	ldi	r26, 0x53	; 83
    60ac:	b0 e0       	ldi	r27, 0x00	; 0
    60ae:	e3 e5       	ldi	r30, 0x53	; 83
    60b0:	f0 e0       	ldi	r31, 0x00	; 0
    60b2:	80 81       	ld	r24, Z
    60b4:	8d 7f       	andi	r24, 0xFD	; 253
    60b6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    60b8:	a3 e5       	ldi	r26, 0x53	; 83
    60ba:	b0 e0       	ldi	r27, 0x00	; 0
    60bc:	e3 e5       	ldi	r30, 0x53	; 83
    60be:	f0 e0       	ldi	r31, 0x00	; 0
    60c0:	80 81       	ld	r24, Z
    60c2:	8b 7f       	andi	r24, 0xFB	; 251
    60c4:	8c 93       	st	X, r24
}
    60c6:	cf 91       	pop	r28
    60c8:	df 91       	pop	r29
    60ca:	08 95       	ret

000060cc <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
    60cc:	df 93       	push	r29
    60ce:	cf 93       	push	r28
    60d0:	cd b7       	in	r28, 0x3d	; 61
    60d2:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
    60d4:	ec e5       	ldi	r30, 0x5C	; 92
    60d6:	f0 e0       	ldi	r31, 0x00	; 0
    60d8:	80 e8       	ldi	r24, 0x80	; 128
    60da:	80 83       	st	Z, r24

	//Set timer mode
	//adjust fast pulse width modulation mode
	SET_BIT(TCCR0, WGM00);
    60dc:	a3 e5       	ldi	r26, 0x53	; 83
    60de:	b0 e0       	ldi	r27, 0x00	; 0
    60e0:	e3 e5       	ldi	r30, 0x53	; 83
    60e2:	f0 e0       	ldi	r31, 0x00	; 0
    60e4:	80 81       	ld	r24, Z
    60e6:	80 64       	ori	r24, 0x40	; 64
    60e8:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    60ea:	a3 e5       	ldi	r26, 0x53	; 83
    60ec:	b0 e0       	ldi	r27, 0x00	; 0
    60ee:	e3 e5       	ldi	r30, 0x53	; 83
    60f0:	f0 e0       	ldi	r31, 0x00	; 0
    60f2:	80 81       	ld	r24, Z
    60f4:	88 60       	ori	r24, 0x08	; 8
    60f6:	8c 93       	st	X, r24

	//Enable global interrupts
	sei();
    60f8:	78 94       	sei

	SET_BIT(TCCR0, COM01); //adjust non inverting mode
    60fa:	a3 e5       	ldi	r26, 0x53	; 83
    60fc:	b0 e0       	ldi	r27, 0x00	; 0
    60fe:	e3 e5       	ldi	r30, 0x53	; 83
    6100:	f0 e0       	ldi	r31, 0x00	; 0
    6102:	80 81       	ld	r24, Z
    6104:	80 62       	ori	r24, 0x20	; 32
    6106:	8c 93       	st	X, r24

	//Enable timer0 interrupt for overflow mode
	SET_BIT(TIMSK,TOIE0);
    6108:	a9 e5       	ldi	r26, 0x59	; 89
    610a:	b0 e0       	ldi	r27, 0x00	; 0
    610c:	e9 e5       	ldi	r30, 0x59	; 89
    610e:	f0 e0       	ldi	r31, 0x00	; 0
    6110:	80 81       	ld	r24, Z
    6112:	81 60       	ori	r24, 0x01	; 1
    6114:	8c 93       	st	X, r24

	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    6116:	a3 e5       	ldi	r26, 0x53	; 83
    6118:	b0 e0       	ldi	r27, 0x00	; 0
    611a:	e3 e5       	ldi	r30, 0x53	; 83
    611c:	f0 e0       	ldi	r31, 0x00	; 0
    611e:	80 81       	ld	r24, Z
    6120:	81 60       	ori	r24, 0x01	; 1
    6122:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    6124:	a3 e5       	ldi	r26, 0x53	; 83
    6126:	b0 e0       	ldi	r27, 0x00	; 0
    6128:	e3 e5       	ldi	r30, 0x53	; 83
    612a:	f0 e0       	ldi	r31, 0x00	; 0
    612c:	80 81       	ld	r24, Z
    612e:	8d 7f       	andi	r24, 0xFD	; 253
    6130:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    6132:	a3 e5       	ldi	r26, 0x53	; 83
    6134:	b0 e0       	ldi	r27, 0x00	; 0
    6136:	e3 e5       	ldi	r30, 0x53	; 83
    6138:	f0 e0       	ldi	r31, 0x00	; 0
    613a:	80 81       	ld	r24, Z
    613c:	84 60       	ori	r24, 0x04	; 4
    613e:	8c 93       	st	X, r24
}
    6140:	cf 91       	pop	r28
    6142:	df 91       	pop	r29
    6144:	08 95       	ret

00006146 <change_dutycycle>:

void change_dutycycle(f64 duty)
{
    6146:	0f 93       	push	r16
    6148:	1f 93       	push	r17
    614a:	df 93       	push	r29
    614c:	cf 93       	push	r28
    614e:	00 d0       	rcall	.+0      	; 0x6150 <change_dutycycle+0xa>
    6150:	00 d0       	rcall	.+0      	; 0x6152 <change_dutycycle+0xc>
    6152:	cd b7       	in	r28, 0x3d	; 61
    6154:	de b7       	in	r29, 0x3e	; 62
    6156:	69 83       	std	Y+1, r22	; 0x01
    6158:	7a 83       	std	Y+2, r23	; 0x02
    615a:	8b 83       	std	Y+3, r24	; 0x03
    615c:	9c 83       	std	Y+4, r25	; 0x04
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
    615e:	0c e5       	ldi	r16, 0x5C	; 92
    6160:	10 e0       	ldi	r17, 0x00	; 0
    6162:	69 81       	ldd	r22, Y+1	; 0x01
    6164:	7a 81       	ldd	r23, Y+2	; 0x02
    6166:	8b 81       	ldd	r24, Y+3	; 0x03
    6168:	9c 81       	ldd	r25, Y+4	; 0x04
    616a:	20 e0       	ldi	r18, 0x00	; 0
    616c:	30 e0       	ldi	r19, 0x00	; 0
    616e:	48 ec       	ldi	r20, 0xC8	; 200
    6170:	52 e4       	ldi	r21, 0x42	; 66
    6172:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6176:	dc 01       	movw	r26, r24
    6178:	cb 01       	movw	r24, r22
    617a:	bc 01       	movw	r22, r24
    617c:	cd 01       	movw	r24, r26
    617e:	20 e0       	ldi	r18, 0x00	; 0
    6180:	30 e0       	ldi	r19, 0x00	; 0
    6182:	40 e8       	ldi	r20, 0x80	; 128
    6184:	53 e4       	ldi	r21, 0x43	; 67
    6186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    618a:	dc 01       	movw	r26, r24
    618c:	cb 01       	movw	r24, r22
    618e:	bc 01       	movw	r22, r24
    6190:	cd 01       	movw	r24, r26
    6192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6196:	dc 01       	movw	r26, r24
    6198:	cb 01       	movw	r24, r22
    619a:	f8 01       	movw	r30, r16
    619c:	80 83       	st	Z, r24
}
    619e:	0f 90       	pop	r0
    61a0:	0f 90       	pop	r0
    61a2:	0f 90       	pop	r0
    61a4:	0f 90       	pop	r0
    61a6:	cf 91       	pop	r28
    61a8:	df 91       	pop	r29
    61aa:	1f 91       	pop	r17
    61ac:	0f 91       	pop	r16
    61ae:	08 95       	ret

000061b0 <__prologue_saves__>:
    61b0:	2f 92       	push	r2
    61b2:	3f 92       	push	r3
    61b4:	4f 92       	push	r4
    61b6:	5f 92       	push	r5
    61b8:	6f 92       	push	r6
    61ba:	7f 92       	push	r7
    61bc:	8f 92       	push	r8
    61be:	9f 92       	push	r9
    61c0:	af 92       	push	r10
    61c2:	bf 92       	push	r11
    61c4:	cf 92       	push	r12
    61c6:	df 92       	push	r13
    61c8:	ef 92       	push	r14
    61ca:	ff 92       	push	r15
    61cc:	0f 93       	push	r16
    61ce:	1f 93       	push	r17
    61d0:	cf 93       	push	r28
    61d2:	df 93       	push	r29
    61d4:	cd b7       	in	r28, 0x3d	; 61
    61d6:	de b7       	in	r29, 0x3e	; 62
    61d8:	ca 1b       	sub	r28, r26
    61da:	db 0b       	sbc	r29, r27
    61dc:	0f b6       	in	r0, 0x3f	; 63
    61de:	f8 94       	cli
    61e0:	de bf       	out	0x3e, r29	; 62
    61e2:	0f be       	out	0x3f, r0	; 63
    61e4:	cd bf       	out	0x3d, r28	; 61
    61e6:	09 94       	ijmp

000061e8 <__epilogue_restores__>:
    61e8:	2a 88       	ldd	r2, Y+18	; 0x12
    61ea:	39 88       	ldd	r3, Y+17	; 0x11
    61ec:	48 88       	ldd	r4, Y+16	; 0x10
    61ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    61f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    61f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    61f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    61f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    61f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    61fa:	b9 84       	ldd	r11, Y+9	; 0x09
    61fc:	c8 84       	ldd	r12, Y+8	; 0x08
    61fe:	df 80       	ldd	r13, Y+7	; 0x07
    6200:	ee 80       	ldd	r14, Y+6	; 0x06
    6202:	fd 80       	ldd	r15, Y+5	; 0x05
    6204:	0c 81       	ldd	r16, Y+4	; 0x04
    6206:	1b 81       	ldd	r17, Y+3	; 0x03
    6208:	aa 81       	ldd	r26, Y+2	; 0x02
    620a:	b9 81       	ldd	r27, Y+1	; 0x01
    620c:	ce 0f       	add	r28, r30
    620e:	d1 1d       	adc	r29, r1
    6210:	0f b6       	in	r0, 0x3f	; 63
    6212:	f8 94       	cli
    6214:	de bf       	out	0x3e, r29	; 62
    6216:	0f be       	out	0x3f, r0	; 63
    6218:	cd bf       	out	0x3d, r28	; 61
    621a:	ed 01       	movw	r28, r26
    621c:	08 95       	ret

0000621e <_exit>:
    621e:	f8 94       	cli

00006220 <__stop_program>:
    6220:	ff cf       	rjmp	.-2      	; 0x6220 <__stop_program>
